{"config":{"lang":["en"],"separator":"[\\s\\-,\\.:!=\\[\\]()\"/]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Adobe\u00ae After Effects\u00ae Software Development Kit!</p> <p>This is a living document and is constantly being updated and edited. The latest public version of the SDK is available at: https://www.adobe.io/after-effects/</p> <p>If you need more information, your question may already be answered on the After Effects SDK forum: After Effects SDK Forum</p> <p>Use the search box there, and post a new question if your question hasn\u2019t already been answered.</p>"},{"location":"#about","title":"About","text":"<p>This document has changed much over the years. Part encyclopedia, part how-to guide, with multiple sedimentary layers of accreted information from more than two decades of API development and refinement.</p> <p>Yes, there does need to be one source of information about every last niggling detail of the After Effects APIs. However, since no human in their right mind would ever want to read such a document, we've tried to keep it involving and interesting.</p> <p>As opportunity allows, we'll try to include more diagrams, illustrations, and purdy pickshurs explaining API intricacies.</p> <p>As always, your input is valued and appreciated.</p>"},{"location":"#organization","title":"Organization","text":"<p>The What Can I Do With This SDK? provides an overview of the integration possibilities with After Effects. It explains what plug-ins are, and how they work with After Effects. It describes the sample projects, and how to modify them. It explains where to install plug-ins, and what resources they use.</p> <p>The basics of effect plug-ins are discussed in Effect Basics. This overview provides information on the function parameters passed to and from an effect plug-in's entry point. It describes capability flags, effect parameters, and image buffers.</p> <p>Effect Details dives into the details of developing a complete effect plug-in using the many provided callback functions. It also provides many testing ideas to ensure the plug-in is stabile.</p> <p>SmartFX is the extension to the effect plug-in API to support 32-bit floating point images.</p> <p>Effect UI &amp; Events covers events sent to effect plug-ins, how to incorporate custom user interface elements, parameter supervision, and the reliance of custom data parameter types on Custom UI messaging.</p> <p>Audio effects are covered in... Audio.</p> <p>AEGPs details the After Effects General Plug-in (AEGP) API. Provided callback functions, hooking into internal messaging, manipulating the current contents of open projects and handling menu commands are all covered at length.</p> <p>Artisans covers specialized plug-in 3D renderer AEGPs.</p> <p>AEIOs, specialized AEGPs which handle file input and output.</p> <p>Premiere Pro &amp; Other Hosts discusses issues related to compatibility with Premiere Pro and other applications that support a subset of After Effects plug-ins.</p>"},{"location":"#documentation-conventions","title":"Documentation Conventions","text":"<p>Functions, structure names and general C/C++ code are in Courier; MyStruct and MyFunction();</p> <p>Text in blue is hyperlinked.</p> <p>Command selectors are italicized; PF_Cmd_RENDER.</p>"},{"location":"#a-note-about-coding-style","title":"A Note About Coding Style","text":"<p>Because we use the public APIs for our own plug-ins, our coding guidelines are apparent throughout the SDK. Here's a description of the pseudo-neo-post-Hungarian notation we use. Of course, you're welcome to code however you like. If you feel strongly that we should change our internal coding standards, please post your requests at comp.sys.programmer.better.things.to.do.with.your.time, and we'll carefully consider them before not making any changes.</p>"},{"location":"#coding-conventions","title":"Coding Conventions","text":"Type Suffix Example Handle <code>H</code> <code>fooH</code> pointer (to) <code>P</code> <code>fooP</code> Boolean <code>B</code> <code>visibleB</code> Float <code>F</code> <code>degreesF</code> Long <code>L</code> <code>offsetL</code> unsigned long <code>Lu</code> <code>countLu</code> short <code>S</code> <code>indexS</code> char <code>C</code> <code>digitC</code> unsigned char <code>Cu</code> <code>redCu</code> function pointer <code>\\_func</code> <code>sample_func</code> time value <code>T</code> <code>durationT</code> <code>char*</code> (NULL-terminated C string) <code>Z</code> <code>nameZ</code> rectangle <code>R</code> <code>boundsR</code> fixed rectangle <code>FiR</code> <code>boundsFiR</code> float rectangle <code>FR</code> <code>boundsFR</code> ratio <code>Rt</code> <code>scale_factorRt</code> <code>void*</code> <code>PV</code> <code>refconPV</code> optional parameter (must be passed, can be NULL) <code>0</code> <code>extra_flags0</code>"},{"location":"history/","title":"Version History","text":"Revision Date Documentor Notes 24 Feb 2025 Sean Jenkin 25.2 SDK Release - AEGP_GetLayerObjectType can now return AEGP_ObjectType_3D_MODEL if the object type is a 3D model 5 May 2023 Jason Bartell Update Color Settings suite to AEGP_ColorSettingsSuite5 with new OCIO calls, and added URL property to the PiPL. See AEGP_ColorSettingsSuite5 and PiPL Resources respectively for more details. 18 October 2022 Field Kuang Update layer suite to AEGP_LayerSuite9 with 3 new Track Matte methods. See AEGP_LayerSuite9 for more details 26 October 2021 Sean Jenkin After Effects 2022 (22.0) release. Updates the maxiumum threads for PF_Iterate. 31 March 2021 Sean Jenkin Updated Multi-Frame Rendering documentation for sequence_data changes and Compute Cache system. Added information for supporting Universal Mac binaries for Apple Silicon effect plugins. 1 June 2020 Field Kuang Multi-Frame Rendering is now supported in AE Beta builds. See Multi-Frame Rendering in AE for more details. 1 November 2018 Bruce Bullis 16.0 release 10 November 2017 Zac Lam 15.0 release 12 May 2017 Zac Lam CC 2017.1 (14.2) release 2 November 2016 Zac Lam CC 2017 (14.0) release. 21 July 2015 Zac Lam CC 2015 (13.5) release. 12 June 2014 Zac Lam CC 2014 (13.0) release. Corrections for accuracy. Removed old version references. 15 July 2013 Zac Lam CC (12.0) release. API version changes, misc small clarifications, more details in AEIOs. 26 April 2012 Zac Lam CS6 (11.0) release. Big reorganization of the AEGPs and Artisans. Many additions throughout. 2 May 2011 Zac Lam CS5.5 (10.5) release. 28 April 2010 Zac Lam CS5 (10.0) release. 64-bit porting info. Drawbot. 4 May 2009 Zac Lam CS4 (9.0) release. Complete reorganization of first three chapters. Fleshed out documentation on Premiere Pro. 1 July 2007 Bruce Bullis CS3 (8.0) release. 4 April 2006 Bruce Bullis Updated to reference new development system requirements and Xcode-specific issues. Some editing. 1 December 2005 Bruce Bullis Updated for 7.0. Added SmartFX documentation. Noted current suite version numbers throughout. Numerous editorial changes. Documented many new AEGP suite functions. 4 April 2004 Bruce Bullis Updated for 6.5. Expanded and corrected all documentation. Added documentation of all new AEGP functions. 20 July 2003 Bruce Bullis Major overhauls for After Effects 6.0. Added documentation for all new (and some old) suites, and many supporting details for effects. 4 March 2002 Bruce Bullis Updated Mac OS X details, expanded AEIO and AEGP documentation. 1 December 2001 Bruce Bullis 5.5 release. Added information on new outflags, PiPL changes, and additions and changes to the AEGP API. Numerous clarifications and edits. 2 February 2001 Bruce Bullis 5.0 release. Entire document edited and reformatted. Sections on 16 bit-per-channel color and parameter supervision, as well as the entire AEGP chapter, have all substantially expanded. 9 September 1999 Bruce Bullis Revised for 4.1; added General plug-ins and AEGP information. Added information on new selectors, resize handle. 1 January 1999 Bruce Bullis Version 4.0 SDK Release 1 - Added information on new global flags, custom data types, utilization of PICA suites, CustomUI messaging and parameter supervision, new callbacks. many editorial changes. 1 May 1998 Bruce Bullis Version 3.1 SDK Release 6 - Editorial changes only 17 April 1997 Brian Andrews Version 3.1 SDK Release 3 - First public release (really a pre-release) of the SDK for Windows development. 13 Nov. 1996 Brian Andrews Version 3.1 SDK Release 2 - Minor updates. 21 June 1996 Brian Andrews Version 3.1 - Final 3.x release. 5 March 1996 Brian Andrews Version 3.0 - Preliminary release for the After Effects developer kitchen. August 1994 Dave Herbstman Dan Wilk Version 2.0.1 - Added support for PowerPC. January 1994 Dan Wilk Version 2.0 - Updates. January 1993 Russell Belfer Version 1.0 - Initial SDK release."},{"location":"_global/readme/","title":"docsforadobe.dev MkDocs Config","text":"<p>This repo holds the common components shared between this org's hosted MkDocs documentation projects.</p> <p>The idea is that this repo will be kept up-to-date with global config, and each child repo will use the provided script to download the latest commit from this repo, and have its \"local\" MkDocs config point to the downloaded files from this repo.</p> <p>In all cases, each child repo will be able to override config items here as needed.</p>"},{"location":"_global/readme/#updating-this-repo","title":"Updating This Repo","text":"<p>See Modifying Common Components in the org contribution guide for info on how this repo works, and best practices for modifying it.</p>"},{"location":"aegps/aegp-details/","title":"AEGP Details","text":""},{"location":"aegps/aegp-details/#have-a-cookie","title":"Have A Cookie","text":"<p>In cases where After Effects must preserve state information around the functions your AEGP calls (as when an artisan is rendering a frame, or a keyframer is adding and removing a series of keyframes from the same stream), you'll call begin() and end() functions.</p> <p>Typically, the begin function will return an opaque identifier, or 'cookie', which you must then pass to the functions being used. The end function will properly dispose of the cookie. See <code>AEGP_StartAddKeyframes()</code> (under AEGP_KeyframeSuite3) for an example.</p>"},{"location":"aegps/aegp-details/#modifying-items-in-the-render-queue","title":"Modifying Items In The Render Queue","text":"<p>If you call <code>AEGP_AddCompToRenderQueue</code> (from AEGP_RenderQueueSuite1), or if the user manually adds or removes a composition from the render queue, all references to render queue items are invalidated. Similarly, adding or removing output modules invalidates any such references for each render queue item.</p>"},{"location":"aegps/aegp-details/#names-and-solids","title":"Names And Solids","text":"<p>Solids have names in the After Effects UI, but not in their <code>PF_LayerDef</code> PF_EffectWorld / PF_LayerDef. Consequently, their names cannot be retrieved by <code>AEGP_GetItemName</code> (in AEGP_ItemSuite9) or <code>AEGP_GetLayerName</code> (in AEGP_LayerSuite9).</p> <p>However, you can use the ItemH associated with them to <code>AEGP_GetItemName</code> (from AEGP_ItemSuite9).</p>"},{"location":"aegps/aegp-details/#reporting-errors-and-problems","title":"Reporting Errors And Problems","text":"<p>Use <code>AEGP_ItemSuite&gt;AEGP_ReportInfo()</code> to report information to users, and identify your plug-in. AEIO plug-ins use the msg_func pointer contained in the AEIO_BasicData they're passed (with every function) instead.</p>"},{"location":"aegps/aegp-details/#transforms-what-happens-first","title":"Transforms: What Happens First?","text":"<p>After Effects computes rotation based on auto-orientation (towards path, or point of interest), then computes Orientation, then computes X, Y, and Z rotation.</p>"},{"location":"aegps/aegp-details/#accessing-pixels-from-effect-layer-parameters","title":"Accessing Pixels From Effect Layer Parameters","text":"<p>Use <code>AEGP_GetNewStreamValue</code> (in AEGP_StreamSuite5) to get the layer's <code>layer_id</code>, then the new <code>AEGP_GetLayerFromLayerID</code> (in AEGP_LayerSuite9) to get the <code>AEGP_LayerH</code>.</p>"},{"location":"aegps/aegp-suites/","title":"AEGP Suites","text":"<p>As mentioned earlier, AEGPs do everything through suites. The following suites are used by all types of AEGPs, and may be called from within any hook function (except for the RegisterSuite, which must be used from within the AEGP's entry point). Following is a description of each function in every suite, and, where appropriate details on using those functions.</p> <p>Suite</p> <p>Description</p> <p>Memory Suite</p> <p>Manage memory resources. Use this suite! Whenever memory-related errors are encountered, After Effects can report errors for you.</p> <p>Command Suite</p> <p>Manage your AEGP's menu items. Used in conjunction with the Register Suite.</p> <p>Register Suite</p> <p>Used in conjunction with the Command Suite to add functions to menu commands.</p> <p>AEIOs and Artisans must use this suite's functions to indicate to After Effects that they want to receive the appropriate message streams.</p> <p>You can replace some After Effects' commands using this suite.</p> <p>Project Suite</p> <p>Reads and modifies project data.</p> <p>Item Suite</p> <p>Manages items within a project or composition.</p> <p>Folders, Compositions, Solids, and Footage are all items.</p> <p>Collection Suite</p> <p>Query which items are currently selected, and create your own selection sets.</p> <p>It's often a good UI move to select all the items your AEGP has modified, just to give the user some idea what you've done.</p> <p>Composition Suite</p> <p>Manages (and creates) compositions in a project, and composition-specific items like solids.</p> <p>Footage Suite</p> <p>Manages footage.</p> <p>Layer Suite</p> <p>Provides information about the layers within a composition, and the relationship(s) between the source and layer times.</p> <p>Solids, text, paint, cameras, lights, images, and image sequences can all become layers.</p> <p>Effect Suite</p> <p>Provides access to the effects applied to a layer.</p> <p>Use Stream suites to obtain effect keyframe information.</p> <p>Use <code>AEGP_EffectCallGeneric()</code> (in AEGP_EffectSuite4) to communicate with effects that you setup ahead of time to respond to your AEGP.</p> <p>Stream Suite</p> <p>Used to access the values of a layer's keyframe properties.</p> <p>Dynamic Stream Suite</p> <p>Used to access the characteristics of dynamic streams associated with a layer.</p> <p>Keyframe Suite</p> <p>Used to access and manipulate all keyframe data.</p> <p>Marker Suite</p> <p>Used to manipulate markers. Use <code>AEGP_GetNewCompMarkerStream()</code> (in AEGP_CompSuite11) to get the composition marker stream.</p> <p>Mask Suite</p> <p>Provides access to retrieve information about a layer's masks.</p> <p>Mask Outline Suite</p> <p>Used in conjunction with Stream Suite, this suite provides detailed information about the path rendered to make a layer's mask.</p> <p>Text Document Suite</p> <p>Used to access the actual text on a text layer.</p> <p>Text Layer Suite</p> <p>Used to access the paths that make up the outlines of a text layer.</p> <p>Utility Suite</p> <p>Supplies error message handling, AEGP version checking and access to After Effects' undo stack.</p> <p>Persistent Data Suite</p> <p>Query and manage all persistent data (i.e., the preferences file).</p> <p>AEGPs can also add their own data to the prefs.</p> <p>Color Settings Suite</p> <p>Obtain information on After Effects' current color management settings.</p> <p>Render Suite</p> <p>Get rendered frames (and audio samples) from within an AEGP.</p> <p>World Suite</p> <p>Allocate, dispose of, and query AEGP_Worlds.</p> <p>Also provides a way to convert a <code>PF_EffectWorld</code> into an <code>AEGP_World</code>, for working with effect plug-ins.</p> <p>Composite Suite</p> <p>Exposes After Effects' compositing functionality, including transfer modes, track matting, and good old fashioned bit copying.</p> <p>Sound Data Suite</p> <p>Functions for managing and accessing sound data.</p> <p>Render Queue Suite</p> <p>Add and remove items from the render queue.</p> <p>Render Queue Item Suite</p> <p>Query and modify items in the render queue.</p> <p>Render Options Suite</p> <p>Query and manage all items exposed in a render queue item's options dialog.</p> <p>Output Module Suite</p> <p>Query and modify the output modules attached to items in the render queue.</p> <p>PF Interface Suite</p> <p>The functions in this suite, while technically part of the AEGP API, are for use by effects.</p> <p>AEGP Iterate Suite</p> <p>Gives AEGPs a way to have a function (which has the required signature) to be run on any or all available processors.</p> <p>File Import Manager Suite</p> <p>Registers AEGP file and project importers as part of After Effects' file handling.</p>"},{"location":"aegps/aegp-suites/#fail-gracefully","title":"Fail Gracefully","text":"<p>If a suite isn't present, make every attempt to fail gracefully. Show the user a message indicating the nature of the problem. Attempt to acquire and use an earlier version of the same suite.</p> <p>Since AEGPs are so deeply integrated with After Effects, make sure that users know who or what is encountering a given problem.</p> <p>Identify yourself! Provide support and/or help information to the user whenever possible.</p>"},{"location":"aegps/aegp-suites/#handling-handles","title":"Handling Handles","text":"<p>Use the AEGP Memory Suite to manage memory used by the AEGP. Whenever memory related errors are encountered, After Effects can report errors for you to find early on.</p> <p><code>AEGP_MemHandle</code> is a structure that contains more than just the referenced memory. So it should not be dereferenced directly. Use <code>AEGP_LockMemHandle</code> to get a pointer to the memory referenced by the <code>AEGP_MemHandle</code>.</p> <p>And of course, unlock it when you're done.</p>"},{"location":"aegps/aegp-suites/#aegp_memorysuite1","title":"AEGP_MemorySuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NewMemHandle</code></p> <p>Create a new memory handle. This memory is guaranteed to be 16-byte aligned. <code>plugin_id</code> is the ID passed in through the main Entry Point, or alternatively what you obtained from <code>AEGP_RegisterWithAEGP()</code> (from AEGP_UtilitySuite6).</p> <p>Use <code>whatZ</code> to identify the memory you are asking for. After Effects uses the string to display any related error messages.</p> <p><pre><code>AEGP_NewMemHandle(\n  AEGP_PluginID   *plugin_id,\n  const A_char    *whatZ,\n  AEGP_MemSize    size,\n  AEGP_MemFlag    flags,\n  AEGP_MemHandle  *memPH);\n</code></pre></p> <p><code>AEGP_FreeMemHandle</code></p> <p>Release a handle you allocated using <code>AEGP_NewMemHandle()</code>.</p> <p><pre><code>AEGP_FreeMemHandle(\n  AEGP_MemHandle  memH);\n</code></pre></p> <p><code>AEGP_LockMemHandle</code></p> <p>Locks the handle into memory (cannot be moved by OS). Use this function prior to using memory allocated by <code>AEGP_NewMemHandle()</code>. Can be nested.</p> <p><pre><code>AEGP_LockMemHandle(\n  AEGP_MemHandle  memH,\n  void            *ptr_to_ptr);\n</code></pre></p> <p><code>AEGP_UnlockMemHandle</code></p> <p>Allows OS to move the referenced memory. Always balance lock calls with unlocks.</p> <p><pre><code>AEGP_UnlockMemHandle(\n  AEGP_MemHandle  memH);\n</code></pre></p> <p><code>AEGP_GetMemHandleSize</code></p> <p>Returns the allocated size of the handle.</p> <p><pre><code>AEGP_GetMemHandleSize AEGP_MemHandle memH,\n  AEGP_MemSize  *sizeP);\n</code></pre></p> <p><code>AEGP_ResizeMemHandle</code></p> <p>Changes the allocated size of the handle.</p> <p><pre><code>AEGP_ResizeMemHandle(\n  const char      *whatZ,\n  AEGP_MemSize    new_size,\n  AEGP_MemHandle  memH);\n</code></pre></p> <p><code>AEGP_SetMemReportingOn</code></p> <p>If After Effects runs into problems with the memory handling, the error should be reported to the user. Make use of this during development!</p> <p>Only memory allocated and then leaked using this suite is reported using this call, so for example memory allocated using PF_HandleSuite1 will not be reported.</p> <p><pre><code>AEGP_SetMemReportingOn(\n  A_Boolean  turn_OnB);\n</code></pre></p> <p><code>AEGP_GetMemStats</code></p> <p>Obtain information about the number of currently allocated handles and their total size.</p> <p>Only memory allocated using this suite is tracked and reported using this call, so for example memory allocated using PF_HandleSuite1 will not be reported here.</p> <p><pre><code>AEGP_GetMemStats(\n  AEGP_MemID  mem_id,\n  A_long      *countPL,\n  A_long      *sizePL);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#managing-menu-items","title":"Managing Menu Items","text":"<p>Command Suites allow you to create and handle any menu events.</p> <p>To add your own menu commands, you must also use Register Suite to assign handlers to menu events.</p>"},{"location":"aegps/aegp-suites/#aegp_commandsuite1","title":"AEGP_CommandSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetUniqueCommand</code></p> <p>Obtain a unique command identifier. Use the Register Suite to register a handler for the command.</p> <p><pre><code>AEGP_GetUniqueCommand(\n  AEGP_Command  *unique_commandP);\n</code></pre></p> <p>Note: On occasion After Effects will send command 0 (zero), so don't use that as part of your command handling logic.</p> <p><code>AEGP_InsertMenuCommand</code></p> <p>Add a new menu command. Using <code>nameZ = \"-\"</code> will insert a separator.</p> <p><code>menu_ID</code> can be:</p> <ul> <li><code>AEGP_Menu_NONE</code></li> <li><code>AEGP_Menu_APPLE</code></li> <li><code>AEGP_Menu_FILE</code></li> <li><code>AEGP_Menu_EDIT</code></li> <li><code>AEGP_Menu_COMPOSITION</code></li> <li><code>AEGP_Menu_LAYER</code></li> <li><code>AEGP_Menu_EFFECT</code></li> <li><code>AEGP_Menu_WINDOW</code></li> <li><code>AEGP_Menu_FLOATERS</code></li> <li><code>AEGP_Menu_KF_ASSIST</code></li> <li><code>AEGP_Menu_IMPORT</code></li> <li><code>AEGP_Menu_SAVE_FRAME_AS</code></li> <li><code>AEGP_Menu_PREFS</code></li> <li><code>AEGP_Menu_EXPORT</code></li> <li><code>AEGP_Menu_ANIMATION</code></li> <li><code>AEGP_Menu_PURGE</code></li> <li><code>AEGP_Menu_NEW</code> - Supported in CC and later</li> </ul> <p>Locations can be set to a specific location in the menu or can be one assigned by After Effects:</p> <ul> <li><code>AEGP_MENU_INSERT_SORTED</code></li> <li><code>AEGP_MENU_INSERT_AT_BOTTOM</code></li> <li><code>AEGP_MENU_INSERT_AT_TOP</code></li> </ul> <p>For <code>AEGP_Menu_WINDOW</code>, the BOTTOM and TOP options haven't been supported since CS4 and will return an error. We recommend <code>SORTED</code>.</p> <p><pre><code>AEGP_InsertMenuCommand(\n  AEGP_Command  command,\n  const A_char  *nameZ,\n  AEGP_MenuID   menu_id,\n  A_long        after_itemL);\n</code></pre></p> <p><code>AEGP_RemoveMenuCommand</code></p> <p>Remove a menu command. If you were so motivated, you could remove ALL of the After Effects menu items.</p> <p><pre><code>AEGP_RemoveMenuCommand(\n  AEGP_Command  command);\n</code></pre></p> <p><code>AEGP_SetCommandName</code></p> <p>Set menu name of a command.</p> <p><pre><code>AEGP_SetCommandName(\n  AEGP_Command  command,\n  const A_char  *nameZ);\n</code></pre></p> <p><code>AEGP_EnableCommand</code></p> <p>Enable a menu command.</p> <p><pre><code>AEGP_EnableCommand(\n  AEGP_Command  command);\n</code></pre></p> <p><code>AEGP_DisableCommand</code></p> <p>Disable a menu command.</p> <p><pre><code>AEGP_DisableCommand(\n  AEGP_Command  command);\n</code></pre></p> <p><code>AEGP_CheckMarkMenuCommand</code></p> <p>After Effects will draw a check mark next to the menu command.</p> <p><pre><code>AEGP_CheckMarkMenuCommand(\n  AEGP_Command  command,\n  A_Boolean     checkB);\n</code></pre></p> <p><code>AEGP_DoCommand</code></p> <p>Call the handler for a specified menu command. Every After Effects menu item has an associated command.</p> <p>Note that we make no guarantees that command IDs will be consistent from version to version.</p> <p><pre><code>AEGP_DoCommand(\n  AEGP_Command  command);\n</code></pre></p> <p>Having given the disclaimer above, here are a few command numbers that have been supplied to other developers, and may be of interest:</p> <ul> <li><code>3061</code> - Open selection, ignoring any modifier keys.</li> <li><code>10314</code> - Play/Stop (valid in 13.5 and later)</li> <li><code>2285</code> - RAM Preview (valid prior to 13.5)</li> <li><code>2415</code> - Play (spacebar) (valid prior to 13.5)</li> <li><code>2997</code> - Crop composition to region of interest.</li> <li><code>2372</code> - Edit &gt; Purge &gt; Image Caches</li> </ul> <p>If your AEGP needs to call some other After Effects menu item, there's a fairly easy way to find out most commands you want, using scripting:</p> <p><pre><code>cmd = app.findMenuCommandId(text); // e.g. text = \"Open Project...\"\nalert(cmd);\n</code></pre></p> <p>With AE running, just open up Adobe ExtendScript Toolkit CC, copy the above script in, and in the app drop-down choose the version of After Effects you have running. Then hit the Play button to run the script in AE. Otherwise, contact API Engineering for the command number.</p>"},{"location":"aegps/aegp-suites/#registering-with-after-effects","title":"Registering with After Effects","text":"<p>Register functions for After Effects' use.</p>"},{"location":"aegps/aegp-suites/#aegp_registersuites5","title":"AEGP_RegisterSuites5","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_RegisterCommandHook</code></p> <p>Register a hook (command handler) function with After Effects.</p> <p>If you are replacing a function which After Effects also handles, <code>AEGP_HookPriority</code> determines whether your plug-in gets it first.</p> <ul> <li><code>AEGP_HP_BeforeAE</code></li> <li><code>AEGP_HP_AfterAE</code></li> </ul> <p>For each menu item you add, obtain your own <code>AEGP_Command</code> using <code>AEGP_GetUniqueCommand()</code> (from AEGP_CommandSuite1) prior registering a single <code>command_hook_func</code>.</p> <p>Determine which command was sent within this hook function, and act accordingly.</p> <p>Currently, <code>AEGP_HookPriority</code> is ignored.</p> <p><pre><code>AEGP_RegisterCommandHook(\n  AEGP_PluginID      aegp_plugin_id,\n  AEGP_HookPriority  hook_priority,\n  AEGP_Command       command,\n  AEGP_CommandHook   command_hook_func\n  void               *refconPV);\n</code></pre></p> <p><code>AEGP_RegisterUpdateMenuHook</code></p> <p>Register your menu update function (which determines whether or not items are active), called every time any menu is to be drawn.</p> <p>This hook function handles updates for all menus.</p> <p><pre><code>AEGP_RegisterUpdateMenuHook(\n  AEGP_PluginID        aegp_plugin_id,\n  AEGP_UpdateMenuHook  update_menu_hook_func,\n  void                 *refconPV);\n</code></pre></p> <p><code>AEGP_RegisterDeathHook</code></p> <p>Register your termination function. Called when the application quits.</p> <p><pre><code>AEGP_RegisterDeathHook(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_DeathHook  death_hook_func,\n  void            *refconPV);\n</code></pre></p> <p><code>AEGP_RegisterVersionHook</code></p> <p>Currently not called.</p> <p><code>AEGP_RegisterAboutStringHook</code></p> <p>Currently not called.</p> <p><code>AEGP_RegisterAboutHook</code></p> <p>Currently not called.</p> <p><code>AEGP_RegisterArtisan</code></p> <p>Register your Artisan. See Artisans for more details.</p> <p><pre><code>AEGP_RegisterArtisan(\n  A_Version              api_version,\n  A_Version              Artisan_version,\n  long                   aegp_plugin_id,\n  void                   *aegp_refconPV,\n  const A_char           *match_nameZ,\n  const A_char           *Artisan_nameZ,\n  PR_ArtisanEntryPoints  *entry_funcsP);\n</code></pre></p> <p><code>AEGP_RegisterIO</code></p> <p>Register your AEIO plug-in. See AEIOs for more details.</p> <p><pre><code>AEGP_RegisterIO (\n  AEGP_PluginID              aegp_plugin_id,\n  AEGP_IORefcon              aegp_refconP,\n  const AEIO_ModuleInfo      *io_infoP,\n  const AEIO_FunctionBlock4  *aeio_fcn_blockP);\n</code></pre></p> <p><code>AEGP_RegisterIdleHook</code></p> <p>Register your IdleHook function. After Effects will call the function sporadically, while the user makes difficult artistic decisions (or while they're getting more coffee).</p> <p><pre><code>AEGP_RegisterIdleHook(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_IdleHook    idle_hook_func,\n  AEGP_IdleRefcon  refconP);\n</code></pre></p> <p><code>AEGP_RegisterInteractiveArtisan</code></p> <p>Registers your AEGP as an interactive artisan, for use in previewing and rendering all layers in a given composition.</p> <p><pre><code>AEGP_RegisterInteractiveArtisan (\n  A_Version              api_version,\n  A_Version              artisan_version,\n  AEGP_PluginID          aegp_plugin_id,\n  void                   *aegp_refconPV,\n  const A_char           *match_nameZ,\n  const A_char           *artisan_nameZ,\n  PR_ArtisanEntryPoints  *entry_funcsP);\n</code></pre></p> <p><code>AEGP_RegisterPresetLocalizationString</code></p> <p>Call this to register as many strings as you like for name-replacement when presets are loaded.</p> <p>Any time a Property name is found, or referred to in an expression, and it starts with an ASCII tab character ('t'), followed by one of the English names, it will be replaced with the localized name.</p> <p>(In English the tab character will simply be removed).</p> <p><pre><code>AEGP_RegisterPresetLocalizationString(\n  const A_char  *english_nameZ,\n  const A_char  *localized_nameZ);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#manage-projects","title":"Manage Projects","text":"<p>These functions access and modify project data. Support for multiple projects is included to prepare for future expansion; After Effects currently adheres to the single project model.</p> <p>To save project-specific data in After Effects' preferences (and thus, outside the projects themselves), use the Persistent Data Suite.</p> <p>Use caution: the functions for opening and creating projects do not save changes to the project currently open when they are called!</p>"},{"location":"aegps/aegp-suites/#aegp_projsuite6","title":"AEGP_ProjSuite6","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NumProjects</code></p> <p>Currently will never return more than 1. After Effects can have only one project open at a time.</p> <p><pre><code>AEGP_GetNumProjects(\n  A_long  *num_projPL)\n</code></pre></p> <p><code>AEGP_GetIndProject</code></p> <p>Retrieves a specific project by index.</p> <p><pre><code>AEGP_GetProjectProjectByIndex(\n  A_long         proj_indexL,\n  AEGP_ProjectH  *projPH);\n</code></pre></p> <p><code>AEGP_GetProjectName</code></p> <p>Get the project name (up to <code>AEGP_MAX_PROJ_NAME_LEN + 1</code>) in length.</p> <p><pre><code>AEGP_GetProjectName(\n  AEGP_ProjectH  projH,\n  A_char         *nameZ);\n</code></pre></p> <p><code>AEGP_GetProjectPath</code></p> <p>Get the path of the project (empty string the project hasn't been saved yet).</p> <p>The path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetProjectPath(\n  AEGP_ProjectH   projH,\n  AEGP_MemHandle  *unicode_pathPH)\n</code></pre></p> <p><code>AEGP_GetProjectRootFolder</code></p> <p>Get the root of the project, which After Effects also treats as a folder.</p> <p><pre><code>AEGP_GetProjectRootFolder(\n  AEGP_ProjectH  projH,\n  AEGP_ItemH     *root_folderPH)\n</code></pre></p> <p><code>AEGP_SaveProjectToPath</code></p> <p>Saves the entire project to the specified full path.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p><pre><code>AEGP_SaveProjectToPath(\n  AEGP_ProjectH      projH,\n  const A_UTF16Char  *pathZ);\n</code></pre></p> <p><code>AEGP_GetProjectTimeDisplay</code></p> <p>Retrieves the current time display settings.</p> <p><pre><code>AEGP_GetProjectTimeDisplay(\n  AEGP_ProjectH      projH,\n  AEGP_TimeDisplay3  *time_displayP);\n\ntypedef struct {\n  AEGP_TimeDisplayMode            display_mode;\n  AEGP_SourceTimecodeDisplayMode  footage_display_mode;\n  A_Boolean                       display_dropframeB;\n  A_Boolean                       use_feet_framesB;\n  A_char                          timebaseC;\n  A_char                          frames_per_footC;\n  AEGP_FramesDisplayMode          frames_display_mode;\n} AEGP_TimeDisplay3;\n\nenum {\n  AEGP_TimeDisplay_TIMECODE = 0,\n  AEGP_TimeDisplay_FRAMES\n};\n\ntypedef char AEGP_TimeDisplayMode;\n\ntypedef char AEGP_FramesDisplayMode;\n</code></pre></p> <p><code>AEGP_SetProjectTimeDisplay</code></p> <p>Specified the settings to be used for displaying time.</p> <p><pre><code>AEGP_SetProjectTimeDisplay(\n  AEGP_ProjectH            projH,\n  const AEGP_TimeDisplay3  *time_displayP);\n</code></pre></p> <p><code>AEGP_ProjectIsDirty</code></p> <p>Returns <code>TRUE</code> if the project has been modified since it was opened.</p> <p><pre><code>AEGP_ProjectIsDirty(\n  AEGP_ProjectH  projH,\n  A_Boolean      *is_dirtyPB);\n</code></pre></p> <p><code>AEGP_SaveProjectAs</code></p> <p>Saves the project to the specified path.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p>NOTE: This will overwrite an existing file.</p> <p><pre><code>AEGP_SaveProjectAs(\n  AEGP_ProjectH      projH,\n  const A_UTF16Char  *pathZ);\n</code></pre></p> <p><code>AEGP_NewProject</code></p> <p>Creates a new project. NOTE: Will close the current project without saving it first!</p> <p><pre><code>AEGP_NewProject(\n  AEGP_ProjectH  *new_projectPH);\n</code></pre></p> <p><code>AEGP_OpenProjectFromPath</code></p> <p>Opens a project from the supplied path, and returns its <code>AEGP_ProjectH</code>.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p>NOTE: Will close the current project without saving it first!</p> <p><pre><code>AEGP_OpenProjectFromPath(\n  const A_UTF16Char  *pathZ,\n  AEGP_ProjectH      *projectPH);\n</code></pre></p> <p><code>AEGP_GetProjectBitDepth</code></p> <p>Retrieves the project bit depth.</p> <p><pre><code>AEGP_GetProjectBitDepth(\n  AEGP_Projec        tH projectH,\n  AEGP_ProjBitDepth  *bit_depthP);\n</code></pre></p> <p>AEGP_ProjBitDepth will be one of the following:</p> <ul> <li><code>AEGP_ProjBitDepth_8</code></li> <li><code>AEGP_ProjBitDepth_16</code></li> <li><code>AEGP_ProjBitDepth_32</code></li> </ul> <p><code>AEGP_SetProjectBitDepth</code></p> <p>Sets the project bit depth. Undoable.</p> <p><pre><code>AEGP_SetProjectBitDepth(\n  AEGP_ProjectH      projectH,\n  AEGP_ProjBitDepth  bit_depth);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#aegp_timedisplay2","title":"AEGP_TimeDisplay2","text":"<p>Note</p> <p>Values in unused fields persist when After Effects is using a different display type.</p> <p>Member</p> <p>Descrpition</p> <p><code>AEGP_TimeDisplayType type;</code></p> <p>One of the following:</p> <ul> <li><code>AEGP_TimeDisplayType_TIMECODE</code></li> <li><code>AEGP_TimeDisplayType_FRAMES</code></li> <li><code>AEGP_TimeDisplayType_FEET_AND_FRAMES</code></li> </ul> <p><code>A_char timebaseC;</code></p> <p>0 - 100. Only used for <code>AEGP_TimeDisplayType_TIMECODE</code>.</p> <p><code>A_Boolean non_drop_30B;</code></p> <p>When the timebase is 30 and the item's framerate is 29.97, determines whether to display as non-drop frame.</p> <p><code>A_char frames_per_footC;</code></p> <p>Only used for <code>AEGP_TimeDisplayType_FEET_AND_FRAMES</code>.</p> <p><code>A_long starting_frameL;</code></p> <p>Usually 0 or 1. Not used when type is usually 0 or 1, not used for <code>AEGP_TimeDisplayType_TIMECODE</code>.</p> <p><code>A_Boolean auto_timecode_baseB;</code></p> <p>If <code>TRUE</code>, the project timecode display setting is set to auto.</p>"},{"location":"aegps/aegp-suites/#control-items-within-projects","title":"Control Items Within Projects","text":"<p>Accesses and modifies items within a project or composition.</p> <p>Anything in the project bin is an <code>AEGP_Item</code>. Note that cameras have no source, and thus have no <code>AEGP_ItemH</code>.</p> <p>Unless more specificity is required for the function(s) you're using, remain as abstract as possible; AEGP_Comps are passed into and returned from most functions as AEGP_Items.</p>"},{"location":"aegps/aegp-suites/#aegp_itemsuite9","title":"AEGP_ItemSuite9","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetFirstProjItem</code></p> <p>Retrieves the first item in a given project.</p> <p><pre><code>AEGP_GetFirstProjItem(\n  AEGP_ProjectH  projectH,\n  AEGP_ItemH     *itemPH);\n</code></pre></p> <p><code>AEGP_GetNextProjItem</code></p> <p>Retrieves the next project item; <code>*next_itemPH</code> will be <code>NULL</code> after the last item.</p> <p><pre><code>AEGP_GetNextProjItem(\n  AEGP_ProjectH  projectH,\n  AEGP_ItemH     itemH,\n  AEGP_ItemH     *next_itemPH);\n</code></pre></p> <p><code>AEGP_GetActiveItem</code></p> <p>If the Project window is active, the active item is the selected item (if only one item is selected).</p> <p>If a Composition, Timeline, or Footage window is active, returns the parent of the layer associated with the front-most tab in the window.</p> <p>Returns NULL if no item is active.</p> <p><pre><code>AEGP_GetActiveItem(\n  AEGP_ItemH  *itemPH,\n</code></pre></p> <p><code>AEGP_IsItemSelected</code></p> <p>Returns true if the Project window is active and the item is selected.</p> <p><pre><code>AEGP_IsItemSelected(\n  AEGP_ItemH  itemH,\n  A_Boolean   *selectedPB)\n</code></pre></p> <p><code>AEGP_SelectItem</code></p> <p>Toggles the selection state of the item, and (depending on <code>deselect_othersB</code>) can deselect other items. This call selects items in the Project panel.</p> <p>To make selections in the Composition panel, use <code>AEGP_SetSelection</code> from AEGP_CompSuite11.</p> <p><pre><code>AEGP_SelectItem(\n  AEGP_ItemH  itemH,\n  A_Boolean   selectB,\n  A_Boolean   deselect_othersB);\n</code></pre></p> <p><code>AEGP_GetItemType</code></p> <p>Gets type of an item. Note: solids don't appear in the project, but can be the source to a layer.</p> <p><pre><code>AEGP_GetItemType(\n  AEGP_ItemH     itemH,\n  AEGP_ItemType  *item_typeP);\n</code></pre></p> <p>Items are one of the following types:</p> <ul> <li><code>AEGP_ItemType_NONE</code></li> <li><code>AEGP_ItemType_FOLDER</code></li> <li><code>AEGP_ItemType_COMP</code></li> <li><code>AEGP_ItemType_SOLID</code></li> <li><code>AEGP_ItemType_FOOTAGE</code></li> </ul> <p><code>AEGP_GetTypeName</code></p> <p>Get name of type. (name length up to <code>AEGP_MAX_TYPE_NAME_LEN + 1</code>).</p> <p><pre><code>AEGP_GetTypeName(\n  AEGP_ItemType  item_type,\n  A_char         *nameZ);\n</code></pre></p> <p><code>AEGP_GetItemName</code></p> <p>Get item name. (name length has no limit).</p> <p><code>unicode_namePH</code> points to <code>A_UTF16Char</code> (contains null terminated UTF16 string).</p> <p>It must be disposed with <code>AEGP_FreeMemHandle</code> .</p> <p><pre><code>AEGP_GetItemName(\n  AEGP_PluginID  pluginID,\n  AEGP_ItemH     itemH,\n  AEGP_MemHandle *unicode_namePH);\n</code></pre></p> <p><code>AEGP_SetItemName</code></p> <p>Specifies the name of the AEGP_ItemH. (name length has no limit). Undoable.</p> <p><pre><code>AEGP_SetItemName(\n  AEGP_ItemH         itemH,\n  const A_UTF16Char  *nameZ);\n</code></pre></p> <p><code>AEGP_GetItemID</code></p> <p>Returns the item's unique ID, which persists across saves and loads of the project.</p> <p><pre><code>AEGP_GetItemID(\n  AEGP_ItemH  itemH,\n  A_long      *item_idPL);\n</code></pre></p> <p><code>AEGP_GetItemFlags</code></p> <p>Get properties of an item.</p> <p><pre><code>AEGP_GetItemFlags(\n  AEGP_ItemH      itemH,\n  AEGP_ItemFlags  *item_flagsP);\n</code></pre></p> <p>Flag values (may be OR'd together):</p> <ul> <li><code>AEGP_ItemFlag_MISSING</code></li> <li><code>AEGP_ItemFlag_HAS_PROXY</code></li> <li><code>AEGP_ItemFlag_USING_PROXY</code></li> <li><code>AEGP_ItemFlag_MISSING_PROXY</code></li> <li><code>AEGP_ItemFlag_HAS_VIDEO</code></li> <li><code>AEGP_ItemFlag_HAS_AUDIO</code></li> <li><code>AEGP_ItemFlag_STILL</code></li> <li><code>AEGP_ItemFlag_HAS_ACTIVE_AUDIO</code></li> </ul> <p>Unlike the <code>HAS_AUDIO</code> flag, this bit flag will set only if the comp has at least one layer where audio is actually on.</p> <p><code>AEGP_SetItemUseProxy</code></p> <p>Toggle item's proxy usage. Undoable.</p> <p><pre><code>AEGP_SetItemUseProxy(\n  AEGP_ItemH  itemH,\n  A_Boolean   use_proxyB);\n</code></pre></p> <p><code>AEGP_GetItemParentFolder</code></p> <p>Get folder containing item.</p> <p><pre><code>AEGP_GetItemParentFolder(\n  AEGP_ItemH  itemH,\n  AEGP_ItemH  *parent_itemPH);\n</code></pre></p> <p><code>AEGP_SetItemParentFolder</code></p> <p>Sets an item's parent folder. Undoable.</p> <p><pre><code>AEGP_SetItemParentFolder(\n  AEGP_ItemH  itemH,\n  AEGP_ItemH  parent_folderH);\n</code></pre></p> <p><code>AEGP_GetItemDuration</code></p> <p>Get duration of item, in seconds.</p> <p><pre><code>AEGP_GetItemDuration(\n  AEGP_ItemH  itemH,\n  A_Time      *durationPT);\n</code></pre></p> <p><code>AEGP_GetItemCurrentTime</code></p> <p>Get current time within item. Not updated while rendering.</p> <p><pre><code>AEGP_GetItemCurrentTime(\n  AEGP_ItemH  itemH,\n  A_long      *curr_timePT);\n</code></pre></p> <p><code>AEGP_GetItemDimensions</code></p> <p>Get width and height of item.</p> <p><pre><code>AEGP_GetItemDimensions(\n  AEGP_ItemH  itemH,\n  A_long      *widthPL)\n  A_long      *heightPL);\n</code></pre></p> <p><code>AEGP_GetItemPixelAspectRatio</code></p> <p>Get the width of a pixel, assuming its height is 1.0, as numerator over denominator.</p> <p><pre><code>AEGP_GetItemPixelAspectRatio(\n  AEGP_ItemH  itemH,\n  A_Ratio     *ratioPRt);\n</code></pre></p> <p><code>AEGP_DeleteItem</code></p> <p>Removes item from all compositions. Undo-able.</p> <p>Do not use the <code>AEGP_ItemH</code> after calling this function.</p> <p><pre><code>AEGP_DeleteItem(\n  AEGP_ItemH  itemH);\n</code></pre></p> <p><code>AEGP_GetItemSolidColor</code></p> <p>Removed in <code>AEGP_ItemSuite4</code>. See <code>AEGP_GetSolidFootageColor</code> from AEGP_FootageSuite5</p> <p>Given a solid item, return its color.</p> <p><pre><code>AEGP_GetItemSolidColor(\n  AEGP_ItemH  itemH,\n  PF_Pixel    *PF_Pixel);\n</code></pre></p> <p><code>AEGP_SetSolidColor</code></p> <p>Removed in <code>AEGP_ItemSuite4</code>. See <code>AEGP_SetSolidFootageColor</code> from AEGP_FootageSuite5.</p> <p>Sets the color of an existing solid (error if <code>itemH</code> is not a solid).</p> <p><pre><code>AEGP_SetSolidColor(\n  AEGP_ItemH     itemH,\n  AEGP_ColorVal  color);\n</code></pre></p> <p><code>AEGP_SetSolidDimensions</code></p> <p>Removed in <code>AEGP_ItemSuite4</code>. See <code>AEGP_SetSolidFootageDimensions</code> from AEGP_FootageSuite5.</p> <p>Sets the dimensions of an existing solid (error if <code>itemH</code> is not a solid).</p> <p><pre><code>AEGP_SetSolidDimensions(\n  AEGP_ItemH  itemH,\n  A_short     widthS,\n  A_short     heightS);\n</code></pre></p> <p><code>AEGP_CreateNewFolder</code></p> <p>Creates a new folder in the project. The newly created folder is allocated and owned by After Effects.</p> <p>Passing <code>NULL</code> for <code>parent_folderH0</code> creates the folder at the project's root.</p> <p><pre><code>AEGP_CreateNewFolder(\n  const A_UTF16Char  *nameZ,\n  AEGP_ProjectH      projH),\n  AEGP_ItemH         parentH0),\n  AEGP_ItemH         *new_folderPH);\n</code></pre></p> <p><code>AEGP_SetItemCurrentTime</code></p> <p>Sets the current time within a given <code>itemH</code>.</p> <p><pre><code>AEGP_SetItemCurrentTime(\n  AEGP_ItemH    itemH,\n  const A_Time  *new_timePT);\n</code></pre></p> <p><code>AEGP_GetItemCommentLength</code></p> <p>Removed in <code>ItemSuite9</code>. Retrieves the length (in characters) of the <code>itemH's</code> comment.</p> <p><pre><code>AEGP_GetItemCommentLength(\n  AEGP_ItemH  itemH,\n  A_u_long    *buf_sizePLu);\n</code></pre></p> <p><code>AEGP_GetItemComment</code></p> <p>Updated to support Unicode in <code>ItemSuite9</code>, available in 14.1. Retrieves the <code>itemH's</code> comment.</p> <p><pre><code>AEGP_GetItemComment(\n  AEGP_ItemH      itemH,\n  AEGP_MemHandle  *unicode_namePH);\n</code></pre></p> <p><code>AEGP_SetItemComment</code></p> <p>Updated to support Unicode in <code>ItemSuite9</code>, available in 14.1. Sets the <code>itemH's</code> comment.</p> <p><pre><code>AEGP_SetItemComment(\n  AEGP_ItemH         itemH,\n  const A_UTF16Char  *commentZ);\n</code></pre></p> <p><code>AEGP_GetItemLabel</code></p> <p>Retrieves an item's label.</p> <p><pre><code>AEGP_GetItemLabel(\n  AEGP_ItemH    itemH,\n  AEGP_LabelID  *labelP);\n</code></pre></p> <p><code>AEGP_SetItemLabel</code></p> <p>Sets an item's label.</p> <p><pre><code>AEGP_SetItemLabel(\n  AEGP_ItemH    itemH,\n  AEGP_LabelID  label);\n</code></pre></p> <p><code>AEGP_GetItemMRUView</code></p> <p>Gets an item's most recently used view. The view can be used with two calls in the <code>AEGP_ColorSettingsSuite</code>, to perform a color transform on a pixel buffer from working to view color space.</p> <p><pre><code>AEGP_GetItemMRUView(\n  AEGP_ItemH      itemH,\n  AEGP_ItemViewP  *mru_viewP);\n</code></pre></p> <p>Note</p> <p><code>AEGP_RenderNewItemSoundData()</code> used to be here, but is now part of AEGP_RenderSuite4.</p>"},{"location":"aegps/aegp-suites/#managing-selections","title":"Managing Selections","text":"<p>This suite manages selection states, mirroring the functionality supplied by vectors in the C++ Standard Template Library.</p> <p>Many types of items may be simultaneously selected in After Effects; <code>AEGP_CollectionItems</code> are unions of layer, mask, effect, stream, mask vertex, and keyframe items.</p> <p>First acquire the current collection, then iterate across its members to ensure that whatever your AEGP does is applicable to each.</p> <p>We've added <code>AEGP_Collection2H</code> and <code>AEGP_CollectionItemV2</code> so that selected dynamic streams can be handled with the <code>AEGP_CollectionSuite</code>.</p>"},{"location":"aegps/aegp-suites/#aegp_collectionsuite2","title":"AEGP_CollectionSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NewCollection</code></p> <p>Creates and returns a new, empty collection.</p> <p>To obtain the current composition's selection as a collection, use <code>AEGP_GetNewCollectionFromCompSelection</code>.</p> <p><pre><code>AEGP_NewCollection(\n  AEGP_PluginID      plugin_id,\n  AEGP_Collection2H  *collectionPH);\n</code></pre></p> <p><code>AEGP_DisposeCollection</code></p> <p>Disposes of a collection.</p> <p><pre><code>AEGP_DisposeCollection(\n  AEGP_Collection2H  collectionH);\n</code></pre></p> <p><code>AEGP_GetCollectionNumItems</code></p> <p>Returns the number of items contained in the given collection.</p> <p><pre><code>AEGP_GetCollectionNumItems(\n  AEGP_Collection2H  collectionH,\n  A_u_long           *num_itemsPL);\n</code></pre></p> <p><code>AEGP_GetCollectionItemByIndex</code></p> <p>Retrieves (creates and populates) the index'd collection item.</p> <p><pre><code>AEGP_GetCollectionItemByIndex(\n  AEGP_Collection2H      collectionH,\n  A_u_long               indexL,\n  AEGP_CollectionItemV2  *itemP);\n</code></pre></p> <p><code>AEGP_CollectionPushBack</code></p> <p>Adds an item to the given collection.</p> <p><pre><code>AEGP_CollectionPushBack(\n  AEGP_Collection2H            collectionH,\n  const AEGP_CollectionItemV2  *itemP);\n</code></pre></p> <p><code>AEGP_CollectionErase</code></p> <p>Removes an index'd item (or items) from a given collection. NOTE: this range is exclusive, like STL iterators. To erase the first item, you would pass 0 and 1, respectively.</p> <p><pre><code>AEGP_CollectionErase(\n  AEGP_Collection2H  collectionH,\n  A_u_long           index_firstL,\n  A_u_long           index_lastL);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#ownership-of-collection-items","title":"Ownership Of Collection Items","text":"<p>When <code>AEGP_StreamRefHs</code> are inserted into a collection, they are adopted by the collection; do not free them.</p> <p><code>AEGP_EffectRefHs</code>, on the other hand, are not adopted, and must be freed by the calling AEGP.</p>"},{"location":"aegps/aegp-suites/#manipulate-compositions","title":"Manipulate Compositions","text":"<p>Provide information about the compositions in a project, and create cameras, lights, and solids.</p>"},{"location":"aegps/aegp-suites/#aegp_compsuite11","title":"AEGP_CompSuite11","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetCompFromItem</code></p> <p>Retrieves the handle to the composition, given an item handle.</p> <p>Returns <code>NULL</code> if <code>itemH</code> is not an <code>AEGP_CompH</code>.</p> <p><pre><code>AEGP_GetCompFromItem(\n  AEGP_ItemH  itemH,\n  AEGP_CompH  *compPH);\n</code></pre></p> <p><code>AEGP_GetItemFromComp</code></p> <p>Used to get the item handle, given a composition handle.</p> <p><pre><code>AEGP_GetItemFromComp(\n  AEGP_CompH  compH,\n  AEGP_ItemH  *itemPH);\n</code></pre></p> <p><code>AEGP_GetCompDownsampleFactor</code></p> <p>Returns current downsample factor. Measured in pixels X by Y.</p> <p>Users can choose a custom downsample factor with independent X and Y.</p> <p><pre><code>AEGP_GetCompDownsampleFactor(\n  AEGP_CompH             compH,\n  AEGP_DownsampleFactor  *dsfP);\n</code></pre></p> <p><code>AEGP_SetCompDownsampleFactor</code></p> <p>Sets the composition's downsample factor.</p> <p><pre><code>AEGP_SetCompDownsampleFactor(\n  AEGP_CompH             compH,\n  AEGP_DownsampleFactor  *dsfP);\n</code></pre></p> <p><code>AEGP_GetCompBGColor</code></p> <p>Returns the composition background color.</p> <p><pre><code>AEGP_GetCompBGColor(\n  AEGP_CompH     compH,\n  AEGP_ColorVal  *bg_colorP);\n</code></pre></p> <p><code>AEGP_SetCompBGColor</code></p> <p>Sets a composition's background color.</p> <p><pre><code>AEGP_SetCompBGColor(\n  AEGP_CompH           compH,\n  const AEGP_ColorVal  *bg_colorP);\n</code></pre></p> <p><code>AEGP_GetCompFlags</code></p> <p>Returns composition flags, or'd together.</p> <p><pre><code>AEGP_GetCompFlags(\n  AEGP_CompH      compH,\n  AEGP_CompFlags  *AEGP_CompFlags);\n</code></pre></p> <ul> <li><code>AEGP_CompFlag_SHOW_ALL_SHY</code></li> <li><code>AEGP_CompFlag_ENABLE_MOTION_BLUR</code></li> <li><code>AEGP_CompFlag_ENABLE_TIME_FILTER</code></li> <li><code>AEGP_CompFlag_GRID_TO_FRAME</code></li> <li><code>AEGP_CompFlag_GRID_TO_FIELDS</code></li> <li><code>AEGP_CompFlag_USE_LOCAL_DSF</code></li> <li><code>AEGP_CompFlag_DRAFT_3D</code></li> <li><code>AEGP_CompFlag_SHOW_GRAPH</code></li> </ul> <p><code>AEGP_GetShowLayerNameOrSourceName</code></p> <p>New in CC. Passes back true if the Comp's timeline shows layer names, false if source names. This will open the comp as a side effect.</p> <p><pre><code>AEGP_GetShowLayerNameOrSourceName(\n  AEGP_CompH  compH,\n  A_Boolean   *layer_names_shownPB);\n</code></pre></p> <p><code>AEGP_SetShowLayerNameOrSourceName</code></p> <p>New in CC. Pass in true to have the Comp's timeline show layer names, false for source names. This will open the comp as a side effect.</p> <p><pre><code>AEGP_SetShowLayerNameOrSourceName(\n  AEGP_CompH  compH,\n  A_Boolean   *layer_names_shownPB);\n</code></pre></p> <p><code>AEGP_GetShowBlendModes</code></p> <p>New in CC. Passes back true if the Comp's timeline shows blend modes column, false if hidden. This will open the comp as a side effect.</p> <p><pre><code>AEGP_GetShowBlendModes(\n  AEGP_CompH  compH,\n  A_Boolean   *blend_modes_shownPB);\n</code></pre></p> <p><code>AEGP_SetShowBlendModes</code></p> <p>New in CC. Pass in true to have the Comp's timeline show the blend modes column, false to hide it. This will open the comp as a side effect.</p> <p><pre><code>AEGP_GetCompFlags(\n  AEGP_CompH  compH,\n  A_Boolean   show_blend_modesB);\n</code></pre></p> <p><code>AEGP_GetCompFramerate</code></p> <p>Returns the composition's frames per second.</p> <p><pre><code>AEGP_GetCompFramerate(\n  AEGP_CompH  compH,\n  A_FpLong    *fpsPF);\n</code></pre></p> <p><code>AEGP_SetCompFramerate</code></p> <p>Sets the composition's frames per second.</p> <p><pre><code>AEGP_SetCompFramerate(\n  AEGP_CompH  compH,\n  A_FpLong    *fpsPF);\n</code></pre></p> <p><code>AEGP_GetCompShutterAnglePhase</code></p> <p>The composition shutter angle and phase.</p> <p><pre><code>AEGP_GetCompShutterAnglePhase(\n  AEGP_CompH  compH,\n  A_Ratio     *angle,\n  A_Ratio     *phase);\n</code></pre></p> <p><code>AEGP_GetCompShutterFrameRange</code></p> <p>The duration of the shutter frame, in seconds.</p> <p><pre><code>AEGP_GetCompShutterFrameRange(\n  AEGP_CompH    compH,\n  const A_Time  *comp_timeP);\n</code></pre></p> <p><code>AEGP_GetCompSuggestedMotionBlurSamples</code></p> <p>Retrieves the number of motion blur samples After Effects will perform in the given composition.</p> <p><pre><code>AEGP_GetCompSuggestedMotionBlurSamples(\n  AEGP_CompH  compH,\n  A_long      *samplesPL)\n</code></pre></p> <p><code>AEGP_SetCompSuggestedMotionBlurSamples</code></p> <p>Specifies the number of motion blur samples After Effects will perform in the given composition. Undoable.</p> <p><pre><code>AEGP_SetCompSuggestedMotionBlurSamples(\n  AEGP_CompH  compH,\n  A_long      samplesL);\n</code></pre></p> <p><code>AEGP_GetCompMotionBlurAdaptiveSampleLimit</code></p> <p>New in CC. Retrieves the motion blur adaptive sample limit for the given composition.</p> <p>As of CC, a new comp defaults to <code>128</code>.</p> <p><pre><code>AEGP_GetCompMotionBlurAdaptiveSampleLimit(\n  AEGP_CompH  compH,\n  A_long      *samplesPL)\n</code></pre></p> <p><code>AEGP_SetCompMotionBlurAdaptiveSampleLimit</code></p> <p>New in CC. Specifies the motion blur adaptive sample limit for the given composition.</p> <p>As of CC, both the limit and the suggested values are clamped to [2,256] range and the limit value will not be allowed less than the suggested value.</p> <p>Undoable.</p> <p><pre><code>AEGP_SetCompMotionBlurAdaptiveSampleLimit(\n  AEGP_CompH  compH,\n  A_long      samplesL);\n</code></pre></p> <p><code>AEGP_GetCompWorkAreaStart</code></p> <p>Get the time where the current work area starts.</p> <p><pre><code>AEGP_GetCompWorkAreaStart(\n  AEGP_CompH  compH,\n  A_Time      *startPT);\n</code></pre></p> <p><code>AEGP_GetCompWorkAreaDuration</code></p> <p>Get the duration of a composition's current work area, in seconds.</p> <p><pre><code>AEGP_GetCompWorkAreaDuration(\n  AEGP_CompH  compH,\n  A_Time      *durationPT);\n</code></pre></p> <p><code>AEGP_SetCompWorkAreaStartAndDuration</code></p> <p>Set the work area start and duration, in seconds. Undo-able.</p> <p>One call to this function is sufficient to set the layer's in point and duration; it's not necessary to call it twice, once for each timespace.</p> <p><pre><code>AEGP_SetCompWorkAreaStartAndDuration(\n  AEGP_CompH    compH,\n  const A_Time  *startPT)\n  const A_Time  *durationPT);\n</code></pre></p> <p><code>AEGP_CreateSolidInComp</code></p> <p>Creates a new solid with a specified width, height, color, and duration in the composition. Undo-able.</p> <p>If you pass <code>NULL</code> for the duration, After Effects uses its preference for the duration of a new still. If you pass <code>NULL</code>, or an invalid time scale, duration is set to the length of the composition.</p> <p><pre><code>AEGP_CreateSolidInComp(\n  const A_UTF16Char  *utf_nameZ,\n  A_Long             widthL,\n  A_Long             heightL,\n  const PF_Pixel     *color,\n  AEGP_CompH         parent_compH,\n  const A_Time       *durationPT0,\n  AEGP_LayerH        *new_solidPH);\n</code></pre></p> <p><code>AEGP_CreateCameraInComp</code></p> <p>Creates and adds a camera to the specified composition. Once created, you can manipulate the camera's parameter streams using the AEGP Stream Suite.</p> <p>To specify a two-node camera, use <code>AEGP_SetLayerFlag</code> from AEGP_LayerSuite9 to set <code>AEGP_LayerFlag_LOOK_AT_POI</code>.</p> <p><pre><code>AEGP_CreateCameraInComp(\n  const A_UTF16Char  *utf_nameZ,\n  A_FloatPoint       center_point,\n  AEGP_CompH         parent_compH,\n  AEGP_LayerH        *new_cameraPH);\n</code></pre></p> <p><code>AEGP_CreateLightInComp</code></p> <p>Creates and adds a light to the specified composition. Once created, you can manipulate the light's parameter streams using the AEGP Stream Suite.</p> <p><pre><code>AEGP_CreateLightInComp(\n  const A_UTF16Char  *utf_nameZ,\n  A_FloatPoint       center_point,\n  AEGP_CompH         parent_compH,\n  AEGP_LayerH        *new_lightPH);\n</code></pre></p> <p><code>AEGP_CreateComp</code></p> <p>Creates a new composition for the project. If you don't provide a parent folder, the composition will be at the root level of the project. Undo-able.</p> <p><pre><code>AEGP_CreateComp(\n  AEGP_ItemH         parent_folderHO,\n  const A_UTF16Char  *utf_nameZ,\n  A_Long             widthL,\n  A_Long             heightL,\n  const A_Ratio      *pixel_aspect_ratioPRt,\n  const A_Time       *durationPT,\n  const A_Ratio      *frameratePRt,\n  AEGP_CompH         *new_compPH);\n</code></pre></p> <p><code>AEGP_GetNewCollectionFromCompSelection</code></p> <p>Creates a new AEGP_Collection2H from the items selected in the given composition.</p> <p>The plug-in is responsible for disposing of the <code>AEGP_Collection2H</code>.</p> <p><pre><code>AEGP_GetNewCollectionFromCompSelection(\n  AEGP_PluginID      plugin_id,\n  AEGP_CompH         compH,\n  AEGP_Collection2H  *collectionPH);\n</code></pre></p> <p><code>AEGP_SetSelection</code></p> <p>Sets the selection within the given composition to the given <code>AEGP_Collection2H</code>.</p> <p>Will return an error if members of the <code>AEGP_Collection2H</code> are not available. Don't assume that a composition hasn't changed between operations; always use a fresh <code>AEGP_Collection2H</code>.</p> <p><pre><code>AEGP_SetSelection(\n  AEGP_CompH         compH,\n  AEGP_Collection2H  collectionH);\n</code></pre></p> <p><code>AEGP_GetCompDisplayStartTime</code></p> <p>Gets the displayed start time of a composition.</p> <p><pre><code>AEGP_GetCompDisplayStartTime(\n  AEGP_CompH    compH,\n  const A_Time  *start_timePT);\n</code></pre></p> <p><code>AEGP_SetCompDisplayStartTime</code></p> <p>Not undo-able. Sets the displayed start time of a composition (has no effect on the duration of the composition).</p> <p><pre><code>AEGP_SetCompDisplayStartTime(\n  AEGP_CompH    compH,\n  const A_Time  *start_timePT);\n</code></pre></p> <p><code>AEGP_SetCompDuration</code></p> <p>Undoable. Sets the duration of the given composition.</p> <p><pre><code>AEGP_SetCompDuration(\n  AEGP_CompH    compH,\n  const A_Time  *durationPT);\n</code></pre></p> <p><code>AEGP_CreateNullInComp</code></p> <p>Creates a \"null object\" in the composition (useful for translating projects from 3D applications into After Effects).</p> <p>If you pass <code>NULL</code> for the duration, After Effects uses its preference for the duration of a new still. If you pass 0, or an invalid time scale, duration is set to the length of the composition.</p> <p><pre><code>AEGP_CreateNullInComp(\n  const A_UTF16Char  *utf_nameZ,\n  AEGP_CompH         parent_compH,\n  const A_Time       *durationPT0,\n  AEGP_LayerH        *new_null_solidPH);\n</code></pre></p> <p><code>AEGP_SetCompPixelAspectRatio</code></p> <p>Sets the pixel aspect ratio of a composition.</p> <p><pre><code>AEGP_SetCompPixelAspectRatio(\n  AEGP_CompH     compH,\n  const A_Ratio  *parPRt);\n</code></pre></p> <p><code>AEGP_CreateTextLayerInComp</code></p> <p>Updated in CS6. Creates a text layer in the composition, and returns its <code>AEGP_LayerH</code>.</p> <p><pre><code>AEGP_CreateTextLayerInComp(\n  AEGP_CompH   parent_compH,\n  A_Boolean    select_new_layerB,\n  AEGP_LayerH  *new_text_lyrPH);\n</code></pre></p> <p><code>AEGP_CreateBoxTextLayerInComp</code></p> <p>Updated in CS6. Creates a new box text layer, and returns its <code>AEGP_LayerH</code>.</p> <p><pre><code>AEGP_CreateBoxTextLayerInComp(\n  AEGP_CompH    parent_compH,\n  A_Boolean     select_new_layerB,\n  A_FloatPoint  box_dimensions,\n  AEGP_LayerH   *new_text_layerPH);\n</code></pre></p> <p><code>AEGP_SetCompDimensions</code></p> <p>Sets the dimensions of the composition. Undoable.</p> <p><pre><code>AEGP_SetCompDimensions(\n  AEGP_CompH  compH,\n  A_long      widthL,\n  A_long      heightL);\n</code></pre></p> <p><code>AEGP_DuplicateComp</code></p> <p>Duplicates the composition. Undoable.</p> <p><pre><code>AEGP_DuplicateComp(\n  AEGP_CompH  compH,\n  AEGP_CompH  *new_compPH);\n</code></pre></p> <p><code>AEGP_GetCompFrameDuration</code></p> <p>Retrieves the duration of a frame in a composition.</p> <p><pre><code>AEGP_GetCompFrameDuration(\n  AEGP_CompH  compH,\n  A_Time      *timeP);\n</code></pre></p> <p><code>AEGP_GetMostRecentlyUsedComp</code></p> <p>Returns the most-recently-used composition.</p> <p><pre><code>AEGP_GetMostRecentlyUsedComp(\n  AEGP_CompH  *compPH);\n</code></pre></p> <p><code>AEGP_CreateVectorLayerInComp</code></p> <p>Creates and returns a handle to a new vector layer.</p> <p><pre><code>AEGP_CreateVectorLayerInComp(\n  AEGP_CompH   parent_compH,\n  AEGP_LayerH  *new_vec_layerPH);\n</code></pre></p> <p><code>AEGP_GetNewCompMarkerStream</code></p> <p>Returns an AEGP_StreamRefH to the composition's marker stream. Must be disposed by caller.</p> <p><pre><code>AEGP_GetNewCompMarkerStream(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_CompH       parent_compH,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p><code>AEGP_GetCompDisplayDropFrame</code></p> <p>Passes back a boolean that indicates whether the specified comp uses drop-frame timecode or not.</p> <p><pre><code>AEGP_GetCompDisplayDropFrame(\n  AEGP_CompH  compH,\n  A_Boolean   *dropFramePB);\n</code></pre></p> <p><code>AEGP_SetCompDisplayDropFrame</code></p> <p>Sets the dropness of the timecode in the specified composition.</p> <p><pre><code>AEGP_SetCompDisplayDropFrame(\n  AEGP_CompH  compH,\n  A_Boolean   dropFrameB);\n</code></pre></p> <p><code>AEGP_ReorderCompSelection</code></p> <p>Move the selection to a certain layer index. Use along with <code>AEGP_SetSelection().</code></p> <p><pre><code>AEGP_SetCompDisplayDropFrame(\n  AEGP_CompH  compH,\n  A_long      index);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#work-with-footage","title":"Work with Footage","text":"<p>Provides information about footage, or items in a project or composition. When getting and setting footage's interpretation, it is possible to specify incompatible options.</p> <p>If you encounter warnings and errors during development, be sure to make all related changes atomically, and reassess the logic of the operation you're performing.</p> <p>For example, changing the pull-down interpretation of footage won't work unless there's a difference between it's native and conformed frame rate.</p> <p>Depending on what you're trying to accomplish, it may make sense to abort all of your operations at that point, inform the user of the problem encountered.</p>"},{"location":"aegps/aegp-suites/#aegp_footagesuite5","title":"AEGP_FootageSuite5","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetMainFootageFromItem</code></p> <p>Returns an error if item isn't a footage item. Used to convert an item handle to a footage handle.</p> <p><pre><code>AEGP_GetMainFootageFromItem(\n  AEGP_ItemH     itemH,\n  AEGP_FootageH  *footagePH);\n</code></pre></p> <p><code>AEGP_GetProxyFootageFromItem</code></p> <p>Returns an error if item has no proxy. Returns the proxy footage handle.</p> <p>Note: a composition can have a proxy.</p> <p><pre><code>AEGP_GetProxyFootageFromItem(\n  AEGP_ItemH     itemH,\n  AEGP_FootageH  *proxy_ftgPH);\n</code></pre></p> <p><code>AEGP_GetFootageNumFiles</code></p> <p>Returns the number of data (RGBA or audio) files, and the number of files per frame (may be greater than one if the footage has auxiliary channels).</p> <p><pre><code>AEGP_GetFootageNumFiles(\n  AEGP_FootageH  footageH,\n  A_long         *num_filesPL0,\n  A_long         *files_per_frmPL0);\n</code></pre></p> <p><code>AEGP_GetFootagePath</code></p> <p>Get fully realized path to footage source file. Retrieves the footage path for a piece of footage (or for the specified frame of a footage sequence).</p> <p><code>frame_numL</code> ranges from <code>0 to num_main_files</code>, as obtained using <code>AEGP_GetFootageNumFiles</code> from AEGP_FootageSuite5.</p> <p><code>AEGP_FOOTAGE_MAIN_FILE_INDEX</code> is the main file.</p> <p>The path is a handle to a NULL-terminated <code>A_UTF16Char</code> string, and must be disposed with AEGP_FreeMemHandle.</p> <p><pre><code>AEGP_GetFootagePath(\n  AEGP_FootageH   footageH,\n  A_long          frame_numL,\n  A_long          file_indexL,\n  AEGP_MemHandle  *unicode_pathPH);\n</code></pre></p> <p><code>AEGP_GetFootageSignature</code></p> <p>Retrieves the footage signature of specified footage.</p> <p><pre><code>AEGP_GetFootageSignature(\n  AEGP_FootageH          footageH,\n  AEGP_FootageSignature  *sigP);\n</code></pre></p> <p>The signature will be one of the following:</p> <ul> <li><code>AEGP_FootageSignature_NONE</code></li> <li><code>AEGP_FootageSignature_MISSING</code></li> <li><code>AEGP_FootageSignature_SOLID</code></li> </ul> <p><code>AEGP_NewFootage</code></p> <p>Creates a new footage item. The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p>Note that footage filenames with colons are not allowed, since colons are used as path separators in the HFS+ file system.</p> <p><pre><code>AEGP_NewFootage(\n  AEGP_PluginID                         aegp_plugin_id,\n  const A_UTF16Char                     *pathZ,\n  const AEGP_FootageLayerKey            *layer_infoP0,\n  const AEGP_FileSequenceImportOptions  *sequence_optionsP0,\n  AEGP_InterpretationStyle              interp_style,\n  void                                  *reserved,\n  AEGP_FootageH                         *footagePH);\n</code></pre></p> <p>Note the optional params. If <code>allow_interpretation_dialogB</code> is FALSE, After Effects will guess the alpha interpretation.</p> <p><pre><code>typedef struct {\n  A_long               layer_idL;\n  A_long               layer_indexL\n  char                 *nameAC;\n  AEGP_LayerDrawStyle  draw_style;\n} AEGP_FootageLayerKey;\n</code></pre></p> <p><code>AEGP_LayerDrawStyle</code> can be:</p> <ul> <li><code>AEGP_LayerDrawStyle_LAYER_BOUNDS</code></li> <li><code>AEGP_LayerDrawStyle_DOCUMENT_BOUNDS</code></li> </ul> <p><code>AEGP_InterpretationStyle</code> can be:</p> <ul> <li><code>AEGP_InterpretationStyle_NO_DIALOG_GUESS</code> Will guess alpha interpretation even if file contains unknown alpha interpretation and user pref says to ask user.</li> <li><code>AEGP_InterpretationStyle_DIALOG_OK</code> Optionally can show a dialog.</li> <li><code>AEGP_InterpretationStyle_NO_DIALOG_NO_GUESS</code> Used for replace footage implementation.</li> </ul> <p><code>AEGP_AddFootageToProject</code></p> <p>Adds a footage item to a project. Footage will be adopted by the project, and may be added only once.</p> <p>This is Undo-able; do not dispose of the returned added item if it's undone.</p> <p><pre><code>AEGP_AddFootageToProject(\n  AEGP_FootageH  footageH,\n  AEGP_ItemH     folderH,\n  AEGP_ItemH     *add_itemPH0);\n</code></pre></p> <p><code>AEGP_SetItemProxyFootage</code></p> <p>Sets footage as the proxy for an item. Will be adopted by the project.</p> <p>This is Undo-able; do not dispose of the returned added item if it's undone.</p> <p><pre><code>AEGP_SetItemProxyFootage(\n  AEGP_FootageH  footageH,\n  AEGP_ItemH     itemH);\n</code></pre></p> <p><code>AEGP_ReplaceItemMainFootage</code></p> <p>Replaces footage for an item. The item will replace the main footage for this item.</p> <p>This is Undo-able; do not dispose of the returned added item if it's undone.</p> <p><pre><code>AEGP_ReplaceItemMainFootage(\n  AEGP_FootageH  footageH,\n  AEGP_ItemH     itemH);\n</code></pre></p> <p><code>AEGP_DisposeFootage</code></p> <p>Deletes a footage item. Do not dispose of footage you did not create, or that has been added to the project.</p> <p><pre><code>AEGP_DisposeFootage(\n  AEGP_FootageH  footageH);\n</code></pre></p> <p><code>AEGP_GetFootageInterpretation</code></p> <p>Populates an AEGP_FootageInterp describing the settings of the <code>AEGP_FootageH</code>.</p> <p>There is no way to create a valid <code>AEGP_FootageInterp</code> other than by using this function.</p> <p><pre><code>AEGP_GetFootageInterpretation(\n  const AEGP_ItemH    itemH,\n  A_Boolean           proxyB,\n  AEGP_FootageInterp  *interpP);\n</code></pre></p> <p>If proxyB is <code>TRUE</code>, the proxy footage's settings are retrieved.</p> <p><code>AEGP_SetFootageInterpretation</code></p> <p>Apply the settings in the <code>AEGP_FootageInterp</code> to the <code>AEGP_FootageH</code>. Undo-able.</p> <p><pre><code>AEGP_SetFootageInterpreta tion(\n  const AEGP_ItemH          itemH,\n  A_Boolean                 proxyB,\n  const AEGP_FootageInterp  *interpP);\n</code></pre></p> <p>If <code>proxyB</code> is <code>TRUE</code>, the proxy footage's settings are modified.</p> <p><code>AEGP_GetFootageLayerKey</code></p> <p>Populates an <code>AEGP_FootageLayerKey</code> describing the footage.</p> <p><pre><code>AEGP_GetFootageLayerKey(\n  AEGP_FootageH          footageH,\n  AEGP_FootageLayerKey*  layerKeyP);\n</code></pre></p> <p><code>AEGP_NewPlaceholderFootage</code></p> <p>Deprecated. Adds a new placeholder footage item to the project.</p> <p>Using this function for missing footage will cause the user to search for each individual missing file, regardless of whether or not they're all in the same directory.</p> <p>Undo-able.</p> <p><pre><code>AEGP_NewPlaceholderFootage(\n  AEGP_PluginID  plugin_id,\n  const A_char   *nameZ,\n  A_long         width,\n  A_long         height,\n  const A_Time   *durationPT,\n  AEGP_FootageH  *footagePH);\n</code></pre></p> <p><code>AEGP_NewPlaceholderFootageWithPath</code></p> <p>This is the hip new way to add references to footage that can't be found right this moment.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p>In CS6 and earlier, file_type was ignored and we previously recommendedsetting it to <code>AEIO_FileType_NONE</code>.</p> <p>Starting in CC, <code>AEIO_FileType_NONE</code> is now a warning condition.</p> <p>If you pass <code>AEIO_FileType_ANY</code>, then path MUST exist.</p> <p>If the path may not exist, pass <code>AEIO_FileType_DIR</code> for folder, or <code>AEIO_FileType_GENERIC</code> for a file.</p> <p><pre><code>AEGP_NewPlaceholderFootageWithPath(\n  AEGP_PluginID      plugin_id,\n  const A_UTF16Char  *pathZ,\n  AEGP_Platform      path_platform,\n  AEIO_FileType      file_type,\n  A_long             widthL,\n  A_long             heightL,\n  const A_Time       *durationPT,\n  AEGP_FootageH      *footagePH);\n</code></pre></p> <p><code>AEGP_NewSolidFootage</code></p> <p>This is the way to add a solid.</p> <p>Until the footage is added to the project, the caller owns the <code>AEGP_FootageH</code> (and must dispose of it if, and only if, it isn't added to the project).</p> <p><pre><code>AEGP_NewSolidFootage(\n  const A_char         *nameZ,\n  A_long               width,\n  A_long               height,\n  const AEGP_ColorVal  *colorP,\n  AEGP_FootageH        *footagePH);\n</code></pre></p> <p><code>AEGP_GetSolidFootageColor</code></p> <p>Returns the color of a given solid. Returns an error if the <code>AEGP_ItemH</code> is not a solid.</p> <p><pre><code>AEGP_GetSolidFootageColor(\n  AEGP_ItemH     itemH,\n  A_Boolean      proxyB,\n  AEGP_ColorVal  *colorP);\n</code></pre></p> <p>If <code>proxyB</code> is <code>TRUE</code>, the proxy solid's color is retrieved.</p> <p><code>AEGP_SetSolidFootageColor</code></p> <p>Sets the color of a solid. Undo-able.</p> <p><pre><code>AEGP_SetSolidFootageColor(\n  AEGP_ItemH     itemH,\n  A_Boolean      proxyB,\n  AEGP_ColorVal  *colorP);\n</code></pre></p> <p>If <code>proxyB</code> is <code>TRUE</code>, the proxy solid's color is set.</p> <p><code>AEGP_SetSolidFootageDimensions</code></p> <p>Sets the dimensions of a solid. Undo-able.</p> <p><pre><code>AEGP_SetSolidFootageDimensions(\n  AEGP_ItemH  itemH,\n  A_Boolean   proxyB,\n  A_long      widthL,\n  A_long      heightL);\n</code></pre></p> <p>If <code>proxyB</code> is <code>TRUE</code>, the proxy solid's dimensions are modified. Returns an error if the item isn't a solid.</p> <p><code>AEGP_GetFootageSoundDataFormat</code></p> <p>Retrieves information about the audio data in the footage item (by populating the <code>AEGP_SoundDataFormat</code> you passed in).</p> <p><pre><code>AEGP_GetFootageSoundDataFormat(\n  AEGP_FootageH         footageH,\n  AEGP_SoundDataFormat  *formatP);\n</code></pre></p> <p><code>AEGP_GetFootageSequenceImportOptions</code></p> <p>Populates and returns a <code>AEGP_FileSequenceImportOptions</code> describing the given <code>AEGP_FootageH</code>.</p> <p><pre><code>AEGP_GetFootageSequenceImportOptions(\n  AEGP_FootageH                   footageH,\n  AEGP_FileSequenceImportOptions  *optionsP);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#aegp_footageinterp-structure","title":"AEGP_FootageInterp Structure","text":"<p>Member</p> <p>Purpose</p> <p><code>AEGP_InterlaceLabel il;</code></p> <p>The interlace settings for the footage item.</p> <p><pre><code>A_u_long signature; // 'FIEL'\nA_short version;\nFIEL_Type type;\nFIEL_Order order;\nA_u_long reserved;\n</code></pre></p> <p><code>FIEL_Type</code> is one of the following:</p> <ul> <li><code>FIEL_Type_FRAME_RENDERED</code></li> <li><code>FIEL_Type_INTERLACED</code></li> <li><code>FIEL_Type_HALF_HEIGHT</code></li> <li><code>FIEL_Type_FIELD_DOUBLED</code> (60 full-sized field doubled frames per second.)</li> </ul> <p><code>FIEL_Order</code> is either:</p> <ul> <li><code>FIEL_Order_UPPER_FIRST</code></li> <li><code>FIEL_Order_LOWER_FIRST</code></li> </ul> <p><code>AEGP_AlphaLabel al;</code></p> <p><pre><code>AEGP_AlphaFlag flags;\nA_u_char redCu;\nA_u_char greenCu;\nA_u_char blueCu;\n</code></pre></p> <p><code>AEGP_AlphaFlags</code> is one or more of the following, OR'd together:</p> <ul> <li><code>AEGP_AlphaPremul</code></li> <li><code>AEGP_AlphaInverted</code> (indicates that higher values are transparent, instead of lower)</li> <li><code>AEGP_AlphaIgnore</code></li> </ul> <p>If <code>AEGP_AlphaPremul</code> is not set, straight alpha is assumed.</p> <p><code>AEGP_PulldownPhase pd;</code></p> <p>Indicates the phase for use in 3:2 pulldown. One of the following:</p> <ul> <li><code>AEGP_PulldownPhase_NO_PULLDOWN</code></li> <li><code>AEGP_PulldownPhase_WSSWW</code></li> <li><code>AEGP_PulldownPhase_SSWWW</code></li> <li><code>AEGP_PulldownPhase_SWWWS</code></li> <li><code>AEGP_PulldownPhase_WWWSS</code></li> <li><code>AEGP_PulldownPhase_WWSSW</code></li> <li><code>AEGP_PulldownPhase_WWWSW</code></li> <li><code>AEGP_PulldownPhase_WWSWW</code></li> <li><code>AEGP_PulldownPhase_WSWWW</code></li> <li><code>AEGP_PulldownPhase_SWWWW</code></li> <li><code>AEGP_PulldownPhase_WWWWS</code></li> </ul> <p><code>AEGP_LoopBehavior loop;</code></p> <p>Indicates the number of times the footage should loop.</p> <p><pre><code>A_long loops;\nA_long reserved;\n</code></pre></p> <p><code>A_Ratio pix_aspect_ratio;</code></p> <p>Expresses the pixel aspect ratio of the footage (x over y).</p> <p><code>A_FpLong native_fpsF;</code></p> <p>The original framerate (in frames per second) of the footage item.</p> <p><code>A_FpLong conform_fpsF;</code></p> <p>The framerate being used for the footage item.</p> <p><code>A_long depthL;</code></p> <p>The pixel depth of the footage. One of the following:</p> <ul> <li><code>AEGP_Footage_Depth_1</code></li> <li><code>AEGP_Footage_Depth_2</code></li> <li><code>AEGP_Footage_Depth_4</code></li> <li><code>AEGP_Footage_Depth_8</code></li> <li><code>AEGP_Footage_Depth_16</code></li> <li><code>AEGP_Footage_Depth_24</code></li> <li><code>AEGP_Footage_Depth_30</code></li> <li><code>AEGP_Footage_Depth_32</code></li> <li><code>AEGP_Footage_Depth_GRAY_2</code></li> <li><code>AEGP_Footage_Depth_GRAY_4</code></li> <li><code>AEGP_Footage_Depth_GRAY_8</code></li> <li><code>AEGP_Footage_Depth_48</code></li> <li><code>AEGP_Footage_Depth_64</code></li> <li><code>AEGP_Footage_Depth_GRAY_16</code></li> </ul> <p><code>A_Boolean motion_dB;</code></p> <p>Indicates whether motion de-interlacing is being applied to the footage item.</p>"},{"location":"aegps/aegp-suites/#manage-layers","title":"Manage Layers","text":"<p><code>AEGP_LayerSuite</code> provides information about layers within a composition, and the relationship(s) between the source and layer times.</p> <p>As most After Effects usage boils down to layer manipulation, this is among the largest function suites in our API.</p>"},{"location":"aegps/aegp-suites/#aegp_layersuite9","title":"AEGP_LayerSuite9","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetCompNumLayers</code></p> <p>Obtains the number of layers in a composition.</p> <p><pre><code>AEGP_GetCompNumLayers(\n  AEGP_CompH  compH,\n  A_long      *num_layersPL);\n</code></pre></p> <p><code>AEGP_GetCompLayerByIndex</code></p> <p>Get a <code>AEGP_LayerH</code> from a composition. Zero is the foremost layer.</p> <p><pre><code>AEGP_GetCompLayerByIndex(\n  AEGP_CompH   compH,\n  A_long       layer_indexL,\n  AEGP_LayerH  *layerPH);\n</code></pre></p> <p><code>AEGP_GetActiveLayer</code></p> <p>Get the active layer. If a Layer or effect controls palette is active, the active layer is that associated with the front-most tab in the window.</p> <p>If a composition or timeline window is active, the active layer is the selected layer (if only one is selected; otherwise <code>NULL</code> is returned).</p> <p><pre><code>AEGP_GetActiveLayer(\n  AEGP_LayerH  *layerPH);\n</code></pre></p> <p><code>AEGP_GetLayerIndex</code></p> <p>Get the index of the layer (0 is the topmost layer in the composition).</p> <p><pre><code>AEGP_GetLayerIndex(\n  AEGP_LayerH  layerH,\n  A_long       *layer_indexPL);\n</code></pre></p> <p><code>AEGP_GetLayerSourceItem</code></p> <p>Get the AEGP_ItemH of the layer's source item.</p> <p><pre><code>AEGP_GetLayerSourceItem(\n  AEGP_LayerH  layerH,\n  AEGP_ItemH   *source_itemPH);\n</code></pre></p> <p><code>AEGP_GetLayerSourceItemID</code></p> <p>Retrieves the ID of the given <code>AEGP_LayerH</code>. This is useful when hunting for a specific layer's ID in an <code>AEGP_StreamVal</code>.</p> <p><pre><code>AEGP_GetLayerSourceItemID(\n  AEGP_LayerH  layerH,\n  A_long       *source_idPL);\n</code></pre></p> <p><code>AEGP_GetLayerParentComp</code></p> <p>Get the AEGP_CompH of the composition containing the layer.</p> <p><pre><code>AEGP_GetLayerParentComp(\n  AEGP_LayerH  layerH,\n  AEGP_CompH   *compPH);\n</code></pre></p> <p><code>AEGP_GetLayerName</code></p> <p>Get the name of a layer.</p> <p>Both <code>utf_layer_namePH0</code> and <code>utf_source_namePH0</code> point to null terminated UTF-16 strings. They must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetLayerName(\n  AEGP_PluginID   pluginID,\n  AEGP_LayerH     layerH,\n  AEGP_MemHandle  *utf_layer_namePH0,\n  AEGP_MemHandle  *utf_source_namePH0);\n</code></pre></p> <p><code>AEGP_GetLayerQuality</code></p> <p>Get the quality of a layer.</p> <p><pre><code>AEGP_GetLayerQuality(\n  AEGP_LayerH        layerH,\n  AEGP_LayerQuality  *qualityP);\n</code></pre></p> <p>Layer quality is one of the following flags:</p> <ul> <li><code>AEGP_LayerQual_NONE</code></li> <li><code>AEGP_LayerQual_WIREFRAME</code></li> <li><code>AEGP_LayerQual_DRAFT</code></li> <li><code>AEGP_LayerQual_BEST</code></li> </ul> <p><code>AEGP_SetLayerQuality</code></p> <p>Sets the quality of a layer (see flag values above). Undoable.</p> <p><pre><code>AEGP_SetLayerQuality(\n  AEGP_LayerH        layerH,\n  AEGP_LayerQuality  quality);\n</code></pre></p> <p><code>AEGP_GetLayerFlags</code></p> <p>Get flags for a layer.</p> <p><pre><code>AEGP_GetLayerFlags(\n  AEGP_LayerH      layerH,\n  AEGP_LayerFlags  *layer_flagsP);\n</code></pre></p> <ul> <li><code>AEGP_LayerFlag_NONE</code></li> <li><code>AEGP_LayerFlag_VIDEO_ACTIVE</code></li> <li><code>AEGP_LayerFlag_AUDIO_ACTIVE</code></li> <li><code>AEGP_LayerFlag_EFFECTS_ACTIVE</code></li> <li><code>AEGP_LayerFlag_MOTION_BLUR</code></li> <li><code>AEGP_LayerFlag_FRAME_BLENDING</code></li> <li><code>AEGP_LayerFlag_LOCKED</code></li> <li><code>AEGP_LayerFlag_SHY</code></li> <li><code>AEGP_LayerFlag_COLLAPSE</code></li> <li><code>AEGP_LayerFlag_AUTO_ORIENT_ROTATION</code></li> <li><code>AEGP_LayerFlag_ADJUSTMENT_LAYER</code></li> <li><code>AEGP_LayerFlag_TIME_REMAPPING</code></li> <li><code>AEGP_LayerFlag_LAYER_IS_3D</code></li> <li><code>AEGP_LayerFlag_LOOK_AT_CAMERA</code></li> <li><code>AEGP_LayerFlag_LOOK_AT_POI</code></li> <li><code>AEGP_LayerFlag_SOLO</code></li> <li><code>AEGP_LayerFlag_MARKERS_LOCKED</code></li> <li><code>AEGP_LayerFlag_NULL_LAYER</code></li> <li><code>AEGP_LayerFlag_HIDE_LOCKED_MASKS</code></li> <li><code>AEGP_LayerFlag_GUIDE_LAYER</code></li> <li><code>AEGP_LayerFlag_ENVIRONMENT_LAYER</code></li> <li><code>AEGP_LayerFlag_ADVANCED_FRAME_BLENDING</code>, <code>True</code> only if pixel motion frame blending is on for the layer.</li> <li><code>AEGP_LayerFlag_SUBLAYERS_RENDER_SEPARATELY</code>, Used to get/set the state of per-character 3D enablement on a text layer.</li> <li><code>AEGP_LayerFlag_ENVIRONMENT_LAYER</code>, New in CS6.</li> </ul> <p><code>AEGP_SetLayerFlag</code></p> <p>Sets one layer flag at a time. Undoable.</p> <p><pre><code>AEGP_SetLayerFlag(\n  AEGP_LayerH      layerH,\n  AEGP_LayerFlags  single_flag,\n  A_Boolean        valueB);\n</code></pre></p> <p><code>AEGP_IsLayerVideoReallyOn</code></p> <p>Determines whether the layer's video is visible. This is necessary to account for 'solo' status of other layers in the composition; non-solo'd layers are still on.</p> <p><pre><code>AEGP_IsLayerVideoReallyOn(\n  AEGP_LayerH  layerH,\n  A_Boolean    *onPB);\n</code></pre></p> <p><code>AEGP_IsLayerAudioReallyOn</code></p> <p>Accounts for solo status of other layers in the composition.</p> <p><pre><code>AEGP_IsLayerAudioReallyOn(\n  AEGP_LayerH  layerH,\n  A_Boolean    *onPB);\n</code></pre></p> <p><code>AEGP_GetLayerCurrentTime</code></p> <p>Get current time, in layer or composition timespace. This value is not updated during rendering.</p> <p>NOTE: If a layer starts at other than time 0 or is time-stretched other than 100%, layer time and composition time are distinct.</p> <p><pre><code>AEGP_GetLayerCurrentTime(\n  AEGP_LayerH     layerH,\n  AEGP_LTimeMode  time_mode,\n  A_Time          *curr_timePT);\n</code></pre></p> <p><code>AEGP_GetLayerInPoint</code></p> <p>Get time of first visible frame in composition or layer time. In layer time, the <code>in_pointPT</code> is always 0.</p> <p><pre><code>AEGP_GetLayerInPoint(\n  AEGP_LayerH     layerH,\n  AEGP_LTimeMode  time_mode,\n  A_Time          *in_pointPT);\n</code></pre></p> <p><code>AEGP_GetLayerDuration</code></p> <p>Get duration of layer, in composition or layer time, in seconds.</p> <p><pre><code>AEGP_GetLayerDuration(\n  AEGP_LayerH     layerH,\n  AEGP_LTimeMode  time_mode,\n  A_Time          *durationPT);\n</code></pre></p> <p><code>AEGP_SetLayerInPointAndDuration</code></p> <p>Set duration and in point of layer in composition or layer time. Undo-able.</p> <p><pre><code>AEGP_SetLayerInPointAndDuration(\n  AEGP_LayerH     layerH,\n  AEGP_LTimeMode  time_mode,\n  const A_Time    *in_pointPT,\n  const A_Time    *durationPT);\n</code></pre></p> <p><code>AEGP_GetLayerOffset</code></p> <p>Get the offset from the start of the composition to layer time 0, in composition time.</p> <p><pre><code>AEGP_GetLayerOffset(\n  AEGP_LayerH  layerH,\n  A_Time       *offsetPT);\n</code></pre></p> <p><code>AEGP_SetLayerOffset</code></p> <p>Set the offset from the start of the composition to the first frame of the layer, in composition time. Undoable.</p> <p><pre><code>AEGP_SetLayerOffset(\n  AEGP_LayerH  layerH,\n  A_Time       *offsetPT);\n</code></pre></p> <p><code>AEGP_GetLayerStretch</code></p> <p>Get stretch factor of a layer.</p> <p><pre><code>AEGP_GetLayerStretch(\n  AEGP_LayerH  layerH,\n  A_Ratio      *stretchPRt);\n</code></pre></p> <p><code>AEGP_SetLayerStretch</code></p> <p>Set stretch factor of a layer.</p> <p><pre><code>AEGP_SetLayerStretch(\n  AEGP_LayerH  layerH,\n  A_Ratio      *stretchPRt);\n</code></pre></p> <p><code>AEGP_GetLayerTransferMode</code></p> <p>Get transfer mode of a layer.</p> <p><pre><code>AEGP_GetLayerTransferMode(\n  AEGP_LayerH             layerH,\n  AEGP_LayerTransferMode  *modeP);\n</code></pre></p> <p><code>AEGP_SetLayerTransferMode</code></p> <p>Set transfer mode of a layer. Undoable.</p> <p><pre><code>AEGPSetLayerTransferMode(\n  AEGP_LayerH             layerH,\n  AEGP_LayerTransferMode  *modeP);\n</code></pre></p> <p>As of 23.0, when you make a layer a track matte, the layer being matted will be disabled, as when you do this via the interface.</p> <p><code>AEGP_IsAddLayerValid</code></p> <p>Tests whether it's currently valid to add a given item to a composition.</p> <p>A composition cannot be added to itself, or to any compositions which it contains; other conditions can preclude successful adding too.</p> <p>Adding a layer without first using this function will produce undefined results.</p> <p><pre><code>AEGP_IsAddLayerValid(\n  AEGP_ItemH  item_to_addH,\n  AEGP_CompH  into_compH,\n  A_Boolean   *validPB);\n</code></pre></p> <p><code>AEGP_AddLayer</code></p> <p>Add an item to the composition, above all other layers. Undo-able.</p> <p>Use <code>AEGP_IsAddLayerValid()</code> first, to confirm that it's possible.</p> <p><pre><code>AEGP_AddLayer(\n  AEGP_ItemH  item_to_addH,\n  AEGP_CompH  into_compH,\n  A_Boolean   *added_layerPH0);\n</code></pre></p> <p><code>AEGP_ReorderLayer</code></p> <p>Change the order of layers. Undoable.</p> <p><pre><code>AEGP_ReorderLayer(\n  AEGP_LayerH  layerH,\n  A_long       layer_indexL);\n</code></pre></p> <p>To add a layer to the end of the composition, to use <code>layer_indexL = AEGP_REORDER_LAYER_TO_END</code></p> <p><code>AEGP_GetLayerMaskedBounds</code></p> <p>Given a layer's handle and a time, returns the bounds of area visible with masks applied.</p> <p><pre><code>AEGP_GetLayerMaskedBounds(\n  AEGP_LayerH   layerH,\n  const A_Time  *comp_timePT,\n  A_FloatRect   *boundsPR);\n</code></pre></p> <p><code>AEGP_GetLayerObjectType</code></p> <p>Returns a layer's object type.</p> <p><pre><code>AEGP_GetLayerObjectType(\n  AEGP_LayerH      layerH,\n  AEGP_ObjectType  *object_type);\n</code></pre></p> <ul> <li><code>AEGP_ObjectType_AV</code></li> <li><code>AEGP_ObjectType_LIGHT</code></li> <li><code>AEGP_ObjectType_CAMERA</code></li> <li><code>AEGP_ObjectType_TEXT</code></li> <li><code>AEGP_ObjectType_3D_MODEL</code>, New in 24.4.</li> </ul> <p><code>AEGP_IsLayer3D</code></p> <p>Is the footage item a 3D layer. All AV layers are either 2D or 3D.</p> <p><pre><code>AEGP_IsLayer3D(\n  AEGP_LayerH  layerH,\n  A_Boolean    *is_3DPB);\n</code></pre></p> <p><code>AEGP_IsLayer2D</code></p> <p>Is the footage item a 2D layer. All AV layers are either 2D or 3D.</p> <p><pre><code>AEGP_IsLayer2D(\n  AEGP_LayerH  layerH,\n  A_Boolean    *is_2DPB);\n</code></pre></p> <p><code>AEGP_IsVideoActive</code></p> <p>Given composition time and a layer, see if the layer will render.</p> <p>Time mode is either <code>AEGP_LTimeMode_LayerTime</code> or <code>AEGP_LTimeMode_CompTime</code>.</p> <p><pre><code>AEGP_IsVideoActive(\n  AEGP_LayerH     layerH,\n  AEGP_LTimeMode  time_mode,\n  A_Time          *comp_timePT,\n  A_Boolean       *is_activePB);\n</code></pre></p> <p><code>AEGP_IsLayerUsedAsTrackMatte</code></p> <p>Is the layer used as a track matte?</p> <p><pre><code>AEGP_IsLayerUsedAsTrackMatte(\n  AEGP_LayerH  layerH,\n  A_Boolean    fill_must_be_activeB,\n  A_Boolean    *is_track_mattePB);\n</code></pre></p> <p><code>AEGP_DoesLayerHaveTrackMatte</code></p> <p>Does this layer have a Track Matte?</p> <p><pre><code>AEGP_DoesLayerHaveTrackMatte(\n  AEGP_LayerH  layerH,\n  A_Boolean    *has_track_mattePB);\n</code></pre></p> <p><code>AEGP_ConvertCompToLayerTime</code></p> <p>Given a time in composition space, returns the time relative to the layer source footage.</p> <p><pre><code>AEGP_ConvertCompToLayerTime(\n  AEGP_LayerH   layerH,\n  const A_Time  *comp_timeP,\n  A_Time        *layer_timeP);\n</code></pre></p> <p><code>AEGP_ConvertLayerToCompTime</code></p> <p>Given a time in layer space, find the corresponding time in composition space.</p> <p><pre><code>AEGP_ConvertLayerToCompTime(\n  AEGP_LayerH   layerH,\n  const A_Time  *layer_timePT,\n  A_Time        *comp_timePT);\n</code></pre></p> <p><code>AEGP_GetLayerDancingRandValue</code></p> <p>Used by the dancing dissolve transfer function.</p> <p><pre><code>AEGP_GetLayerDancingRandValue(\n  AEGP_LayerH   layerH,\n  const A_Time  *comp_timePT,\n  A_long        *rand_valuePL);\n</code></pre></p> <p><code>AEGP_GetLayerID</code></p> <p>Supplies the layer's unique ID. This ID never changes during the lifetime of the project.</p> <p><pre><code>AEGP_GetLayerID(\n  AEGP_LayerH      layerH,\n  AEGP_LayerIDVal  *id_valP);\n</code></pre></p> <p><code>AEGP_GetLayerToWorldXform</code></p> <p>Given a layer handle and time, returns the layer-to-world transformation matrix.</p> <p><pre><code>AEGP_GetLayerToWorldXform(\n  AEGP_LayerH   aegp_layerH,\n  const A_Time  *comp_timeP,\n  A_Matrix4     *transform);\n</code></pre></p> <p><code>AEGP_GetLayerToWorldXformFromView</code></p> <p>Given a layer handle, the current (composition) time, and the requested view time, returns the translation between the user's view and the layer, corrected for the composition's current aspect ratio.</p> <p><pre><code>AEGP_GetLayerToWorldXformFromView(\n  AEGP_LayerH   aegp_layerH,\n  const A_Time  *view_timeP,\n  const A_Time  *comp_timeP,\n  A_Matrix4     *transform);\n</code></pre></p> <p><code>AEGP_SetLayerName</code></p> <p>Sets the name of a layer. Undo-able. new_nameZ points to a null terminated UTF-16 string.</p> <p><pre><code>AEGP_SetLayerName(\n  AEGP_LayerH        aegp_layerH,\n  const A_UTF16Char  *new_nameZ);\n</code></pre></p> <p><code>AEGP_GetLayerParent</code></p> <p>Retrieves the handle to a layer's parent (none if not parented).</p> <p><pre><code>AEGP_GetLayerParent(\n  AEGP_LayerH  layerH,\n  AEGP_LayerH  *parent_layerPH);\n</code></pre></p> <p><code>AEGP_SetLayerParent</code></p> <p>Sets a layer's parent layer.</p> <p><pre><code>AEGP_SetLayerParent(\n  AEGP_LayerH        layerH,\n  const AEGP_LayerH  parent_layerH);\n</code></pre></p> <p><code>AEGP_DeleteLayer</code></p> <p>Deletes a layer. Can you believe it took us three suite versions to add a delete function? Neither can we.</p> <p><pre><code>AEGP_DeleteLayer(\n  AEGP_LayerH  layerH);\n</code></pre></p> <p><code>AEGP_DuplicateLayer</code></p> <p>Duplicates the layer. Undoable.</p> <p><pre><code>AEGP_DuplicateLayer(\n  AEGP_LayerH  orig_layerH,\n  AEGP_LayerH  *dupe_layerPH);\n</code></pre></p> <p><code>AEGP_GetLayerFromLayerID</code></p> <p>Retrieves the <code>AEGP_LayerH</code> associated with a given <code>AEGP_LayerIDVal</code> (which is what you get when accessing an effect's layer parameter stream).</p> <p><pre><code>AEGP_GetLayerFromLayerID(\n  AEGP_CompH       parent_compH,\n  AEGP_LayerIDVal  id,\n  AEGP_LayerH      *layerPH);\n</code></pre></p> <p><code>AEGP_GetLayerLabel</code></p> <p>Gets a layer's <code>AEGP_LabelID</code>.</p> <p><pre><code>AEGP_GetLayerLabel(\n  AEGP_LayerH   layerH,\n  AEGP_LabelID  *labelP);\n</code></pre></p> <p><code>AEGP_SetLayerLabel</code></p> <p>Sets a layer's <code>AEGP_LabelID</code>. Undoable.</p> <p><pre><code>AEGP_SetLayerLabel(\n  AEGP_LayerH   layerH,\n  AEGP_LabelID  label);\n</code></pre></p> <p><code>AEGP_GetLayerSamplingQuality</code></p> <p>New in CC. Get the sampling quality of a layer.</p> <p><pre><code>AEGP_GetLayerSamplingQuality(\n  AEGP_LayerH                layerH,\n  AEGP_LayerSamplingQuality  *label);\n</code></pre></p> <p>Layer sampling quality is one of the following flags:</p> <ul> <li><code>AEGP_LayerSamplingQual_BILINEAR</code></li> <li><code>AEGP_LayerSamplingQual_BICUBIC</code></li> </ul> <p><code>AEGP_SetLayerSamplingQuality</code></p> <p>New in CC. Sets the sampling quality of a layer (see flag values above). Option is explicitly set on the layer independent of layer quality.</p> <p>If you want to force it on you must also set the layer quality to <code>AEGP_LayerQual_BEST</code> with <code>AEGP_SetLayerQuality</code> Otherwise it will only be using the specified layer sampling quality whenever the layer quality is set to <code>AEGP_LayerQual_BEST</code>.</p> <p>Undoable.</p> <p><pre><code>AEGP_SetLayerSamplingQuality(\n  AEGP_LayerH                layerH,\n  AEGP_LayerSamplingQuality  label);\n</code></pre></p> <p><code>AEGP_GetTrackMatteLayer</code></p> <p>New in 23.0. Returns the track matte layer of <code>layerH</code>. Returns <code>NULL</code> if there is no track matte layer.</p> <p><pre><code>AEGP_GetTrackMatteLayer(\n  const AEGP_LayerH          layerH,\n  AEGP_LayerH                *track_matte_layerPH);\n</code></pre></p> <p><code>AEGP_SetTrackMatte</code></p> <p>New in 23.0. Sets the track matte layer and track matte type of <code>layerH</code>.</p> <p>Track Matte Types:</p> <ul> <li><code>AEGP_TrackMatte_NO_TRACK_MATTE</code></li> <li><code>AEGP_TrackMatte_ALPHA</code></li> <li><code>AEGP_TrackMatte_NOT_ALPHA</code></li> <li><code>AEGP_TrackMatte_LUMA</code></li> <li><code>AEGP_TrackMatte_NOT_LUMA</code></li> </ul> <p>Setting the track matte type as <code>AEGP_TrackMatte_NO_TRACK_MATTE</code> removes track matte.</p> <p><pre><code>AEGP_SetTrackMatte(\n  AEGP_LayerH                layerH,\n  const AEGP_LayerH          track_matte_layerH0,\n  const AEGP_TrackMatte      track_matte_type);\n</code></pre></p> <p><code>AEGP_RemoveTrackMatte</code></p> <p>New in 23.0. Removes the track matte layer of <code>layerH</code>.</p> <p><pre><code>AEGP_RemoveTrackMatte(\n  AEGP_LayerH                layerH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#layer-creation-notes","title":"Layer Creation Notes","text":"<p>All layers created using AEGP calls will start at composition time 0, and have the duration of the composition.</p> <p>Use <code>AEGP_SetLayerOffset()</code> and <code>AEGP_SetLayerInPointAndDuration()</code> from AEGP_LayerSuite9 to properly set the layer's time information.</p> <p>When the layer stretch factor (obtained using <code>AEGP_GetLayerStretch</code> in AEGP_LayerSuite9, naturally) is not 100%, the following computation will be needed to yield the correct layer offset:</p> <pre><code>offset = compIn - stretch \\* layerIn;\n</code></pre>"},{"location":"aegps/aegp-suites/#communication-with-a-layers-effects","title":"Communication With A Layer's Effects","text":"<p>Access the effects applied to a layer. This suite provides access to all parameter data streams.</p> <p>Use the Stream Suite to work with those streams.</p> <p>An <code>AEGP_Effect_RefH</code> is a reference to an applied effect. An <code>AEGP_InstalledEffectKey</code> is a reference to an installed effect, which may or may not be currently applied to anything.</p> <p>If Foobarocity is applied to a layer twice, there will be two distinct <code>AEGP_Effect_RefHs</code>, but they'll both return the same <code>AEGP_InstalledEffectKey</code>.</p>"},{"location":"aegps/aegp-suites/#aegp_effectsuite4","title":"AEGP_EffectSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetLayerNumEffects</code></p> <p>Get number of effects applied to a layer.</p> <p><pre><code>AEGP_GetLayerNumEffects(\n  AEGP_LayerH  layerH,\n  A_long       *num_effectsPL);\n</code></pre></p> <p><code>AEGP_GetLayerEffectByIndex</code></p> <p>Retrieves (by index) a reference to an effect applied to the layer.</p> <p><pre><code>AEGP_GetLayerEffectByIndex(\n  AEGP_PluginID     aegp_plugin_id,\n  AEGP_LayerH       layerH,\n  AEGP_EffectIndex  effect_indexL,\n  AEGP_EffectRefH   *effectPH);\n</code></pre></p> <p><code>AEGP_GetInstalledKeyFromLayerEffect</code></p> <p>Given an <code>AEGP_EffectRefH</code>, retrieves its associated <code>AEGP_InstalledEffectKey</code>.</p> <p><pre><code>AEGP_GetInstalledKeyFromLayerEffect(\n  AEGP_EffectRefH          effect_refH,\n  AEGP_InstalledEffectKey  *installed_keyP);\n</code></pre></p> <p><code>AEGP_GetEffectParamUnionByIndex</code></p> <p>Returns description of effect parameter.</p> <p>Do not use the value(s) in the ParamDef returned by this function (Use <code>AEGP_GetNewStreamValue()</code> instead); it's provided so AEGPs can access parameter defaults, checkbox names, and pop-up strings.</p> <p>Use <code>AEGP_GetEffectNumParamStreams()</code> from AEGP_StreamSuite5 to get the stream count, useful for determining the maximum <code>param_index</code>. The last parameter is optional.</p> <p><pre><code>AEGP_GetEffectParamUnionByIndex(\n  AEGP_PluginID     aegp_plugin_id,\n  AEGP_EffectRefH   effectH,\n  PF_ParamIndex     param_index,\n  PF_ParamType      *param_typeP\n  PF_ParamDefUnion  *uP0);\n</code></pre></p> <p><code>AEGP_GetEffectFlags</code></p> <p>Obtains the flags for the given <code>AEGP_EffectRefH</code>.</p> <p><pre><code>AEGP_GetEffectFlags(\n  AEGP_EffectRefH   effect_refH,\n  AEGP_EffectFlags  *effect_flagsP);\n</code></pre></p> <p>Flags will be a combination of the following:</p> <ul> <li><code>AEGP_EffectFlags_NONE</code></li> <li><code>AEGP_EffectFlags_ACTIVE</code></li> <li><code>AEGP_EffectFlags_AUDIO_ONLY</code></li> <li><code>AEGP_EffectFlags_AUDIO_TOO</code></li> <li><code>AEGP_EffectFlags_MISSING</code></li> </ul> <p><code>AEGP_SetEffectFlags</code></p> <p>Sets the flags (enumerated above) for the given <code>AEGP_EffectRefH</code>, masked by a different set of effect flags.</p> <p><pre><code>AEGP_SetEffectFlags(\n  AEGP_EffectRefH   effect_refH,\n  AEGP_EffectFlags  mask,\n  AEGP_EffectFlags  effect_flags);\n</code></pre></p> <p><code>AEGP_ReorderEffect</code></p> <p>Change the order of applied effects (pass the requested index).</p> <p><pre><code>AEGP_ReorderEffect(\n  AEGP_EffectRefH  effect_refH,\n  A_long           effect_indexL);\n</code></pre></p> <p><code>AEGP_EffectCallGeneric</code></p> <p>Call an effect plug-in, and pass it a pointer to any data you like; the effect can modify it. This is how AEGPs communicate with effects.</p> <p>Pass <code>PF_Cmd_COMPLETELY_GENERAL</code> for <code>effect_cmd</code>.</p> <p><pre><code>AEGP_EffectCallGeneric(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_EffectRefH  effectH,\n  const A_Time     *timePT,\n  PF_Cmd           effect_cmd,\n  void             *extraPV);\n</code></pre></p> <p><code>AEGP_DisposeEffect</code></p> <p>Disposes of an <code>AEGP_EffectRefH</code>. Use this to dispose of any <code>AEGP_EffectRefH</code> returned by After Effects.</p> <p><pre><code>AEGP_DisposeEffect(\n  AEGP_EffectRefH  effectH);\n</code></pre></p> <p><code>AEGP_ApplyEffect</code></p> <p>Apply an effect to a given layer. Returns the newly-created <code>AEGP_EffectRefH</code>.</p> <p><pre><code>AEGP_ApplyEffect(\n  AEGP_PluginID            aegp_plugin_id,\n  AEGP_LayerH              layerH,\n  AEGP_InstalledEffectKey  installed_key,\n  AEGP_EffectRefH          *effect_refPH);\n</code></pre></p> <p><code>AEGP_DeleteLayerEffect</code></p> <p>Remove an applied effect.</p> <p><pre><code>AEGP_DeleteLayerEffect(\n  AEGP_EffectRefH  effect_refH);\n</code></pre></p> <p><code>AEGP_GetNumInstalledEffects</code></p> <p>Returns the count of effects installed in After Effects.</p> <p><pre><code>AEGP_GetNumInstalledEffects(\n  A_long  *num_installed_effectsPL);\n</code></pre></p> <p><code>AEGP_GetNextInstalledEffect</code></p> <p>Returns the <code>AEGP_InstalledEffectKey</code> of the next installed effect.</p> <p>Pass <code>AEGP_InstalledEffectKey_NONE</code> as the first parameter to obtain the first <code>AEGP_InstalledEffectKey</code>.</p> <p><pre><code>AEGP_GetNextInstalledEffect(\n  AEGP_InstalledEffectKey  key,\n  AEGP_InstalledEffectKey  *next_keyPH);\n</code></pre></p> <p><code>AEGP_GetEffectName</code></p> <p>Get name of the effect. <code>nameZ</code> can be up to <code>AEGP_MAX_EFFECT_NAME_SIZE + 1</code> long.</p> <p><pre><code>AEGP_GetEffectName(\n  AEGP_InstalledEffectKey  installed_key,\n  A_char                   *nameZ);\n</code></pre></p> <p>Note: use <code>AEGP_SetStreamName</code> to change the display name of an effect.</p> <p><code>AEGP_GetEffectMatchName</code></p> <p>Get match name of an effect (defined in PiPL). <code>match_nameZ</code> up to <code>AEGP_MAX_EFFECT_MATCH_NAME_SIZE + 1</code> long.</p> <p><pre><code>AEGP_GetEffectMatchName(\n  AEGP_InstalledEffectKey  installed_key,\n  A_char                   *match_nameZ);\n</code></pre></p> <p>Match names are in 7-bit ASCII. UI names are in the current application runtime encoding; for example, ISO 8859-1 for most languages on Windows.</p> <p><code>AEGP_GetEffectCategory</code></p> <p>Menu category of effect. <code>categoryZ</code> can be up to <code>AEGP_MAX_EFFECT_CATEGORY_NAME_SIZE + 1</code> long.</p> <p><pre><code>AEGP_GetEffectCategory(\n  AEGP_InstalledEffectKey  installed_key,\n  A_char                   *categoryZ);\n</code></pre></p> <p><code>AEGP_DuplicateEffect</code></p> <p>Duplicates a given <code>AEGP_EffectRefH</code>. Caller must dispose of duplicate when finished.</p> <p><pre><code>AEGP_DuplicateEffect(\n  AEGP_EffectRefH  orig_effect_refH,\n  AEGP_EffectRefH  *dupe_refPH);\n</code></pre></p> <p><code>AEGP_NumEffectMask</code></p> <p>New in CC 2014. How many masks are on this effect?</p> <p><pre><code>AEGP_NumEffectMask(\n  AEGP_EffectRefH  effect_refH,\n  A_u_long         *num_masksPL);\n</code></pre></p> <p><code>AEGP_GetEffectMaskID</code></p> <p>New in CC 2014. For a given mask_indexL, returns the corresponding <code>AEGP_MaskIDVal</code> for use in uniquely identifying the mask.</p> <p><pre><code>AEGP_GetEffectMaskID(\n  AEGP_EffectRefH  effect_refH,\n  A_u_long         mask_indexL,\n  AEGP_MaskIDVal   *id_valP);\n</code></pre></p> <p><code>AEGP_AddEffectMask</code></p> <p>New in CC 2014. Add an effect mask, which may be created using the Mask Management.</p> <p>Returns the local stream of the effect ref - useful if you want to add keyframes.</p> <p>Caller must dispose of <code>AEGP_StreamRefH</code> when finished.</p> <p>Undoable.</p> <p><pre><code>AEGP_AddEffectMask(\n  AEGP_EffectRefH  effect_refH,\n  AEGP_MaskIDVal   id_val,\n  AEGP_StreamRefH  streamPH0);\n</code></pre></p> <p><code>AEGP_RemoveEffectMask</code></p> <p>New in CC 2014. Remove an effect mask.</p> <p>Undoable.</p> <p><pre><code>AEGP_RemoveEffectMask(\n  AEGP_EffectRefH  effect_refH,\n  AEGP_MaskIDVal   id_val);\n</code></pre></p> <p><code>AEGP_SetEffectMask</code></p> <p>New in CC 2014. Set an effect mask on an existing index.</p> <p>Returns the local stream of the effect ref - useful if you want to add keyframes.</p> <p>Caller must dispose of <code>AEGP_StreamRefH</code> when finished.</p> <p>Undoable.</p> <p><pre><code>AEGP_SetEffectMask(\n  AEGP_EffectRefH  effect_refH,\n  A_u_long         mask_indexL,\n  AEGP_MaskIDVal   id_val,\n  AEGP_StreamRefH  *streamPH0);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#exploiting-effect-ui-behavior-to-look-cool","title":"Exploiting Effect UI Behavior To Look Cool","text":"<p>Even if you manipulate a layer's effects, its effect controls won't necessarily become visible.</p> <p>However, if you apply then immediately remove an effect, the layer's effect controls will be made visible.</p> <p>Tricky, eh?</p>"},{"location":"aegps/aegp-suites/#streamrefs-and-effectrefs","title":"StreamRefs And EffectRefs","text":"<p>How do you get an AEGP_StreamRef for an effect? Start by getting the effect's <code>AEGP_EffectRef</code>, by calling <code>AEGP_GetNewEffectForEffect()</code>.</p> <p>Then call <code>AEGP_GetNewEffectStreamByIndex()</code>, say for param index 1, which passes back a parameter stream.</p> <p>Then call <code>AEGP_GetNewParentStreamRef()</code> - voila, your <code>AEGP_StreamRef</code> sir!</p> <p>If you acquire references to an effect's streams, do not dispose of the <code>AEGP_EffectRefH</code> until you're done with the streams, or you'll unbalance After Effects' checkout mechanism. Also remember that AEGP_StreamRefHs are opaque; <code>AEGP_StreamValue2s</code> are not (entirely).</p> <p>To get an effect's instance name (as renamed by the user), get the AEGP_StreamRef for the effect itself and call <code>AEGP_GetStreamName</code>.</p>"},{"location":"aegps/aegp-suites/#diving-into-streams","title":"Diving Into Streams!","text":"<p>Just about everything in After Effects is a stream. Effect parameters, layers, masks, and shapes are all internally represented by streams. The AEGP API can access nearly every aspect of every stream.</p> <p>The After Effects timeline can contain numerous object types; each object supports a set of parameters called streams. All streams, regardless of which type of object to which they're attached, are conceptually similar (and handled similarly by After Effects. But the way you access each type of stream varies because of their containment.</p> <p>A stream, once acquired, represents a value which may change over time. Not all streams *can* vary over time, and a particular stream may not be time-variant at the time of access.</p> <p>There are two ways to access the value of a stream. If the stream has keyframes, you can use the Working With Keyframes. The values provided won't reflect the influence of expressions. Note: In any expression, the current keyframed value is always available as the variable value.</p> <p>You can also use <code>AEGP_GetNewStreamValue</code> from AEGP_StreamSuite5, which samples the value of the stream at a particular time. For streams without expressions or keyframes, the time parameter is meaningless, and the function returns what essentially is the constant value of the stream. Use <code>AEGP_SetStreamValue</code> (which doesn't take a time as a parameter) to set these streams.</p> <p>Many StreamSuite functions populate a StreamH, which your AEGP must dispose. when done. After Effects allocates and passes you a copy of the values, not a direct handle to the original value. <code>AEGP_GetNewLayerStream()</code> is restricted to streams for which no memory allocation is required to access their values.</p>"},{"location":"aegps/aegp-suites/#okay-what-did-i-just-get","title":"Okay, What Did I Just Get?","text":"<p>A stream value is a large union, only one structure of which (depending on the stream type) is populated. Note the similarity to the PF_ParamDef.</p> <pre><code>typedef union {\n    AEGP_FourDVal         four_d;\n    AEGP_ThreeDVal        three_d;\n    AEGP_TwoDVal          two_d;\n    AEGP_OneDVal          one_d;\n    AEGP_ColorVal         color;\n    AEGP_ArbBlockVal      arbH;\n    AEGP_MarkerValP       markerP;\n    AEGP_LayerIDVal       layer_id;\n    AEGP_MaskIDVal        mask_id;\n    AEGP_MaskOutlineValH  mask;\n    AEGP_TextDocumentH    text_documentH;\n} AEGP_StreamVal2;\n</code></pre>"},{"location":"aegps/aegp-suites/#layers","title":"Layers","text":"<p><code>AEGP_GetLayerStreamValue</code> is used to access the parameters like anchor point and position, native to almost all layers in AE.</p> <p>Use <code>IsStreamLegal</code> to allow you to determine if that stream type is offered on that layer.</p>"},{"location":"aegps/aegp-suites/#masks","title":"Masks","text":"<p>Since a layer can have multiple masks, access the masks using <code>AEGP_GetLayerMaskByIndex</code> from AEGP_MaskSuite6.</p> <p>Masks don't have streams like layers do; they get their own enumeration. Access their streams using <code>AEGP_GetNewMaskStream</code> from AEGP_StreamSuite5.</p>"},{"location":"aegps/aegp-suites/#effects","title":"Effects","text":"<p>They can have a variable number of streams/parameters, and the order and definition of them is not known when the AEGP is written.</p> <p>Therefore we cannot offer an enum for selecting them, and instead you must get them by index, hence <code>GetNewEffectStreamByIndex</code> from AEGP_StreamSuite5.</p>"},{"location":"aegps/aegp-suites/#stream-suite","title":"Stream Suite","text":"<p>Access and manipulate the values of a layer's streams. For paint and text streams, use Dynamic Streams instead.</p>"},{"location":"aegps/aegp-suites/#aegp_streamsuite5","title":"AEGP_StreamSuite5","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_IsStreamLegal</code></p> <p>Determines if the given stream is appropriate for the given layer.</p> <p><pre><code>AEGP_IsStreamLegal(\n  AEGP_LayerH       layerH,\n  AEGP_LayerStream  which_stream,\n  A_Boolean*        is_legalP);\n</code></pre></p> <p><code>AEGP_CanVaryOverTime</code></p> <p>Given a stream, returns whether or not a stream is time-variant (and can be keyframed).</p> <p><pre><code>AEGP_CanVaryOverTime(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *can_varyPB);\n</code></pre></p> <p><code>AEGP_GetValidInterpolations</code></p> <p>Retrieves an <code>AEGP_KeyInterpolationMask</code> indicating which interpolation types are valid for the <code>AEGP_StreamRefH</code>.</p> <p><pre><code>AEGP_GetValidInterpolations(\n  AEGP_StreamRefH            streamH,\n  AEGP_KeyInterpolationMask  *valid_interpP);\n</code></pre></p> <p><code>AEGP_KeyInterpolationMask</code> will be a combination of the following:</p> <ul> <li><code>AEGP_KeyInterpMask_NONE</code></li> <li><code>AEGP_KeyInterpMask_LINEAR</code></li> <li><code>AEGP_KeyInterpMask_BEZIER</code></li> <li><code>AEGP_KeyInterpMask_HOLD</code></li> <li><code>AEGP_KeyInterpMask_CUSTOM</code></li> <li><code>AEGP_KeyInterpMask_ANY</code></li> </ul> <p><code>AEGP_GetNewLayerStream</code></p> <p><code>AEGP_GetEffectNumParamStreams</code></p> <p>Get number of parameter streams associated with an effect.</p> <p><pre><code>AEGP_GetEffectNumParamStreams(\n  AEGP_EffectRefH  effect_refH,\n  A_long           *num_parmsPL);\n</code></pre></p> <p><code>AEGP_GetNewEffectStreamByIndex</code></p> <p>Get an effect's parameter stream. Plug-in must dispose of <code>streamPH</code>.</p> <p><pre><code>AEGP_GetNewEffectStreamByIndex(\n  AEGP_PluginID    id,\n  AEGP_EffectRefH  effect_refH,\n  PF_ParamIndex    param_index,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p><code>AEGP_GetNewMaskStream</code></p> <p>Get a mask's stream. The stream must be disposed.</p> <p>Also see the AEGP_MaskSuite and AEGP_MaskOutlineSuite for additional Mask functions.</p> <ul> <li><code>AEGP_MaskStream_OUTLINE</code></li> <li><code>AEGP_MaskStream_OPACITY</code></li> <li><code>AEGP_MaskStream_FEATHER</code></li> <li><code>AEGP_MaskStream_EXPANSION</code></li> </ul> <p>Useful for iteration:</p> <ul> <li><code>AEGP_MaskStream_BEGIN</code> = <code>AEGP_MaskStream_OUTLINE</code></li> <li><code>AEGP_MaskStream_END</code> = <code>AEGP_MaskStream_EXPANSION + 1</code></li> </ul> <p><pre><code>AEGP_GetNewMaskStream(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_MaskRefH    mask_refH,\n  AEGP_MaskStream  which_stream,\n  AEGP_StreamRefH  *mask_strmPH);\n</code></pre></p> <p><code>AEGP_DisposeStream</code></p> <p>Dispose of a stream (do this with all streams passed to the plug-in by these functions).</p> <p><pre><code>AEGP_DisposeStream(\n  AEGP_StreamRefH  streamH);\n</code></pre></p> <p><code>AEGP_GetNewMaskOpacity</code></p> <p>Get the mask's opacity stream. The stream must be disposed.</p> <p><pre><code>AEGP_GetNewMaskOpacity(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_MaskH       maskH,\n  PF_ParamIndex    param_index,\n  AEGP_StreamRefH  *mask_opacity_streamPH);\n</code></pre></p> <p><code>AEGP_GetStreamName</code></p> <p>Get name of the stream (localized or forced English). is handle of <code>A_UTF16Char</code> (contains null terminated UTF16 string); must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetStreamName(\n  AEGP_PluginID    pluginID,\n  AEGP_StreamRefH  streamH,\n  A_Boolean        force_englishB,\n  AEGP_MemHandle   *utf_stream_namePH);\n</code></pre></p> <p>NOTE: if <code>force_englishB</code> is <code>TRUE</code>, the default name will override any stream renaming which has been done (either programatically, or by the user).</p> <p><code>AEGP_GetStreamUnitsText</code></p> <p>Get stream units, formatted as text (localized or forced English); <code>unitsZ</code> up to <code>AEGP_MAX_STREAM_NAME_LEN + 1</code> long.</p> <p><pre><code>AEGP_GetStreamUnitsText(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        force_englishB,\n  A_char           *unitsZ);\n</code></pre></p> <p><code>AEGP_GetStreamProperties</code></p> <p>Get stream's flags, as well as minimum and maximum values (as floats), if the stream has mins and maxes.</p> <p>StreamFlags values:</p> <ul> <li><code>AEGP_StreamFlag_NONE</code></li> <li><code>AEGP_StreamFlag_HAS_MIN</code></li> <li><code>AEGP_StreamFlag_HAS_MAX</code></li> </ul> <p><pre><code>AEGP_GetStreamProperties(\n  AEGP_StreamRefH   streamH,\n  AEGP_StreamFlags  *flagsP,\n  A_FpLong          *minP0,\n  A_FpLong          *maxP0);\n</code></pre></p> <p><code>AEGP_IsStreamTimevarying</code></p> <p>Returns whether or not the stream is affected by expressions.</p> <p><pre><code>AEGP_IsStreamTimevarying(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *is_timevaryPB);\n</code></pre></p> <p><code>AEGP_GetStreamType</code></p> <p>Get type (dimension) of a stream.</p> <p><pre><code>AEGP_GetStreamType(\n  AEGP_StreamRefH  streamH,\n  AEGP_StreamType  *stream_typeP);\n</code></pre></p> <ul> <li><code>AEGP_StreamType_NO_DATA</code></li> <li><code>AEGP_StreamType_TwoD_SPATIAL</code></li> <li><code>AEGP_StreamType_TwoD</code></li> <li><code>AEGP_StreamType_ThreeD</code></li> <li><code>AEGP_StreamType_ThreeD_SPATIAL</code></li> <li><code>AEGP_StreamType_OneD</code></li> <li><code>AEGP_StreamType_COLOR</code></li> <li><code>AEGP_StreamType_ARB</code></li> <li><code>AEGP_StreamType_MARKER</code></li> <li><code>AEGP_StreamType_LAYER_ID</code></li> <li><code>AEGP_StreamType_MASK_ID</code></li> <li><code>AEGP_StreamType_MASK</code></li> <li><code>AEGP_StreamType_TEXT_DOCUMENT</code></li> </ul> <p>NOTE: always returns <code>ThreeD_Spatial</code> for position, regardless of whether or not the layer is 3D.</p> <p><code>AEGP_GetNewStreamValue</code></p> <p>Get value, at a time you specify, of stream. <code>valueP</code> must be disposed by the plug-in.</p> <p>The <code>AEGP_LTimeMode</code> indicates whether the time is in compositions or layer time.</p> <p><pre><code>AEGP_GetNewStreamValue(\n  AEGP_PluginID      aegp_plugin_id,\n  AEGP_StreamRefH    streamH,\n  AEGP_LTimeMode     time_mode,\n  const A_Time       *timePT,\n  A_Boolean          pre_exprB,\n  AEGP_StreamValue2  *valueP);\n</code></pre></p> <p><code>AEGP_DisposeStreamValue</code></p> <p>Dispose of stream value. Always deallocate values passed to the plug-in.</p> <p><pre><code>AEGP_DisposeStreamValue(\n  AEGP_StreamValue2  *valueP);\n</code></pre></p> <p><code>AEGP_SetStreamValue</code></p> <p>Only legal when stream is not time-variant.</p> <p><pre><code>AEGP_SetStreamValue(\n  AEGP_PluginID      aegp_plugin_id,\n  AEGP_StreamRefH    streamH,\n  AEGP_StreamValue2  *valueP);\n</code></pre></p> <p><code>AEGP_GetLayerStreamValue</code></p> <p>NOTE: This convenience function is only valid for streams with primitive data types, and not for <code>AEGP_ArbBlockVal</code>, <code>AEGP_MarkerValH</code> or <code>AEGP_MaskOutlineValH</code>. For these and other complex types, use <code>AEGP_GetNewStreamValue</code>, described above.</p> <p><pre><code>AEGP_GetLayerStreamValue(\n  AEGP_LayerH       layerH,\n  AEGP_LayerStream  which_stream,\n  AEGP_LTimeMode    time_mode,\n  const A_Time      *timePT,\n  A_Boolean         pre_expB,\n  AEGP_StreamVal    *stream_valP,\n  AEGP_StreamType   *strm_typeP0);\n</code></pre></p> <p><code>AEGP_GetExpressionState</code></p> <p>Determines whether expressions are enabled on the given <code>AEGP_StreamRefH</code>.</p> <p><pre><code>AEGP_GetExpressionState(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *enabledPB);\n</code></pre></p> <p><code>AEGP_SetExpressionState</code></p> <p>Enables and disables expressions on the given <code>AEGP_StreamRefH</code>.</p> <p><pre><code>AEGP_SetExpressionState(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  streamH,\n  A_Boolean        enabledB);\n</code></pre></p> <p><code>AEGP_GetExpression</code></p> <p>Obtains the expression's text. Starting in suite version 5 (available in 15.0 and later), this now supports Unicode.</p> <p><pre><code>AEGP_GetExpression(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  streamH,\n  AEGP_MemHandle   *unicodeHZ);\n</code></pre></p> <p><code>AEGP_SetExpression</code></p> <p>Sets the expression's text. Starting in suite version 5 (available in 15.0 and later), this now supports Unicode.</p> <p><pre><code>AEGP_SetExpression(\n  AEGP_PluginID      aegp_plugin_id,\n  AEGP_StreamRefH    streamH,\n  const A_UTF16Char*  expressionP);\n</code></pre></p> <p><code>AEGP_DuplicateStreamRef</code></p> <p>Duplicates a given <code>AEGP_StreamRefH</code>. Dispose of the duplicate.</p> <p><pre><code>AEGP_DuplicateStreamRef(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  streamH,\n  AEGP_StreamRefH  *dup_streamPH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#dynamic-streams","title":"Dynamic Streams","text":"<p><code>AEGP_DynamicStreamSuite</code> accesses and manipulates paint and text streams.</p> <p>Use <code>AEGP_GetStreamGroupingType</code> and <code>AEGP_GetDynamicStreamFlags</code> to identify the stream before attempting to use functions which only work on certain stream types.</p> <p>Also note that, often, you can simply use Stream Suite calls to work with dynamic streams. On the other hand, only those functions specific to dynamic streams are in this suite.</p>"},{"location":"aegps/aegp-suites/#aegp_dynamicstreamsuite4","title":"AEGP_DynamicStreamSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetNewStreamRefForLayer</code></p> <p>Retrieves the AEGP_StreamRefH corresponding to the layer. This function is used to initiate a recursive walk of the layer's streams.</p> <p><pre><code>AEGP_GetNewStreamRefForLayer(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_LayerH      layerH,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p><code>AEGP_GetNewStreamRefForMask</code></p> <p>Retrieves the AEGP_StreamRefH corresponding to the mask.</p> <p><pre><code>AEGP_GetNewStreamRefForMask(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_MaskRefH    maskH,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p><code>AEGP_GetStreamDepth</code></p> <p>Retrieves the number of sub-streams associated with the given <code>AEGP_StreamRefH</code>. The initial layer has a depth of 0.</p> <p><pre><code>AEGP_GetStreamDepth(\n  AEGP_StreamRefH  streamH,\n  A_long           *depthPL);\n</code></pre></p> <p><code>AEGP_GetStreamGroupingType</code></p> <p>Retrieves the grouping type for the given <code>AEGP_StreamRefH</code>.</p> <p><pre><code>AEGP_GetStreamGroupingType(\n  AEGP_StreamRefH          streamH,\n  AEGP_StreamGroupingType  *group_typeP);\n</code></pre></p> <p>AEGP_StreamGroupingType will be one of the following:</p> <ul> <li><code>AEGP_StreamGroupingType_NONE</code></li> <li><code>AEGP_StreamGroupingType_LEAF</code></li> <li><code>AEGP_StreamGroupingType_NAMED_GROUP</code></li> <li><code>AEGP_StreamGroupingType_INDEXED_GROUP</code></li> </ul> <p><code>AEGP_GetNumStreamsInGroup</code></p> <p>Retrieves the number of streams associated with the given <code>AEGP_StreamRefH</code>.</p> <p>This function will return an error if called with an <code>AEGP_StreamRefH</code> with type <code>AEGP_StreamGroupingType_LEAF</code>.</p> <p><pre><code>AEGP_GetNumStreamsInGroup(\n  AEGP_StreamRefH  streamH,\n  A_long           *num_streamsPL);\n</code></pre></p> <p><code>AEGP_GetDynamicStreamFlags</code></p> <p>Retrieves the flags for a given AEGP_StreamRefH.</p> <p><pre><code>AEGP_GetDynamicStreamFlags(\n  AEGP_StreamRefH      streamH,\n  AEGP_DynStreamFlags  *flagsP);\n</code></pre></p> <p><code>AEGP_DynStreamFlags</code> will be one of the following:</p> <ul> <li><code>AEGP_DynStreamFlag_ACTIVE_EYEBALL</code> means that the stream is available for reading and writing.</li> <li><code>AEGP_DynStreamFlag_HIDDEN</code> means that, while the stream is still readable/writable, it may not currently be visible in the UI.</li> <li><code>AEGP_DynStreamFlag_DISABLED</code> A read-only flag. Indicates whether the <code>AEGP_StreamRefH</code> is grayed out in the UI.<ul> <li>Note that as of CS5, this flag will not be returned if a parameter is disabled.</li> <li>Instead, check <code>PF_PUI_DISABLED</code> in Parameter UI Flags.</li> </ul> </li> <li><code>AEGP_DynStreamFlag_ELIDED</code> A read-only flag. Indicates that the <code>AEGP_StreamRefH</code> is read-only, the user never sees it. However, the children are still seen and not indented in the Timeline panel.</li> <li><code>AEGP_DynStreamFlag_SHOWN_WHEN_EMPTY</code> New in CS6. A read-only flag. Indicates that this stream group should be shown when empty.</li> <li><code>AEGP_DynStreamFlag_SKIP_REVEAL_WHEN_UNHIDDEN</code> New in CS6. A read-only flag. Indicates that this stream property will not be automatically revealed when un-hidden.</li> </ul> <p><code>AEGP_SetDynamicStreamFlag</code></p> <p>Sets the specified flag for the <code>AEGP_StreamRefH</code>.</p> <p>Note: flags must be set individually. Undoable if <code>undoableB</code> is <code>TRUE</code>.</p> <p><pre><code>AEGP_SetDynamicStreamFlag(\n  AEGP_StreamRefH      streamH,\n  AEGP_DynStreamFlags  one_flag,\n  A_Boolean            undoableB,\n  A_Boolean            setB);\n</code></pre></p> <p>This call may be used to dynamically show or hide parameters, by setting and clearing <code>AEGP_DynStreamFlag_HIDDEN</code>. However, <code>AEGP_DynStreamFlag_DISABLED</code> may not be set.</p> <p><code>AEGP_GetNewStreamRefByIndex</code></p> <p>Retrieves a sub-stream by index from a given <code>AEGP_StreamRefH</code>. Cannot be used on streams of type <code>AEGP_StreamGroupingType_LEAF</code>.</p> <p><pre><code>AEGP_GetNewStreamRefByIndex(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  parent_groupH,\n  A_long           indexL,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p><code>AEGP_GetNewStreamRefByMatchname</code></p> <p>Retrieves a sub-stream by match name from a given <code>AEGP_StreamRefH</code>. Only legal for <code>AEGP_StreamGroupingType_NAMED_GROUP</code>.</p> <p><pre><code>AEGP_GetNewStreamRefByMatchname(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  parent_groupH,\n  const A_char     *match_nameZ,\n  AEGP_StreamRefH  *streamPH);\n</code></pre></p> <p>Here are some handy stream names, for which references may be retrieved:</p> <ul> <li><code>AEGP_StreamGroupName_MASK_PARADE</code></li> <li><code>AEGP_StreamGroupName_MASK_ATOM</code></li> <li><code>AEGP_StreamName_MASK_FEATHER</code></li> <li><code>AEGP_StreamName_MASK_OPACITY</code></li> <li><code>AEGP_StreamName_MASK_OFFSET</code></li> <li><code>AEGP_StreamGroupName_EFFECT_PARADE</code></li> <li><code>AEGP_StreamGroupName_LAYER</code></li> <li><code>AEGP_StreamGroupName_AV_LAYER</code></li> <li><code>AEGP_StreamGroupName_TEXT_LAYER</code></li> <li><code>AEGP_StreamGroupName_CAMERA_LAYER</code></li> <li><code>AEGP_StreamGroupName_LIGHT_LAYER</code></li> <li><code>AEGP_StreamGroupName_AUDIO</code></li> <li><code>AEGP_StreamGroupName_MATERIAL_OPTIONS</code></li> <li><code>AEGP_StreamGroupName_TRANSFORM</code></li> <li><code>AEGP_StreamGroupName_LIGHT_OPTIONS</code></li> <li><code>AEGP_StreamGroupName_CAMERA_OPTIONS</code></li> </ul> <p><code>AEGP_DeleteStream</code></p> <p>Deletes the specified stream from a stream grouping.</p> <p>Note that the caller must still dispose of any <code>AEGP_StreamRefH</code> it's already acquired (allocated) via the API. Undoable.</p> <p>Only valid for children of type <code>AEGP_StreamGroupingType_INDEXED_GROUP</code>.</p> <p><pre><code>AEGP_DeleteStream(\n  AEGP_StreamRefH  streamH);\n</code></pre></p> <p>Note: as of 6.5, if a stream is deleted while it or any child stream is selected, the current composition selection will become <code>NULL</code>.</p> <p><code>AEGP_ReorderStream</code></p> <p>Sets the new index of the specified <code>AEGP_StreamRefH</code>. Undoable.</p> <p>Only valid for children of <code>AEGP_StreamGroupingType_INDEXED_GROUP</code>.</p> <p>The <code>AEGP_StreamRefH</code> is updated to refer to the newly-ordered stream.</p> <p><pre><code>AEGP_ReorderStream(\n  AEGP_StreamRefH  streamH\n  A_long           new_indexL);\n</code></pre></p> <p><code>AEGP_DuplicateStream</code></p> <p>Duplicates the specified stream and appends it to the stream group.</p> <p>Undoable.</p> <p>Only valid for children of <code>AEGP_StreamGroupingType_INDEXED_GROUP</code>.</p> <p><pre><code>AEGP_DuplicateStream(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  streamH,\n  A_long           *new_indexPL0);\n</code></pre></p> <p><code>AEGP_SetStreamName</code></p> <p>Sets the name of the given <code>AEGP_StreamRefH</code>. Undoable. nameZ points to a null terminated UTF-16 string.</p> <p>Only valid for children of <code>AEGP_StreamGroupingType_INDEXED_GROUP</code>.</p> <p>NOTE: If you retrieve the name with force_englishB set to <code>TRUE</code>, you will get the canonical, UNchanged name of the stream.</p> <p><pre><code>AEGP_SetStreamName(\n  AEGP_StreamRefH    streamH,\n  const A_UTF16Char  *nameZ);\n</code></pre></p> <p>Note: Use this on an effect stream's group to change the display name of an effect.</p> <p><code>AEGP_CanAddStream</code></p> <p>Returns whether or not it is currently possible to add a stream through the API.</p> <p><pre><code>AEGP_CanAddStream(\n  AEGP_StreamRefH  group_streamH,\n  const A_char     *match_nameZ,\n  A_Boolean        *can_addPB);\n</code></pre></p> <p><code>AEGP_AddStream</code></p> <p>Adds a stream to the specified stream group. Undoable. Only valid for <code>AEGP_StreamGroupingType_INDEXED_GROUP</code>.</p> <p><pre><code>AEGP_AddStream(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_StreamRefH  indxd_grp_streamH,\n  const A_char     *match_nameZ,\n  AEGP_StreamRefH  *streamPH0);\n</code></pre></p> <p><code>AEGP_GetMatchName</code></p> <p>Retrieves the match name for the specified <code>AEGP_StreamRefH</code>.</p> <p>Note that this may differ from the display name, which can be retrieves using <code>AEGP_GetStreamName</code>, in AEGP_StreamSuite5.</p> <p><code>nameZ</code> can be up to <code>AEGP_MAX_STREAM_MATCH_NAME_SIZE</code> in length.</p> <p><pre><code>AEGP_GetMatchName(\n  AEGP_StreamRefH  streamH,\n  A_char           *nameZ);\n</code></pre></p> <p><code>AEGP_GetNewParentStreamRef</code></p> <p>Retrieves an <code>AEGP_StreamRefH</code> for the parent of the specified <code>AEGP_StreamRefH</code>.</p> <p><pre><code>AEGP_GetNewParentStreamRef(\n  AEGP_PluginID    plugin_id,\n  AEGP_StreamRefH  streamH,\n  AEGP_StreamRefH  *parentPH);\n</code></pre></p> <p><code>AEGP_GetStreamIsModified</code></p> <p>Returns whether or not the specified <code>AEGP_StreamRefH</code> has been modified.</p> <p>Note: the same result is available throught the After Effect user interface by typing \"UU\" with the composition selected.</p> <p><pre><code>AEGP_GetStreamIsModified(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *modifiedPB);\n</code></pre></p> <p><code>AEGP_GetStreamIndexInParent</code></p> <p>Retrieves the index of a given stream, relative to its parent stream.</p> <p>Only valid for children of <code>AEGP_StreamGroupingType_INDEXED_GROUP</code></p> <p><pre><code>AEGP_GetStreamIndexInParent(\n  AEGP_StreamRefH  streamH,\n  A_long           *indexPL);\n</code></pre></p> <p>Note</p> <p>As mentioned elsewhere, <code>AEGP_StreamRefHs</code> don't persist across function calls.</p> <p>If streams are re-ordered, added or removed, all <code>AEGP_StreamRefHs</code> previously retrieved may be invalidated.</p> <p><code>AEGP_IsSeparationLeader</code></p> <p>Valid on leaf streams only. Returns true if this stream is a multidimensional stream that can have its dimensions separated, though they may not be currently separated.</p> <p>Terminology: A Leader is the stream that can be separated, a Follower is one of N automatic streams that correspond to the N dimensions of the Leader.</p> <p>A Leader isn't always separated, call <code>AEGP_AreDimensionsSeparated</code> to find out if it is. As of CS4, the only stream that is ever separarated is the layer's Position property.</p> <p>Please do not write code assuming that, we anticipate allowing separation of more streams in the future.</p> <p><pre><code>AEGP_IsSeparationLeader(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *leaderPB);\n</code></pre></p> <p><code>AEGP_AreDimensionsSeparated</code></p> <p>Methods such as <code>AEGP_GetNewKeyframeValue</code> that work on keyframe indices will most definitely not work on the Leader property, you will need to retrieve and operate on the Followers explicitly.</p> <p><pre><code>AEGP_AreDimensionsSeparated(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *separatedPB);\n</code></pre></p> <p><code>AEGP_SetDimensionsSeparated</code></p> <p>Valid only if <code>AEGP_IsSeparationLeader()</code> is <code>true</code>.</p> <p><pre><code>AEGP_AreDimensionsSeparated(\n  AEGP_StreamRefH  streamH,\n  A_Boolean        *separatedPB);\n</code></pre></p> <p><code>AEGP_GetSeparationFollower</code></p> <p>Retrieve the Follower stream corresponding to a given dimension of the Leader stream.</p> <p><code>dimS</code> can range from <code>0</code> to <code>AEGP_GetStreamValueDimensionality(lea der_streamH) - 1</code>.</p> <p><pre><code>AEGP_GetSeparationFollower(\n  AEGP_StreamRefH  leader_streamH\n  A_short          dimS,\n  AEGP_StreamRefH  *follower_streamPH);\n</code></pre></p> <p><code>AEGP_IsSeparationFollower</code></p> <p>Valid on leaf streams only.</p> <p>Returns <code>true</code> if this stream is a one dimensional property that represents one of the dimensions of a Leader.</p> <p>You can retrieve stream from the Leader using <code>AEGP_GetSeparationFollower()</code>.</p> <p><pre><code>AEGP_IsSeparationFollower(\n  AEGP_StreamRefH  streamH\n  A_Boolean        *followerPB);\n</code></pre></p> <p><code>AEGP_GetSeparationLeader</code></p> <p>Valid on separation Followers only, returns the Leader it is part of.</p> <p><pre><code>AEGP_GetSeparationLeader(\n  AEGP_StreamRefH  follower_streamH,\n  AEGP_StreamRefH  *leader_streamPH);\n</code></pre></p> <p><code>AEGP_GetSeparationDimension</code></p> <p>Valid on separation Followers only, returns which dimension of the Leader it corresponds to.</p> <p><pre><code>AEGP_GetSeparationDimension(\n  AEGP_StreamRefH  follower_streamH,\n  A_short          *dimPS);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#working-with-keyframes","title":"Working With Keyframes","text":"<p>Keyframes make After Effects what it is. AEGPs (and...ssshh, don't tell anyone...effects) can use this suite to add, manipulate and remove keyframes from any keyframe-able stream.</p>"},{"location":"aegps/aegp-suites/#aegp_keyframesuite3","title":"AEGP_KeyframeSuite3","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetStreamNumKFs</code></p> <p>Retrieves the number of keyframes on the given stream.</p> <p>Returns <code>AEGP_NumKF_NO_DATA</code> if the stream is not keyframe-able.</p> <p>Also, note that a stream without keyframes isn't necessarily constant; it can be altered by expressions.</p> <p><pre><code>AEGP_GetStreamNumKFs(\n  AEGP_StreamRefH  streamH,\n  A_long           *num_kfsPL);\n</code></pre></p> <p><code>AEGP_GetKeyframeTime</code></p> <p>Retrieves the time of the specified keyframe.</p> <p><pre><code>AEGP_GetKeyframeTime(\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  index,\n  AEGP_LTimeMode      time_mode,\n  A_Time              *timePT);\n</code></pre></p> <p><code>AEGP_InsertKeyframe</code></p> <p>Adds a keyframe to the specified stream (at the specified composition or layer time).</p> <p>Returns the new keyframe's index.</p> <p>All indexes greater than the new index are now invalid (but you knew that). If there is already a keyframe at that time, the values will be updated.</p> <p><pre><code>AEGP_InsertKeyframe(\n  AEGP_StreamRefH     streamH,\n  AEGP_LTimeMode      time_mode,\n  const A_Time        *timePT,\n  AEGP_KeyframeIndex  *key_indexP);\n</code></pre></p> <p><code>AEGP_DeleteKeyframe</code></p> <p>Deletes the specified keyframe.</p> <p><pre><code>AEGP_DeleteKeyframe(\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index);\n</code></pre></p> <p><code>AEGP_GetNewKeyframeValue</code></p> <p>Creates and populates an <code>AEGP_StreamValue2</code> for the stream's value at the time of the keyframe.</p> <p>The returned <code>AEGP_StreamValue2</code> must be disposed of using <code>AEGP_DisposeStreamValue</code>.</p> <p><pre><code>AEGP_GetNewKeyframeValue(\n  AEGP_PluginID       plugin_id,\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index,\n  AEGP_StreamValue2   *valueP);\n</code></pre></p> <p><code>AEGP_SetKeyframeValue</code></p> <p>Sets the stream's value at the time of the keyframe.</p> <p><pre><code>AEGP_SetKeyframeValue(\n  AEGP_StreamRefH          streamH,\n  AEGP_KeyframeIndex       index,\n  const AEGP_StreamValue2  *valP);\n</code></pre></p> <p><code>AEGP_GetStreamValueDimensionality</code></p> <p>Retrieves the dimensionality of the stream's value.</p> <p><pre><code>AEGP_GetStreamValueDimensionality(\n  AEGP_StreamRefH  streamH,\n  A_short          *value_dimPS);\n</code></pre></p> <p><code>AEGP_GetStreamTemporalDimensionality</code></p> <p>Retrieves the temporal dimensionality of the stream.</p> <p><pre><code>AEGP_GetStreamTemporalDimensionality(\n  AEGP_StreamRefH  streamH,\n  A_short          *t_dimPS);\n</code></pre></p> <p><code>AEGP_GetNewKeyframeSpatialTangents</code></p> <p>Returns the <code>AEGP_StreamValue2s</code> representing the stream's tangential values at the time of the keyframe.</p> <p>The returned <code>AEGP_StreamValue2s</code> must be disposed of using <code>AEGP_DisposeStreamValue</code>.</p> <p><pre><code>AEGP_GetNewKeyframeSpatialTangents(\n  AEGP_PluginID       plugin_id,\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index,\n  AEGP_StreamValue2   *in_tanP0,\n  AEGP_StreamValue2   *out_tanP0);\n</code></pre></p> <p><code>AEGP_SetKeyframeSpatialTangents</code></p> <p>Specifies the tangential <code>AEGP_StreamValue2s</code> to be used for the stream's value at the time of the keyframe.</p> <p>The <code>AEGP_StreamValue2s</code> passed for in and out tangents are not adopted by After Effects, and must be disposed of using <code>AEGP_DisposeStreamValue</code>.</p> <p><pre><code>AEGP_SetKeyframeSpatialTangents(\n  AEGP_StreamRefH          streamH,\n  AEGP_KeyframeIndex       key_index,\n  const AEGP_StreamValue2  *in_tP0,\n  const AEGP_StreamValue2  *out_tP0);\n</code></pre></p> <p>NOTE: In <code>AEGP_KeyframeSuite2</code> and prior versions, the values returned from this function were wrong when called on an effect point control stream or anchor point. They were not multiplied by the layer size. Now they are.</p> <p><code>AEGP_GetKeyframeTemporalEase</code></p> <p>Retrieves the <code>AEGP_KeyframeEases</code> associated with the specified dimension of the stream's value at the time of the keyframe.</p> <p><code>dimensionL</code> ranges from <code>0</code> to <code>(temporal_dimensionality -1)</code>.</p> <p><pre><code>AEGP_GetKeyframeTemporalEase(\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index,\n  A_long              dimensionL,\n  AEGP_KeyframeEase   *in_easeP0,\n  AEGP_KeyframeEase   *out_easeP0);\n</code></pre></p> <p>NOTE: the returned ease values must be multiplied by layer height to match the values displayed in the After Effects UI.</p> <p><code>AEGP_SetKeyframeTemporalEase</code></p> <p>Specifies the <code>AEGP_KeyframeEases</code> to be used for the stream's value at the time of the keyframe.</p> <p><code>dimensionL</code> ranges from <code>0</code> to <code>(temporal_dimensionality -1)</code>.</p> <p>The <code>AEGP_KeyframeEases</code> passed are not adopted by After Effects.</p> <p><pre><code>AEGP_SetKeyframeTemporalEase(\n  AEGP_StreamRefH           streamH,\n  AEGP_KeyframeIndex        key_index,\n  A_long                    dimL,\n  const AEGP_KeyframeEase   *in_P0,\n  const AEGP_KeyframeEase   *outP0);\n</code></pre></p> <p><code>AEGP_GetKeyframeFlags</code></p> <p>Retrieves the flags currently set for the keyframe.</p> <p><pre><code>AEGP_GetKeyframeFlags(\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index,\n  AEGP_KeyframeFlags  *flagsP);\n</code></pre></p> <p><code>*flagsP</code> will be a combination of the following:</p> <ul> <li><code>AEGP_KeyframeFlag_NONE</code></li> <li><code>AEGP_KeyframeFlag_TEMPORAL_CONTINUOUS</code></li> <li><code>AEGP_KeyframeFlag_TEMPORAL_AUTOBEZIER</code></li> <li><code>AEGP_KeyframeFlag_SPATIAL_CONTINUOUS</code></li> <li><code>AEGP_KeyframeFlag_SPATIAL_AUTOBEZIER</code></li> <li><code>AEGP_KeyframeFlag_ROVING</code></li> </ul> <p><code>AEGP_SetKeyframeFlag</code></p> <p>Sets the specified flag for the keyframe. Flags must be set individually.</p> <p><pre><code>AEGP_SetKeyframeFlag(\n  AEGP_StreamRefH     streamH,\n  AEGP_KeyframeIndex  key_index,\n  AEGP_KeyframeFlags  flag,\n  A_Boolean           valueB);\n</code></pre></p> <p><code>AEGP_GetKeyframeInterpolation</code></p> <p>Retrieves the in and out <code>AEGP_KeyframeInterpolationTypes</code> for the specified keyframe.</p> <p><pre><code>AEGP_GetKeyframeInterpolation(\n  AEGP_StreamRefH                 streamH,\n  AEGP_KeyframeIndex              key_index,\n  AEGP_KeyframeInterpolationType  *inP0,\n  AEGP_KeyframeInterpolationType  *outP0);\n</code></pre></p> <p><code>AEGP_KeyframeInterpolationType</code> is one of the following:</p> <ul> <li><code>AEGP_KeyInterp_NONE</code></li> <li><code>AEGP_KeyInterp_LINEAR</code></li> <li><code>AEGP_KeyInterp_BEZIER</code></li> <li><code>AEGP_KeyInterp_HOLD</code></li> </ul> <p><code>AEGP_SetKeyframeInterpolation</code></p> <p>Specifies the in and out <code>AEGP_KeyframeInterpolationTypes</code> to be used for the given keyframe.</p> <p><pre><code>AEGP_SetKeyframeInterpolation(\n  AEGP_StreamRefH                 streamH,\n  AEGP_KeyframeIndex              key_index,\n  AEGP_KeyframeInterpolationType  in_interp,\n  AEGP_KeyframeInterpolationType  out_interp);\n</code></pre></p> <p><code>AEGP_StartAddKeyframes</code></p> <p>Informs After Effects that you're going to be adding several keyframes to the specified stream. After Effects will return an allocated opaque <code>AEGP_AddKeyframesInfoH</code>, for use with the calls below.</p> <p><pre><code>AEGP_StartAddKeyframes(\n  AEGP_StreamRefH         streamH,\n  AEGP_AddKeyframesInfoH  *akPH);\n</code></pre></p> <p><code>AEGP_AddKeyframes</code></p> <p>Adds a keyframe to the specified stream at the specified (layer or composition) time.</p> <p>Note: this doesn't actually do anything to the stream's value.</p> <p><pre><code>AEGP_AddKeyframes(\n  AEGP_AddKeyframesInfoH  akH,\n  AEGP_LTimeMode          time_mode,\n  const A_Time            *timePT,\n  A_long                  *indexPL);\n</code></pre></p> <p><code>AEGP_SetAddKeyframe</code></p> <p>Sets the value of the specified keyframe.</p> <p><pre><code>AEGP_SetAddKeyframe(\n  AEGP_AddKeyframesInfoH   akH,\n  A_long                   indexL,\n  const AEGP_StreamValue2  *valueP);\n</code></pre></p> <p><code>AEGP_EndAddKeyframes</code></p> <p>Tells After Effects you're done adding keyframes.</p> <p><pre><code>AEGP_EndAddKeyframes(\n  A_Boolean               addB,\n  AEGP_AddKeyframesInfoH  akH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#adding-multiple-keyframes","title":"Adding Multiple Keyframes","text":"<p>Each time you call <code>AEGP_InsertKeyframe()</code>, the entire stream is added to the undo stack.</p> <p>If you're adding one or two keyframes, this isn't a problem. However, if you're writing a keyframer, you'll want to do things the *right* way.</p> <p>Before you begin adding keyframes, call the (very-appropriately-named) <code>AEGP_StartAddKeyframes</code>, passing it an opaque <code>AEGP_AddKeyframesInfoH</code>.</p> <p>For each keyframe to add, call <code>AEGP_AddKeyframes</code> to set the time to be used (and get the newly-added keyframe's index), then <code>AEGP_SetAddKeyframe</code> to specify the value to be used.</p> <p>Once you're finished, call <code>AEGP_EndAddKeyframes</code> to let know After Effects know it's time to add the changed parameter stream to the undo stack.</p>"},{"location":"aegps/aegp-suites/#marker-streams","title":"Marker Streams","text":"<p><code>AEGP_MarkerSuite</code> allows for direct manipulation of marker data.</p>"},{"location":"aegps/aegp-suites/#aegp_markersuite2","title":"AEGP_MarkerSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NewMarker</code></p> <p>Creates a new marker.</p> <p><pre><code>AEGP_NewMarker(\n  AEGP_MarkerValP  *markerPP);\n</code></pre></p> <p><code>AEGP_DisposeMarker</code></p> <p>Disposes of a marker.</p> <p><pre><code>AEGP_DisposeMarker(\n  AEGP_MarkerValP  markerP);\n</code></pre></p> <p><code>AEGP_DuplicateMarker</code></p> <p>Duplicates a marker (didn't see *that* one coming, eh?).</p> <p><pre><code>AEGP_DuplicateMarker(\n  AEGP_MarkerValP  markerP,\n  AEGP_MarkerValP  *new_markerP);\n</code></pre></p> <p><code>AEGP_SetMarkerFlag</code></p> <p>Sets a marker flag's value.</p> <p><pre><code>AEGP_SetMarkerFlag(\n  AEGP_MarkerValP      markerP,\n  AEGP_MarkerFlagType  flagType,\n  A_Boolean            valueB);\n</code></pre></p> <p>Currently, AEGP_MarkerFlagType is one of the following:</p> <ul> <li><code>AEGP_MarkerFlag_NONE</code></li> <li><code>AEGP_MarkerFlag_NAVIGATION</code></li> </ul> <p><code>AEGP_GetMarkerFlag</code></p> <p>Gets the value (see above) of a given <code>AEGP_MarkerFlagType</code>.</p> <p><pre><code>AEGP_GetMarkerFlag(\n  AEGP_ConstMarkerValP  markerP,\n  AEGP_MarkerFlagType   flagType\n  A_Boolean             *valueBP);\n</code></pre></p> <p><code>AEGP_GetMarkerString</code></p> <p>Retrieves the UTF-16, NULL-terminated string located in the specified marker field. Must be disposed of by caller using <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetMarkerString(\n  AEGP_PluginID          id,\n  AEGP_ConstMarkerValP   markerP,\n  AEGP_MarkerStringType  strType,\n  AEGP_MemHandle         *unicodePH);\n</code></pre></p> <p><code>AEGP_SetMarkerString</code></p> <p>Sets the specified field of a marker to the provided text.</p> <p><pre><code>AEGP_SetMarkerString(\n  AEGP_MarkerValP        markerP,\n  AEGP_MarkerStringType  strType,\n  const A_u_short        *unicodeP,\n  A_long                 lengthL);\n</code></pre></p> <p><code>AEGP_CountCuePointParams</code></p> <p>Returns the number of cue point parameters.</p> <p><pre><code>AEGP_CountCuePointParams(\n  AEGP_ConstMarkerValP  markerP,\n  A_long                *paramsLP);\n</code></pre></p> <p><code>AEGP_GetIndCuePointParam</code></p> <p>Returns the cue point param at the specified index (which must be between <code>0</code> and <code>(cue point params -1)</code>.</p> <p>Returned handles are UTF-16, NULL-terminated strings, and must be disposed of by caller using <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetIndCuePointParam(\n  AEGP_PluginID         id,\n  AEGP_ConstMarkerValP  markerP,\n  A_long                param_indexL,\n  AEGP_MemHandle        *unicodeKeyPH,\n  AEGP_MemHandle        *uni_ValuePH);\n</code></pre></p> <p><code>AEGP_SetIndCuePointParam</code></p> <p>Set the value of an indexed cue point parameter to the specified value.</p> <p><code>key_lengthL</code> is \"number of unicode characters\", and <code>value_lenL</code> is the length of the provided value.</p> <p><code>unicode_KeyP</code> and <code>unicode_ValueP</code> point to UTF-16 data.</p> <p><pre><code>AEGP_SetIndCuePointParam(\n  AEGP_MarkerValP  markerP,\n  A_long           param_idxL,\n  const A_u_short  *unicode_KeyP,\n  A_long           key_lengthL,\n  const A_u_short  *unicode_ValueP,\n  A_long           value_lengthL);\n</code></pre></p> <p><code>AEGP_InsertCuePointParam</code></p> <p>Inserts a cue point parameter.</p> <p>This call is following by <code>AEGP_SetIndCuePointParam</code> to actually set the data.</p> <p><pre><code>AEGP_InsertCuePointParam(\n  AEGP_MarkerValP  markerP,\n  A_long           param_idxL);\n</code></pre></p> <p><code>AEGP_DeleteIndCuePointParam</code></p> <p>Deletes the cue point param at the specified index.</p> <p><pre><code>AEGP_DeleteIndCuePointParam(\n  AEGP_MarkerValP  markerP,\n  A_long           param_idxL);\n</code></pre></p> <p><code>AEGP_SetMarkerDuration</code></p> <p><pre><code>AEGP_SetMarkerDuration(\n  AEGP_MarkerValP  markerP,\n  const A_Time     *durationPT);\n</code></pre></p> <p><code>AEGP_GetMarkerDuration</code></p> <p><pre><code>AEGP_GetMarkerDuration(\n  AEGP_ConstMarkerValP  markerP,\n  A_Time                *durationPT);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#mask-management","title":"Mask Management","text":"<p>Access, manipulate, and delete a layer's masks.</p>"},{"location":"aegps/aegp-suites/#aegp_masksuite6","title":"AEGP_MaskSuite6","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetLayerNumMasks</code></p> <p>Counts the masks applied to a layer,</p> <p><pre><code>AEGP_GetLayerNumMasks(\n  AEGP_LayerH  aegp_layerH,\n  A_long       *num_masksPL);\n</code></pre></p> <p><code>AEGP_GetLayerMaskByIndex</code></p> <p>Given a layer handle and mask index, returns a pointer to the mask handle. You must destroy the mask handle by using <code>AEGP_DisposeMask()</code>.</p> <p><pre><code>AEGP_GetLayerMaskByIndex(\n  AEGP_LayerH    aegp_layerH,\n  A_long         mask_indexL,\n  AEGP_MaskRefH  *maskPH);\n</code></pre></p> <p><code>AEGP_DisposeMask</code></p> <p>Dispose of a mask handle.</p> <p><pre><code>AEGP_DisposeMask(\n  AEGP_MaskRefH  maskH);\n</code></pre></p> <p><code>AEGP_GetMaskInvert</code></p> <p>Given a mask handle, determines if the mask is inverted or not.</p> <p><pre><code>AEGP_GetMaskInvert(\n  AEGP_MaskRefH  maskH,\n  A_Boolean      *invertPB);\n</code></pre></p> <p><code>AEGP_SetMaskInvert</code></p> <p>Sets the inversion state of a mask.</p> <p><pre><code>AEGP_SetMaskInvert(\n  AEGP_MaskRefH  mask_refH,\n  A_Boolean      invertB);\n</code></pre></p> <p><code>AEGP_GetMaskMode</code></p> <p>Given a mask handle, returns the current mode of the mask.</p> <p><code>PF_MaskMode_NONE</code> does nothing, <code>PF_MaskMode_ADD</code> is the default behavior.</p> <ul> <li><code>PF_MaskMode_NONE</code></li> <li><code>PF_MaskMode_ADD</code></li> <li><code>PF_MaskMode_SUBTRACT</code></li> <li><code>PF_MaskMode_INTERSECT</code></li> <li><code>PF_MaskMode_LIGHTEN</code></li> <li><code>PF_MaskMode_DARKEN</code></li> <li><code>PF_MaskMode_DIFFERENCE</code></li> </ul> <p><pre><code>AEGP_GetMaskMode(\n  AEGP_MaskRefH  maskH,\n  PF_MaskMode    *modeP);\n</code></pre></p> <p><code>AEGP_SetMaskMode</code></p> <p>Sets the mode of the given mask.</p> <p><pre><code>AEGP_SetMaskMode(\n  AEGP_MaskRefH  maskH,\n  PF_MaskMode    mode);\n</code></pre></p> <p><code>AEGP_GetMaskMotionBlurState</code></p> <p>Retrieves the motion blur setting for the given mask.</p> <p><pre><code>AEGP_GetMaskMotionBlurState(\n  AEGP_MaskRefH   mask_refH,\n  AEGP_MaskMBlur  *blur_stateP);\n</code></pre></p> <p><code>AEGP_MaskMBlur</code> will be one of the following:</p> <ul> <li><code>AEGP_MaskMBlur_SAME_AS_LAYER</code></li> <li><code>AEGP_MaskMBlur_OFF</code></li> <li><code>AEGP_MaskMBlur_ON</code></li> </ul> <p><code>AEGP_SetMaskMotionBlurState</code></p> <p>New in CS6. Sets the motion blur setting for the given mask.</p> <p><pre><code>AEGP_SetMaskMotionBlurState(\n  AEGP_MaskRefH   mask_refH,\n  AEGP_MaskMBlur  blur_state);\n</code></pre></p> <p><code>AEGP_GetMaskFeatherFalloff</code></p> <p>New in CS6. Gets the type of feather falloff for the given mask, either <code>AEGP_MaskFeatherFalloff_SMOOTH</code> or <code>AEGP_MaskFeatherFalloff_LINEAR</code>.</p> <p><pre><code>AEGP_SetMaskMotionBlurState(\n  AEGP_MaskRefH            mask_refH,\n  AEGP_MaskFeatherFalloff  *feather_falloffP);\n</code></pre></p> <p><code>AEGP_SetMaskFeatherFalloff</code></p> <p>Sets the type of feather falloff for the given mask.</p> <p><pre><code>AEGP_SetMaskMotionBlurState(\n  AEGP_MaskRefH            mask_refH,\n  AEGP_MaskFeatherFalloff  feather_falloff);\n</code></pre></p> <p><code>AEGP_GetMaskName</code></p> <p>Removed in CS4. Use <code>AEGP_GetNewStreamRefForMask</code> and the name functions in the Dynamic Stream Suite instead.</p> <p><code>AEGP_SetMaskName</code></p> <p><code>AEGP_GetMaskID</code></p> <p>Retrieves the <code>AEGP_MaskIDVal</code> for the given <code>AEGP_MaskRefH</code>, for use in uniquely identifying the mask.</p> <p><pre><code>AEGP_GetMaskID(\n  AEGP_MaskRefH   mask_refH,\n  AEGP_MaskIDVal  *id_valP);\n</code></pre></p> <p><code>AEGP_CreateNewMask</code></p> <p>Creates a new mask on the referenced <code>AEGP_LayerH</code>, with zero nodes. The new mask's index is returned.</p> <p><pre><code>AEGP_CreateNewMask(\n  AEGP_LayerH    layerH,\n  AEGP_MaskRefH  *mask_refPH,\n  A_long         *mask_indexPL0);\n</code></pre></p> <p><code>AEGP_DeleteMaskFromLayer</code></p> <p><pre><code>AEGP_DeleteMaskFromLayer(\n  AEGP_MaskRefH  mask_refH);\n</code></pre></p> <p>NOTE: As of 6.5, if you delete a mask and it or a child stream is selected, the current selection within the composition will become NULL.</p> <p><code>AEGP_GetMaskColor</code></p> <p>Retrieves the color of the specified mask.</p> <p><pre><code>AEGP_GetMaskColor(\n  AEGP_MaskRefH  mask_refH,\n  AEGP_ColorVal  *colorP);\n</code></pre></p> <p><code>AEGP_SetMaskColor</code></p> <p>Sets the color of the specified mask.</p> <p><pre><code>AEGP_SetMaskColor(\n  AEGP_MaskRefH        mask_refH,\n  const AEGP_ColorVal  *colorP);\n</code></pre></p> <p><code>AEGP_GetMaskLockState</code></p> <p>Retrieves the lock state of the specified mask.</p> <p><pre><code>AEGP_GetMaskLockState(\n  AEGP_MaskRefH  mask_refH,\n  A_Boolean      *is_lockedPB);\n</code></pre></p> <p><code>AEGP_SetMaskLockState</code></p> <p>Sets the lock state of the specified mask.</p> <p><pre><code>AEGP_SetMaskLockState(\n  AEGP_MaskRefH  mask_refH,\n  A_Boolean      lockB);\n</code></pre></p> <p><code>AEGP_GetMaskIsRotoBezier</code></p> <p>Returns whether or not the given mask is used as a rotobezier.</p> <p><pre><code>AEGP_GetMaskIsRotoBezier(\n  AEGP_MaskRefH  mask_refH,\n  A_Boolean      *is_roto_bezierPB);\n</code></pre></p> <p><code>AEGP_SetMaskIsRotoBezier</code></p> <p>Sets whether a given mask is to be used as a rotobezier.</p> <p><pre><code>AEGP_SetMaskIsRotoBezier(\n  AEGP_MaskRefH  mask_refH,\n  A_Boolean      *is_roto_bezierPB);\n</code></pre></p> <p><code>AEGP_DuplicateMask</code></p> <p>Duplicates a given <code>AEGP_MaskRefH</code>. Caller must dispose of duplicate.</p> <p><pre><code>AEGP_DuplicateMask(\n  AEGP_MaskRefH  orig_mask_refH,\n  AEGP_MaskRefH  *dupe_mask_refPH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#mask-outlines","title":"Mask Outlines","text":"<p>The Mask Suite above tells plug-ins about the masks on a layer, but not about the details of those masks.</p> <p>This is because processing is required on After Effects' part to access the information; the information isn't just lying around.</p> <p>Plug-ins access that information using this Mask Outline Suite.</p>"},{"location":"aegps/aegp-suites/#aegp_maskoutlinesuite3","title":"AEGP_MaskOutlineSuite3","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_IsMaskOutlineOpen</code></p> <p>Given an mask outline pointer (obtainable through the Stream Suite), determines if the mask path is open or closed.</p> <p><pre><code>AEGP_IsMaskOutlineOpen(\n  AEGP_MaskOutlineVal  *mask_outlineP,\n  A_Boolean            *openPB);\n</code></pre></p> <p><code>AEGP_SetMaskOutlineOpen</code></p> <p>Sets the open state of the given mask outline.</p> <p><pre><code>AEGP_SetMaskOutlineOpen(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  A_Boolean             openB);\n</code></pre></p> <p><code>AEGP_GetMaskOutlineNumSegments</code></p> <p>Given a mask outline pointer, returns the number of segments in the path.</p> <p><code>num_segmentsPL</code> is the total number of segments <code>[0...N-1]</code>.</p> <p><pre><code>AEGP_GetMaskOutlineNumSegments(\n  AEGP_MaskOutlineVal  *mask_outlineP,\n  A_long               *num_segmentsPL);\n</code></pre></p> <p><code>AEGP_GetMaskOutlineVertexInfo</code></p> <p>Given a mask outline pointer and a point between 0 and the total number of segments.</p> <p>For closed mask paths, <code>vertex[0]</code> is the same as <code>vertex[num_segments]</code>.</p> <p><pre><code>AEGP_GetMaskOutlineVertexInfo(\n  AEGP_MaskOutlineVal  *mask_outlineP,\n  A_long               which_pointL,\n  AEGP_MaskVertex      *vertexP);\n</code></pre></p> <p><code>AEGP_SetMaskOutlineVertexInfo</code></p> <p>Sets the vertex information for a given index.</p> <p>Setting vertex 0 is special; its in tangent will actually set the out tangent of the last vertex in the outline.</p> <p>Of course, <code>which_pointL</code> must be valid for the mask outline, or the function will return an error.</p> <p><pre><code>AEGP_SetMaskOutlineVertexInfo(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  AEGP_VertexIndex      which_pointL,\n  AEGP_MaskVertex       *vertexP);\n</code></pre></p> <p><code>AEGP_CreateVertex</code></p> <p>Creates a vertex at index position.</p> <p>All vertices which formerly had an <code>AEGP_VertexIndex</code> of position or greater will have their indices incremented by one.</p> <p><pre><code>AEGP_CreateVertex(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  AEGP_VertexIndex      position);.\n</code></pre></p> <p>NOTE: All masks must have at least one vertex.</p> <p><code>AEGP_DeleteVertex</code></p> <p>Removes a vertex from a mask.</p> <p><pre><code>AEGP_DeleteVertex(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  AEGP_VertexIndex      index);\n</code></pre></p> <p><code>AEGP_GetMaskOutlineNumFeathers</code></p> <p>New in CS6.</p> <p><pre><code>AEGP_DeleteVertex(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  A_long                *num_feathersPL);\n</code></pre></p> <p><code>AEGP_GetMaskOutlineFeatherInfo</code></p> <p>New in CS6.</p> <p><pre><code>AEGP_GetMaskOutlineFeatherInfo(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  AEGP_FeatherIndex     which_featherL,\n  AEGP_MaskFeather      *featherP);\n</code></pre></p> <p><code>AEGP_SetMaskOutlineFeatherInfo</code></p> <p>New in CS6. Feather must already exist; use <code>AEGP_CreateMaskOutlineFeather</code> first, if needed.</p> <p><pre><code>AEGP_SetMaskOutlineFeatherInfo(\n  AEGP_MaskOutlineValH    mask_outlineH,\n  AEGP_VertexIndex        which_featherL,\n  const AEGP_MaskFeather  *featherP);\n</code></pre></p> <p><code>AEGP_CreateMaskOutlineFeather</code></p> <p>New in CS6. Index of new feather is passed back in <code>insert_positionP</code>.</p> <p><pre><code>AEGP_CreateMaskOutlineFeather(\n  AEGP_MaskOutlineValH    mask_outlineH,\n  const AEGP_MaskFeather  *featherP0,\n  AEGP_FeatherIndex       *insert_positionP);\n</code></pre></p> <p><code>AEGP_DeleteMaskOutlineFeather</code></p> <p>New in CS6.</p> <p><pre><code>AEGP_DeleteMaskOutlineFeather(\n  AEGP_MaskOutlineValH  mask_outlineH,\n  AEGP_FeatherIndex     index);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#mask-feathering","title":"Mask Feathering","text":"<p>New for CS6, masks can be feathered.</p> <p><code>AEGP_MaskFeather</code> is defined as follows:</p> <pre><code>typedef struct {\n    A_long                  segment;          // mask segment where feather is\n    PF_FpLong               segment_sF;       // 0-1: feather location on segment\n    PF_FpLong               radiusF;          // negative value allowed if type == AEGP_MaskFeatherType_INNER\n    PF_FpShort              ui_corner_angleF; // 0-1: angle of UI handle on corners\n    PF_FpShort              tensionF;         // 0-1: tension of boundary at feather pt\n    AEGP_MaskFeatherInterp  interp;\n    AEGP_MaskFeatherType    type;\n} AEGP_MaskFeather;\n</code></pre> <p><code>AEGP_MaskFeatherInterp</code> is either <code>AEGP_MaskFeatherInterp_NORMAL</code> or <code>AEGP_MaskFeatherInterp_HOLD_CW</code>.</p> <p><code>AEGP_MaskFeatherType</code> is either <code>AEGP_MaskFeatherType_OUTER</code> or <code>AEGP_MaskFeatherType_INNER</code>.</p> <p>This suite enables AEGPs to get and set the text associated with text layers.</p> <p>Note: to get started, retrieve an <code>AEGP_TextDocumentH</code> by calling <code>AEGP_GetLayerStreamValue</code>, above, and passing <code>AEGP_StreamType_TEXT_DOCUMENT</code> as the <code>AEGP_StreamType</code>.</p>"},{"location":"aegps/aegp-suites/#working-with-text-layers","title":"Working With Text Layers","text":"<p>This suite enables AEGPs to get and set the text associated with text layers.</p>"},{"location":"aegps/aegp-suites/#aegp_textdocumentsuite1","title":"AEGP_TextDocumentSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetNewText</code></p> <p>Retrieves the UTF-16, NULL-terminated string used in the <code>AEGP_TextDocumentH</code>.</p> <p>Note: After Effects will allocate the <code>AEGP_MemHandle</code>; your plug-in must dispose of it when done using <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetNewText(\n  AEGP_PluginID       id,\n  AEGP_TextDocumentH  text_docH,\n  AEGP_MemHandle      *unicodePH);\n</code></pre></p> <p><code>AEGP_SetText</code></p> <p>Specifies the text to be used by the <code>AEGP_TextDocumentH</code>.</p> <p><pre><code>AEGP_SetText(\n  AEGP_TextDocumentH  text_docH,\n  const A_u_short     *unicodePS,\n  long                lengthL);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#working-with-text-outlines","title":"Working With Text Outlines","text":"<p>The <code>AEGP_TextLayerSuite</code> provides access to the actual outlines of the text used by text layers.</p> <p>Once you have a path, you can manipulate it with PF_PathQuerySuite1 and PF_PathDataSuite.</p>"},{"location":"aegps/aegp-suites/#aegp_textlayersuite1","title":"AEGP_TextLayerSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetNewTextOutlines</code></p> <p>Allocates and returns a handle to the <code>AEGP_TextOutlinesHs</code> associated with the specified layer.</p> <p><code>outlinesPH</code> will be NULL if there are no <code>AEGP_TextOutlinesHs</code> associated with <code>layerH</code> (in other words, if it's not a text layer).</p> <p><pre><code>AEGP_GetNewTextOutlines(\n  AEGP_LayerH         layerH,\n  const A_Time        *layer_timePT,\n  AEGP_TextOutlinesH  *outlinesPH);\n</code></pre></p> <p><code>AEGP_DisposeTextOutlines</code></p> <p>Dispose of those outlines we allocated on your behalf!</p> <p><pre><code>AEGP_DisposeTextOutlines(\n  AEGP_TextOutlinesH  outlinesH);\n</code></pre></p> <p><code>AEGP_GetNumTextOutlines</code></p> <p>Retrieves the number of text outlines for the layer.</p> <p><pre><code>AEGP_GetNumTextOutlines(\n  AEGP_TextOutlinesH  outlinesH,\n  A_long              *num_otlnsPL);\n</code></pre></p> <p><code>AEGP_GetIndexedTextOutline</code></p> <p>Returns a <code>PF_PathOutlinePtr</code> for the specifed text outline.</p> <p><pre><code>AEGP_GetIndexedTextOutline(\n  AEGP_TextOutlinesH  outlinesH,\n  A_long              path_indexL,\n  PF_PathOutlinePtr   *pathPP);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#utility-functions","title":"Utility Functions","text":"<p>The Utility suite supplies error message handling, AEGP version checking and access to the undo stack.</p> <p>Everything you need to keep After Effects and your plug-in tidy.</p>"},{"location":"aegps/aegp-suites/#aegp_utilitysuite6","title":"AEGP_UtilitySuite6","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_ReportInfo</code></p> <p>Displays dialog with name of the AEGP followed by the string passed.</p> <p><pre><code>AEGP_ReportInfo(\n  AEGP_PluginID  aegp_plugin_id,\n  const A_char   *info_stringZ);\n</code></pre></p> <p><code>AEGP_ReportInfoUnicode</code></p> <p>New in CC. Displays dialog with name of the AEGP followed by the unicode string passed.</p> <p><pre><code>AEGP_ReportInfoUnicode(\n  AEGP_PluginID      aegp_plugin_id,\n  const A_UTF16Char  *info_stringP);\n</code></pre></p> <p><code>AEGP_GetDriverSpecVersion</code></p> <p>Returns version of <code>AEGPDriver</code> plug-in (use to determine supported features).</p> <p><pre><code>AEGP_GetDriverSpecVersion(\n  A_short  *major_versionPS,\n  A_short  *minor_versionPS);\n</code></pre></p> <p><code>AEGP_StartQuietErrors</code></p> <p>Silences errors. Must be balanced with <code>AEGP_EndQuietErrors</code>.</p> <p>The <code>AEGP_ErrReportState</code> is an opaque structure private to After Effects.</p> <p><pre><code>AEGP_StartQuietErrors(\n  AEGP_ErrReportState  *err_stateP);\n</code></pre></p> <p><code>AEGP_EndQuietErrors</code></p> <p>Re-enables errors.</p> <p><pre><code>AEGP_EndQuietErrors(\n  AEGP_ErrReportState  *err_stateP)\n</code></pre></p> <p><code>AEGP_StartUndoGroup</code></p> <p>Add action(s) to the undo queue. The user may undo any actions between this and <code>AEGP_EndUndoGroup()</code>.</p> <p>The <code>undo_nameZ</code> will appear in the edit menu.</p> <p><pre><code>AEGP_StartUndoGroup(\n  const A_char  *undo_nameZ);\n</code></pre></p> <p><code>AEGP_EndUndoGroup</code></p> <p>Ends the undo list.</p> <p><pre><code>AEGP_EndUndoGroup();\n</code></pre></p> <p><code>AEGP_RegisterWithAEGP</code></p> <p>Returns an AEGP_PluginID, which effect plug-ins can then use in calls to many functions throughout the AEGP API.</p> <p>Effects should only call this function once, during <code>PF_Cmd_GLOBAL_SETUP</code>, and save the <code>AEGP_PluginID</code> for later use.</p> <p>The first parameter can be any value, and the second parameter should be the plug-in's match name.</p> <p><pre><code>AEGP_RegisterWithAEGP(\n  AEGP_GlobalRefcon  global_refcon,\n  const A_char       *plugin_nameZ,\n  AEGP_PluginID      *plugin_id);\n</code></pre></p> <p><code>AEGP_GetMainHWND</code></p> <p>Retrieves After Effects' HWND; useful when displaying your own dialog on Windows.</p> <p>If you don't use After Effects' HWND, your modal dialog will not prevent interaction with the windows behind, and pain will ensue.</p> <p><pre><code>AEGP_GetMainHWND(\n  void  *main_hwnd);\n</code></pre></p> <p><code>AEGP_ShowHideAllFloaters</code></p> <p>Toggles whether or not floating palettes are displayed.</p> <p>Use this with care; users get twitchy when you unexpectedly change the UI on them.</p> <p><pre><code>AEGP_ShowHideAllFloaters(\n  A_Boolean  include_tool_palB);\n</code></pre></p> <p><code>AEGP_PaintPalGetForeColor</code></p> <p>Retrieves the foreground color from the paint palette.</p> <p><pre><code>AEGP_PaintPalGetForeColor(\n  AEGP_ColorVal  *fore_colorP);\n</code></pre></p> <p><code>AEGP_PaintPalGetBackColor</code></p> <p>Retrieves the background color from the paint palette.</p> <p><pre><code>AEGP_PaintPalGetBackColor(\n  AEGP_ColorVal  *back_colorP);\n</code></pre></p> <p><code>AEGP_PaintPalSetForeColor</code></p> <p>Sets the foreground color in the paint palette.</p> <p><pre><code>AEGP_PaintPalSetForeColor(\n  const AEGP_ColorVal  *fore_colorP);\n</code></pre></p> <p><code>AEGP_PaintPalSetBackColor</code></p> <p>Sets the background color in the paint palette.</p> <p><pre><code>AEGP_PaintPalSetBackColor(\n  const AEGP_ColorVal  *back_colorP);\n</code></pre></p> <p><code>AEGP_CharPalGetFillColor</code></p> <p>Retrieves the fill color from the character palette.</p> <p><pre><code>AEGP_CharPalGetFillColor(\n  A_Boolean     *is_fcolor_definedPB,\n  AEGP_ColorVal *fill_colorP);\n</code></pre></p> <p><code>AEGP_CharPalGetStrokeColor</code></p> <p>Retrieves the stroke color from the character palette.</p> <p><pre><code>AEGP_CharPalGetStrokeColor(\n  A_Boolean      *is_scolor_definedPB,\n  AEGP_ColorVal  *stroke_colorP);\n</code></pre></p> <p><code>AEGP_CharPalSetFillColor</code></p> <p>Sets the fill color in the character palette.</p> <p><pre><code>AEGP_CharPalSetFillColor(\n  const AEGP_ColorVal  *fill_colorP);\n</code></pre></p> <p><code>AEGP_CharPalSetStrokeColor</code></p> <p>Sets the stroke color in the character palette.</p> <p><pre><code>AEGP_CharPalSetStrokeColor(\n  const AEGP_ColorVal  *stroke_colorP);\n</code></pre></p> <p><code>AEGP_CharPalIsFillColorUIFrontmost</code></p> <p>Returns whether or not the fill color is frontmost. If it isn't, the stroke color is frontmost.</p> <p><pre><code>AEGP_CharPalIsFillColorUIFrontmost(\n  A_Boolean  *is_fcolor_selectedPB);\n</code></pre></p> <p><code>AEGP_ConvertFpLongToHSFRatio</code></p> <p>Returns an <code>A_Ratio</code> interpretation of the given <code>A_FpLong</code>. Useful for horizontal scale factor interpretation.</p> <p><pre><code>AEGP_ConvertFpLongToHSFRatio(\n  A_FpLong  numberF,\n  A_Ratio   *ratioPR);\n</code></pre></p> <p><code>AEGP_ConvertHSFRatioToFpLong</code></p> <p>Returns an <code>A_FpLong</code> interpretation of the given <code>A_Ratio</code>. Useful for horizontal scale factor interpretation.</p> <p><pre><code>AEGP_ConvertHSFRatioToFpLong(\n  A_Ratio    ratioR,\n  A_FpLong  *numberPF);\n</code></pre></p> <p><code>AEGP_CauseIdleRoutinesToBeCalled</code></p> <p>This routine is safe to call from threads other than the main thread. It is asynchronous and will return before the idle handler is called.</p> <p>The suite functions to get this function pointer are not thread safe; save it off in the main thread for use by the child thread.</p> <p><pre><code>AEGP_CauseIdleRoutinesToBeCalled(void);\n</code></pre></p> <p><code>AEGP_GetSuppressInteractiveUI</code></p> <p>Returns whether After Effects is running without a user interface.</p> <p><pre><code>AEGP_GetSuppressInteractiveUI(\n  A_Boolean  *ui_is_suppressedPB);\n</code></pre></p> <p><code>AEGP_WriteToOSConsole</code></p> <p>Sends a string to the OS console.</p> <p><pre><code>AEGP_WriteToOSConsole(\n  const A_char  *textZ);\n</code></pre></p> <p><code>AEGP_WriteToDebugLog</code></p> <p>Writes a message to the debug log, or to the OS command line if After Effects was launched with the \"-debug\" option.</p> <p><pre><code>AEGP_WriteToDebugLog(\n  const A_char  *subsystemZ,\n  const A_char  *event_typeZ,\n  const A_char  *infoZ);\n</code></pre></p> <p><code>AEGP_GetLastErrorMessage</code></p> <p>Retrieves the last error message displayed to the user, and its associated error number. Pass in the size of the character buffer to be returned.</p> <p><pre><code>AEGP_GetLastErrorMessage(\n  A_long  buffer_size,\n  A_char  *error_string,\n  A_Err   *error_num);\n</code></pre></p> <p><code>AEGP_IsScriptingAvailable</code></p> <p>Returns <code>TRUE</code> if scripting is available to the plug-in.</p> <p><pre><code>AEGP_IsScriptingAvailable(\n  A_Boolean  *outAvailablePB);\n</code></pre></p> <p><code>AEGP_ExecuteScript</code></p> <p>Have After Effects execute a script. The script passed in can be in either UTF-8 or the current application encoding (if platform_encodingB is passed in as TRUE).</p> <p>The two out arguments are optional. The value of the last line of the script is what is passed back in outResultPH0.</p> <p><pre><code>AEGP_ExecuteScript(\n  AEGP_PluginID inPlugin_id,\n  const A_char *inScriptZ,\n  const A_Boolean platform_encodingB,\n  AEGP_MemHandle *outResultPH0,\n  AEGP_MemHandle *outErrStringPH0);\n</code></pre></p> <p><code>AEGP_HostIsActivated</code></p> <p>Returns <code>TRUE</code> if the user has successfully activated After Effects.</p> <p><pre><code>AEGP_HostIsActivated(\n  A_Boolean  *is_activatedPB);\n</code></pre></p> <p><code>AEGP_GetPluginPlatformRef</code></p> <p>On macOS, returns a <code>CFBundleRef</code> to your Mach-O plug-in, or NULL for a CFM plug-in.</p> <p>Always returns <code>NULL</code> on Windows (you can use an OS-specific entry point to capture your DLLInstance).</p> <p><pre><code>AEGP_GetPluginPlatformRef(\n  AEGP_PluginID  plug_id,\n  void           *plat_refPPV);\n</code></pre></p> <p><code>AEGP_UpdateFontList</code></p> <p>Rescans the system font list.</p> <p><pre><code>AEGP_UpdateFontList();\n</code></pre></p> <p><code>AEGP_GetPluginPaths</code></p> <p>New in CC. Returns a particular path associated with the plug-in:</p> <ul> <li><code>AEGP_GetPathTypes_PLUGIN</code> - (Not Implemented) The path to the location of the plug-in itself.</li> <li><code>AEGP_GetPathTypes_USER_PLUGIN</code> -The suite specific location of user specific plug-ins.</li> <li><code>AEGP_GetPathTypes_ALLUSER_PLUGIN</code> - The suite specific location of plug-ins shared by all users.</li> <li><code>AEGP_GetPathTypes_APP</code> - The After Effects .exe or .app location. Not plug-in specific.</li> </ul> <p><pre><code>AEGP_GetPluginPaths(\n  AEGP_PluginID      aegp_plugin_id,\n  AEGP_GetPathTypes  path_type\n  AEGP_MemHandle     *unicode_pathPH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#persistent-data-suite","title":"Persistent Data Suite","text":"<p>Plug-ins have read and write access to persistent data in After Effects' preferences. AEGPs may add and manage their own persistent data using the following suite. The data entries are accessed by (section key, value key) pairs. It is recommended that plug-ins use their matchname as their section key, or as a prefix if using multiple section keys.</p> <p>The available data types are <code>A_long</code>, <code>A_FpLong</code>, strings, and <code>void*</code>. <code>A_FpLongs</code> are stored with 6 decimal places of precision. There is no provision for specifying a different precision. String data supports the full 8-bit space. Only 0x00 is reserved for string ending. This makes them ideal for storing UTF-8 encoded strings, ISO 8859-1, and plain ASCII. Both section keys and value keys are of this type. For data types not represented by the simple data types provided, use data handles containing your custom data. void* unstructured data allows you to store any kind of data. You must pass in a size in bytes along with the data.</p> <p>When calling any of the functions to retrieve the value of a key, if a given key is not found, the default value is both written to the blob and returned as the value; if no default is provided, a blank value will be written and returned.</p> <p>Note that this data is stored in the application's preferences, not in the project. As of 6.5, there is no way to store opaque AEGP-generated data in an After Effects project.</p> <p>After Effects can handle plug-ins which change the preferences during their application; it checks the in-RAM copy of the prefs before acting upon pref-able settings, rather than relying on the saved prefs. It's like we *planned* this, or something!</p>"},{"location":"aegps/aegp-suites/#aegp_persistentdatesuite4","title":"AEGP_PersistentDateSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetApplicationBlob</code></p> <p>Obtains the handle to all persistent application data. Modifying this will modify the application.</p> <p>The <code>AEGP_PersistentType</code> parameter is new in CC, and should be set to one of the following:</p> <ul> <li><code>AEGP_PersistentType_MACHINE_SPECIFIC</code></li> <li><code>AEGP_PersistentType_MACHINE_INDEPENDENT</code></li> <li><code>AEGP_PersistentType_MACHINE_INDEPENDENT_RENDER</code></li> <li><code>AEGP_PersistentType_MACHINE_INDEPENDENT_OUTPUT</code></li> <li><code>AEGP_PersistentType_MACHINE_INDEPENDENT_COMPOSITION</code></li> <li><code>AEGP_PersistentType_MACHINE_SPECIFIC_TEXT</code></li> <li><code>AEGP_PersistentType_MACHINE_SPECIFIC_PAINT</code></li> </ul> <p><pre><code>AEGP_GetApplicationBlob(\n  AEGP_PersistentType   blob_type,\n  AEGP_PersistentBlobH  *blobPH);\n</code></pre></p> <p><code>AEGP_GetNumSections</code></p> <p>Obtains the number of sections in the application blob.</p> <p><pre><code>AEGP_GetNumSections(\n  AEGP_PersistentBlobH  blobH,\n  A_long                *num_sectionPL);\n</code></pre></p> <p><code>AEGP_GetSectionKeyByIndex</code></p> <p>Obtains the key at the given index.</p> <p><pre><code>AEGP_GetSectionKeyByIndex(\n  AEGP_PersistentBlobH  blobH,\n  A_long                section_index,\n  A_long                max_section_size,\n  A_char                *section_keyZ);\n</code></pre></p> <p><code>AEGP_DoesKeyExist</code></p> <p>Returns whether or not a given key/value pair exists with the blob.</p> <p><pre><code>AEGP_DoesKeyExist(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_Boolean             *existsPB);\n</code></pre></p> <p><code>AEGP_GetNumKeys</code></p> <p>Retrieves the number of value keys in the section.</p> <p><pre><code>AEGP_GetNumKeys(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  A_long                *num_keysPL);\n</code></pre></p> <p><code>AEGP_GetValueKeyByIndex</code></p> <p>Retrieves the value of the indexed key.</p> <p><pre><code>AEGP_GetValueKeyByIndex(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  A_long                key_index,\n  A_long                max_key_size,\n  A_char                *value_keyZ);\n</code></pre></p> <p>Note</p> <p>For the functions below, if a given key is not found, the default value is both written to the blob and returned as the value; if no default is provided, a blank value will be written and returned.</p> <p>Function</p> <p>Purpose</p> <p><code>AEGP_GetDataHandle</code></p> <p>Obtains the value associated with the given section's key. If using in-memory data structures, watch for endian issues.</p> <p><pre><code>AEGP_GetDataHandle(\n  AEGP_PluginID         plugin_id,\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  AEGP_MemHandle        defaultH0,\n  AEGP_MemHandle        *valuePH);\n</code></pre></p> <p><code>AEGP_GetData</code></p> <p>Obtains the data located at a given section's value.</p> <p><pre><code>AEGP_GetData(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_u_long              data_sizeLu,\n  const void            *defaultPV0,\n  void                  *bufPV);\n</code></pre></p> <p><code>AEGP_GetString</code></p> <p>Obtains the string for a given section key's value (and indicates its length in <code>actual_szLu0</code>).</p> <p><pre><code>AEGP_GetString(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  const A_char          *defaultZ0,\n  A_u_long              buf_sizeLu,\n  char                  *bufZ,\n  A_u_long              *actual_szLu0);\n</code></pre></p> <p><code>AEGP_GetLong</code></p> <p>Obtains the <code>A_long</code> associated with a given section key's value.</p> <p><pre><code>AEGP_GetLong(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_long                defaultL,\n  A_long                *valuePL);\n</code></pre></p> <p><code>AEGP_GetFpLong</code></p> <p>Obtains the <code>A_FpLong</code> associated with a given section key's value.</p> <p><pre><code>AEGP_GetFpLong(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_FpLong              defaultF,\n  A_FpLong              *valuePF);\n</code></pre></p> <p><code>AEGP_GetTime</code></p> <p>New in CC. Obtains the <code>A_Time</code> associated with a given section key's value.</p> <p><pre><code>AEGP_GetTime(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  const A_Time          *defaultPT0,\n  A_Time                *valuePT);\n</code></pre></p> <p><code>AEGP_GetARGB</code></p> <p>New in CC. Obtains the <code>PF_PixelFloat</code> associated with a given section key's value.</p> <p><pre><code>AEGP_GetARGB(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  const PF_PixelFloat   *defaultP0,\n  PF_PixelFloat         *valueP);\n</code></pre></p> <p><code>AEGP_SetDataHandle</code></p> <p>Sets the given section key's value to the handle passed in.</p> <p><pre><code>AEGP_SetDataHandle(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  const AEGP_MemHandle  valueH);\n</code></pre></p> <p><code>AEGP_SetData</code></p> <p>Sets the given section key's value to the data contained in <code>dataPV</code>.</p> <p><pre><code>AEGP_SetData(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_u_long              data_sizeLu,\n  const void            *dataPV);\n</code></pre></p> <p><code>AEGP_SetString</code></p> <p>Sets the given section key's string to <code>strZ</code>.</p> <p><pre><code>AEGP_SetString(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  const A_char          *strZ);\n</code></pre></p> <p><code>AEGP_SetLong</code></p> <p>Sets the given section key's value to <code>valueL</code>.</p> <p><pre><code>AEGP_SetLong(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_long                valueL);\n</code></pre></p> <p><code>AEGP_SetFpLong</code></p> <p>Sets the given section key's value to <code>valueF</code>.</p> <p><pre><code>AEGP_SetFpLong(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_FpLong              valueF);\n</code></pre></p> <p><code>AEGP_SetTime</code></p> <p>New in CC. Sets the given section key's value to <code>valuePT</code>.</p> <p><pre><code>AEGP_SetTime(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  A_Time                *valuePT);\n</code></pre></p> <p><code>AEGP_SetARGB</code></p> <p>New in CC. Sets the given section key's value to <code>valueP</code>.</p> <p><pre><code>AEGP_SetARGB(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ,\n  PF_PixelFloat         *valueP);\n</code></pre></p> <p><code>AEGP_DeleteEntry</code></p> <p>Removes the given section's value from the blob.</p> <p><pre><code>AEGP_DeleteEntry(\n  AEGP_PersistentBlobH  blobH,\n  const A_char          *section_keyZ,\n  const A_char          *value_keyZ);\n</code></pre></p> <p><code>AEGP_GetPrefsDirectory</code></p> <p>Get the path to the folder containing After Effects' preference file.</p> <p>The path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetPrefsDirectory(\n  AEGP_MemHandle  *unicode_pathPH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#color-management","title":"Color Management","text":"<p>We've provided a function so AEGPs can obtain information on After Effects' current color management settings.</p>"},{"location":"aegps/aegp-suites/#aegp_colorsettingssuite5","title":"AEGP_ColorSettingsSuite5","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetBlendingTables</code></p> <p>Retrieves the current opaque <code>PF_EffectBlendingTables</code>, for use with <code>AEGP_TransferRect</code>.</p> <p><pre><code>AEGP_GetBlendingTables(\n  PR_RenderContextH        render_contextH,\n  PF_EffectBlendingTables  *blending_tables);\n</code></pre></p> <p><code>AEGP_DoesViewHaveColorSpaceXform</code></p> <p>Returns whether there is a colorspace transform applied to the current item view.</p> <p><pre><code>AEGP_DoesViewHaveColorSpaceXform(\n  AEGP_ItemViewP  viewP,\n  A_Boolean       *has_xformPB);\n</code></pre></p> <p><code>AEGP_XformWorkingToViewColorSpace</code></p> <p>Changes the view colorspace of the source to be the working colorspace of the destination. Source and destination can be the same.</p> <p><pre><code>AEGP_XformWorkingToViewColorSpace(\n  AEGP_ItemViewP  viewP,\n  AEGP_WorldH     srcH,\n  AEGP_WorldH     dstH);\n</code></pre></p> <p><code>AEGP_GetNewWorkingSpaceColorProfile</code></p> <p>Retrieves the opaque current working space ICC profile. Must be disposed.</p> <p>The \"New\" in the name does not indicate that you're making up a new profile; rather, it's part of our function naming standard; anything with \"New\" in the name allocates something which the caller must dispose.</p> <p><pre><code>AEGP_GetNewWorkingSpaceColorProfile(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_MemHandle  *icc_profPH);\n</code></pre></p> <p><code>AEGP_GetNewColorProfileFromICCProfile</code></p> <p>Retrieves a new <code>AEGP_ColorProfileP</code> from After Effects, representing the specified ICC profile. The caller must dispose of the returned <code>AEGP_ColorProfileP</code> using <code>AEGP_DisposeColorProfile()</code>.</p> <p><pre><code>AEGP_GetNewColorProfile FromICCProfile(\n  AEGP_PluginID       aegp_plugin_id,\n  A_long              icc_sizeL,\n  const void          *icc_dataPV,\n  AEGP_ColorProfileP  *profilePP);\n</code></pre></p> <p><code>AEGP_GetNewICCProfileFromColorProfile</code></p> <p>Retrieves a new ICC profile (stored in an <code>AEGP_MemHandle</code>) representing the specified color profile.</p> <p>Returned <code>AEGP_MemHandle</code> must be disposed by the caller.</p> <p><pre><code>AEGP_GetNewICCProfile FromColorProfile(\n  AEGP_PluginID            plugin_id,\n  AEGP_ConstColorProfileP  profileP,\n  AEGP_MemHandle           *profilePH);\n</code></pre></p> <p><code>AEGP_GetNewColorProfileDescription</code></p> <p>Returns a textual description of the specified color profile. Text will be a null-terminated UTF16 string, which must be disposed by the caller.</p> <p><pre><code>AEGP_GetNewColorProfileDescription(\n  AEGP_PluginID            aegp_plugin_id,\n  AEGP_ConstColorProfileP  profileP,\n  AEGP_MemHandle           *unicode_descPH);\n</code></pre></p> <p><code>AEGP_DisposeColorProfile</code></p> <p>Disposes of a color profile, obtained using other functions in this suite.</p> <p><pre><code>AEGP_DisposeColorProfile(\n  AEGP_ColorProfileP  profileP);\n</code></pre></p> <p><code>AEGP_GetColorProfileApproximateGamma</code></p> <p>Returns a floating point number approximating the gamma setting used by the specified color profile.</p> <p><pre><code>AEGP_GetColorProfileApproximateGamma(\n  AEGP_ConstColorProfileP  profileP,\n  A_FpShort                *approx_gammaP);\n</code></pre></p> <p><code>AEGP_IsRGBColorProfile</code></p> <p>Returns whether the specified color profile is RGB.</p> <p><pre><code>AEGP_IsRGBColorProfile(\n  AEGP_ConstColorProfileP  profileP,\n  A_Boolean                *is_rgbPB);\n</code></pre></p> <p><code>AEGP_SetWorkingColorSpace</code></p> <p>Sets the working space to the passed color profile.</p> <p><pre><code>AEGP_SetWorkingColorSpace(\n  AEGP_PluginID            aegp_plugin_id,\n  AEGP_CompH               compH,\n  AEGP_ConstColorProfileP  color_profileP);\n</code></pre></p> <p><code>AEGP_IsOCIOColorManagementUsed</code></p> <p>Check if the current project is using the OCIO color engine or not.</p> <p>Returns <code>true</code> if current project uses OCIO color managed mode.</p> <p><pre><code>AEGP_IsOCIOColorManagementUsed(\n  AEGP_PluginID  aegp_plugin_id,\n  A_Boolean      *is_OCIOColorManagementUsedPB);\n</code></pre></p> <p><code>AEGP_GetOCIOConfigurationFile</code></p> <p>Returns the OCIO configuration file used by the project.</p> <p>Returned\u00a0config_filePH\u00a0is a handle of <code>A_UTF16Char</code> containing a null terminated UTF16String which holds the OCIO Configuration file. The returned string must be disposed by the caller.</p> <p><pre><code>AEGP_GetOCIOConfigurationFile(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_MemHandle  *congif_filePH);\n</code></pre></p> <p><code>AEGP_GetOCIOConfigurationFilePath</code></p> <p>Returns the absolute file path to the OCIO configuration used by the project</p> <p>The returned\u00a0config_filePH\u00a0is a handle of <code>A_UTF16Char</code> containing a null terminated UTF16String which holds the absolute path to OCIO Configuration file. The returned string must be disposed by the caller.</p> <p><pre><code>AEGP_GetOCIOConfigurationFilePath(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_MemHandle  *congif_filePH);\n</code></pre></p> <p><code>AEGPD_GetOCIOWorkingColorSpace</code></p> <p>Returns the working color space of the project in OCIO mode.</p> <p>The returned\u00a0ocio_working_colorspaceH\u00a0is a handle of <code>A_UTF16Char</code> containing a null terminated UTF16String which holds the string specifying the working color space. The returned string must be disposed by the caller.</p> <p><pre><code>AEGPD_GetOCIOWorkingColorSpace(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_MemHandle  *ocio_working_colorspaceH);\n</code></pre></p> <p><code>AEGPD_GetOCIODisplayColorSpace</code></p> <p>Returns the Display and View transforms used by the project.</p> <p>The returned\u00a0ocio_displayH\u00a0and\u00a0ocio_viewH\u00a0are handles of <code>A_UTF16Char</code> containing a null terminated UTF16String specifying the Display and View transforms used at project level. The returned strings must be disposed by the caller.</p> <p><pre><code>AEGPD_GetOCIODisplayColorSpace(\n  AEGP_PluginID   aegp_plugin_id,\n  AEGP_MemHandle  *ocio_displayH,\n  AEGP_MemHandle  *ocio_viewH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#render-suites","title":"Render Suites","text":"<p>Since we introduced the AEGP API, we've been asked to provide functions for retrieving rendered frames.</p> <p>These function suites allows you to do just that.</p> <p>First, specify what you want rendered in the AEGP_RenderOptionsSuite4 or AEGP_LayerRenderOptionsSuite1.</p> <p>Then do the rendering with AEGP_RenderSuite4.</p>"},{"location":"aegps/aegp-suites/#aegp_renderoptionssuite4","title":"AEGP_RenderOptionsSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NewFromItem</code></p> <p>Returns the <code>AEGP_RenderOptionsH</code> associated with a given <code>AEGP_ItemH</code>.</p> <p>If there are no options yet specified, After Effects passes back an <code>AEGP_RenderOptionsH</code> with render time set to 0, time step set to the current frame duration, field render set to <code>PF_Field_FRAME</code>, and the depth set to the highest resolution specified within the item.</p> <p><pre><code>AEGP_NewFromItem(\n  AEGP_PluginID        plugin_id,\n  AEGP_ItemH           itemH,\n  AEGP_RenderOptionsH  *optionsPH);\n</code></pre></p> <p><code>AEGP_Duplicate</code></p> <p>Duplicates an <code>AEGP_RenderOptionsH</code> into <code>copyPH</code>.</p> <p><pre><code>AEGP_Duplicate(\n  AEGP_PluginID        plugin_id,\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_RenderOptionsH  *copyPH);\n</code></pre></p> <p><code>AEGP_Dispose</code></p> <p>Deletes an <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_Dispose(\n  AEGP_RenderOptionsH  optionsH);\n</code></pre></p> <p><code>AEGP_SetTime</code></p> <p>Sets the render time of an <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetTime(\n  AEGP_RenderOptionsH  optionsH,\n  A_Time               time);\n</code></pre></p> <p><code>AEGP_GetTime</code></p> <p>Retrieves the render time of the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetTime(\n  AEGP_RenderOptionsH  optionsH,\n  A_Time               *timeP);\n</code></pre></p> <p><code>AEGP_SetTimeStep</code></p> <p>Specifies the time step (duration of a frame) for the referenced <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetTimeStep(\n  AEGP_RenderOptionsH  optionsH,\n  A_Time               time_step);\n</code></pre></p> <p><code>AEGP_GetTimeStep</code></p> <p>Retrieves the time step (duration of a frame) for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetTimeStep(\n  AEGP_RenderOptionsH  optionsH,\n  A_Time               *timePT);\n</code></pre></p> <p><code>AEGP_SetFieldRender</code></p> <p>Specifies the field settings for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetFieldRender(\n  AEGP_RenderOptionsH  optionsH,\n  PF_Field             field_render);\n</code></pre></p> <p><code>AEGP_GetFieldRender</code></p> <p>Retrieves the field settings for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetFieldRender(\n  AEGP_RenderOptionsH  optionsH,\n  PF_Field             *field_renderP);\n</code></pre></p> <p><code>AEGP_SetWorldType</code></p> <p>Specifies the AEGP_WorldType of the output of a given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetWorldType(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_WorldType       type);\n</code></pre></p> <p><code>AEGP_WorldType</code> will be either <code>AEGP_WorldType_8</code> or <code>AEGP_WorldType_16</code></p> <p><code>AEGP_GetWorldType</code></p> <p>Retrieves the <code>AEGP_WorldType</code> of the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetWorldType(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_WorldType       *typeP);\n</code></pre></p> <p><code>AEGP_SetDownsampleFactor</code></p> <p>Specifies the downsample factor (with independent horizontal and vertical settings) for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetDownsampleFactor(\n  AEGP_RenderOptionsH  optionsH,\n  A_short              x,\n  A_short              y);\n</code></pre></p> <p><code>AEGP_GetDownsampleFactor</code></p> <p>Retrieves the downsample factor for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetDownsampleFactor(\n  AEGP_RenderOptionsH  optionsH,\n  A_short              *xP,\n  A_short              *yP);\n</code></pre></p> <p><code>AEGP_SetRegionOfInterest</code></p> <p>Specifies the region of interest sub-rectangle for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetRegionOfInterest(\n  AEGP_RenderOptionsH  optionsH,\n  const A_LRect        *roiP)\n</code></pre></p> <p><code>AEGP_GetRegionOfInterest</code></p> <p>Retrieves the region of interest sub-rectangle for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetRegionOfInterest(\n  AEGP_RenderOptionsH  optionsH,\n  A_LRect              *roiP);\n</code></pre></p> <p><code>AEGP_SetMatteMode</code></p> <p>Specifies the <code>AEGP_MatteMode</code> for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetMatteMode(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_MatteMode       mode);\n</code></pre></p> <p><code>AEGP_MatteMode</code> will be one of the following:</p> <ul> <li><code>AEGP_MatteMode_STRAIGHT</code></li> <li><code>AEGP_MatteMode_PREMUL_BLACK</code></li> <li><code>AEGP_MatteMode_PREMUL_BG_COLOR</code></li> </ul> <p><code>AEGP_GetMatteMode</code></p> <p>Retrieves the <code>AEGP_MatteMode</code> for the given <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_GetMatteMode(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_MatteMode       *modeP);\n</code></pre></p> <p><code>AEGP_GetChannelOrder</code></p> <p>Gets the <code>AEGP_ChannelOrder</code> for the given <code>AEGP_RenderOptionsH</code>.</p> <p><code>AEGP_ChannelOrder</code> will be either <code>AEGP_ChannelOrder_ARGB</code> or <code>AEGP_ChannelOrder_BGRA</code>.</p> <p><pre><code>AEGP_GetChannelOrder(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_ChannelOrder    *orderP);\n</code></pre></p> <p>Factoid: this was added to facilitate live linking with Premiere Pro.</p> <p><code>AEGP_SetChannelOrder</code></p> <p>Sets the <code>AEGP_ChannelOrder</code> of the <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_SetChannelOrder(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_ChannelOrder    order);\n</code></pre></p> <p><code>AEGP_GetRenderGuideLayers</code></p> <p>Passes back a boolean that is true if the render guide layers setting is on.</p> <p><pre><code>AEGP_GetRenderGuideLayers)(\n  AEGP_RenderOptionsH  optionsH,\n  A_Boolean            *will_renderPB);\n</code></pre></p> <p><code>AEGP_SetRenderGuideLayers</code></p> <p>Specify whether or not to render guide layers.</p> <p><pre><code>AEGP_SetRenderGuideLayers)(\n  AEGP_RenderOptionsH  optionsH,\n  A_Boolean            render_themB);\n</code></pre></p> <p><code>AEGP_GetRenderQuality</code></p> <p>Get the render quality of the render queue item.</p> <p>Quality can be either <code>AEGP_ItemQuality_DRAFT</code> or <code>AEGP_ItemQuality_BEST</code>.</p> <p><pre><code>AEGP_GetRenderQuality(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_ItemQuality     *qualityP);\n</code></pre></p> <p><code>AEGP_SetRenderQuality</code></p> <p>Set the render quality of the render queue item.</p> <p><pre><code>AEGP_GetRenderQuality(\n  AEGP_RenderOptionsH  optionsH,\n  AEGP_ItemQuality     quality);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#aegp_layerrenderoptionssuite1","title":"AEGP_LayerRenderOptionsSuite1","text":"<p>Note</p> <p>New in 13.0</p> <p>Function</p> <p>Purpose</p> <p><code>AEGP_NewFromLayer</code></p> <p>Returns the <code>AEGP_LayerRenderOptionsH</code> associated with a given <code>AEGP_LayerH</code>.</p> <p>Render time is set to the layer's current time, time step is set to layer's frame duration, ROI to the layer's nominal bounds, and EffectsToRender to \"all\".</p> <p><code>optionsPH</code> must be disposed by calling code.</p> <p><pre><code>AEGP_NewFromLayer(\n  AEGP_PluginID             plugin_id,\n  AEGP_LayerH               layerH,\n  AEGP_LayerRenderOptionsH  *optionsPH);\n</code></pre></p> <p><code>AEGP_NewFromUpstreamOfEffect</code></p> <p>Returns the <code>AEGP_LayerRenderOptionsH</code> from the layer associated with a given <code>AEGP_EffectRefH</code>.</p> <p>Render time is set to the layer's current time, time step is set to layer's frame duration, ROI to the layer's nominal bounds, and EffectsToRender to the index of <code>effectH</code>.</p> <p><code>optionsPH</code> must be disposed by calling code.</p> <p><pre><code>AEGP_NewFromUpstreamOfEffect(\n  AEGP_PluginID             plugin_id,\n  AEGP_EffectRefH           effectH,\n  AEGP_LayerRenderOptionsH  *optionsPH);\n</code></pre></p> <p><code>AEGP_Duplicate</code></p> <p>Duplicates an <code>AEGP_LayerRenderOptionsH</code> into <code>copyPH</code>.</p> <p><pre><code>AEGP_Duplicate(\n  AEGP_PluginID             plugin_id,\n  AEGP_LayerRenderOptionsH  optionsH,\n  AEGP_LayerRenderOptionsH  *copyPH);\n</code></pre></p> <p><code>AEGP_Dispose</code></p> <p>Deletes an <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_Dispose(\n  AEGP_LayerRenderOptionsH  optionsH);\n</code></pre></p> <p><code>AEGP_SetTime</code></p> <p>Sets the render time of an <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_SetTime(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_Time                    time);\n</code></pre></p> <p><code>AEGP_GetTime</code></p> <p>Retrieves the render time of the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_GetTime(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_Time                    *timeP);\n</code></pre></p> <p><code>AEGP_SetTimeStep</code></p> <p>Specifies the time step (duration of a frame) for the referenced <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_SetTimeStep(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_Time                    time_step);\n</code></pre></p> <p><code>AEGP_GetTimeStep</code></p> <p>Retrieves the time step (duration of a frame) for the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_GetTimeStep(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_Time                    *timePT);\n</code></pre></p> <p><code>AEGP_SetWorldType</code></p> <p>Specifies the AEGP_WorldType of the output of a given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_SetWorldType(\n  AEGP_LayerRenderOptionsH  optionsH,\n  AEGP_WorldType            type);\n</code></pre></p> <p><code>AEGP_WorldType</code> will be either <code>AEGP_WorldType_8</code> or <code>AEGP_WorldType_16</code></p> <p><code>AEGP_GetWorldType</code></p> <p>Retrieves the AEGP_WorldType of the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_GetWorldType(\n  AEGP_LayerRenderOptionsH  optionsH,\n  AEGP_WorldType            *typeP);\n</code></pre></p> <p><code>AEGP_SetDownsampleFactor</code></p> <p>Specifies the downsample factor (with independent horizontal and vertical settings) for the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_SetDownsampleFactor(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_short                   x,\n  A_short                   y);\n</code></pre></p> <p><code>AEGP_GetDownsampleFactor</code></p> <p>Retrieves the downsample factor for the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_GetDownsampleFactor(\n  AEGP_LayerRenderOptionsH  optionsH,\n  A_short                   *xP,\n  A_short                   *yP);\n</code></pre></p> <p><code>AEGP_SetMatteMode</code></p> <p>Specifies the AEGP_MatteMode for the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_SetMatteMode(\n  AEGP_LayerRenderOptionsH  optionsH,\n  AEGP_MatteMode            mode);\n</code></pre></p> <p>AEGP_MatteMode will be one of the following:</p> <ul> <li><code>AEGP_MatteMode_STRAIGHT</code></li> <li><code>AEGP_MatteMode_PREMUL_BLACK</code></li> <li><code>AEGP_MatteMode_PREMUL_BG_COLOR</code></li> </ul> <p><code>AEGP_GetMatteMode</code></p> <p>Retrieves the AEGP_MatteMode for the given <code>AEGP_LayerRenderOptionsH</code>.</p> <p><pre><code>AEGP_GetMatteMode(\n  AEGP_LayerRenderOptionsH  optionsH,\n  AEGP_MatteMode            *modeP);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#aegp_rendersuite4","title":"AEGP_RenderSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_RenderAndCheckoutFrame</code></p> <p>Retrieves an <code>AEGP_FrameReceiptH</code> (not the actual pixels) for the frame requested. Check in this receipt using <code>AEGP_CheckinFrame</code> to release memory.</p> <p>Create the <code>AEGP_RenderOptionsH</code> using the AEGP_RenderOptionsSuite4.</p> <p>Optionally, the AEGP can pass a function to be called by After Effects if the user cancels the current render, as well as a refcon (constant reference to opaque data) for use during that function.</p> <p><pre><code>AEGP_RenderAndCheckoutFrame(\n  AEGP_RenderOptionsH             optionsH,\n  AEGP_RenderSuiteCheckForCancel  cancel_functionP0,\n  AEGP_CancelRefcon               cancel_function_refconP0,\n  AEGP_FrameReceiptH              *receiptPH);\n</code></pre></p> <p><code>AEGP_RenderAndCheckoutLayerFrame</code></p> <p>New in CC 2014. This allows frame checkout of a layer with effects applied at non-render time.</p> <p>This is useful for an operation that requires the frame, for example, when a button is clicked and it is acceptable to wait for a moment while it is rendering.</p> <p>Note: Since it is not asynchronous, it will not solve the general problem where custom UI needs to draw based on the frame.</p> <p>Retrieves an <code>AEGP_FrameReceiptH</code> (not the actual pixels) for the layer frame requested. Check in this receipt using <code>AEGP_CheckinFrame</code> to release memory.</p> <p>Create the <code>AEGP_LayerRenderOptionsH</code> using <code>AEGP_NewFromUpstreamOfEffect()</code>, in AEGP_LayerRenderOptionsSuite1.</p> <p>You can actually use <code>AEGP_NewFromLayer()</code> to get other layer param's layers with their effects applied. However, be careful. If you do it in your effect A, and there's an effect B on the other layer that does the same thing during rendering, you'd create an infinite loop. If you're not doing it for render purposes then it could be okay.</p> <p>Optionally, the AEGP can pass a function to be called by After Effects if the user cancels the current render, as well as a refcon (constant reference to opaque data) for use during that function.</p> <p><pre><code>AEGP_RenderAndCheckoutLayerFrame(\n  AEGP_LayerRenderOptionsH        optionsH,\n  A_Boolean                       render_plain_layer_frameB,\n  AEGP_RenderSuiteCheckForCancel  cancel_functionP0,\n  AEGP_CancelRefcon               cancel_function_refconP0,\n  AEGP_FrameReceiptH              *receiptPH);\n</code></pre></p> <p><code>AEGP_CheckinFrame</code></p> <p>Call this function as soon as your AEGP is done accessing the frame.</p> <p>After Effects makes caching decisions based on which frames are checked out, so don't hog them!</p> <p><pre><code>AEGP_CheckinFrame(\n  AEGP_FrameReceiptH  receiptH);\n</code></pre></p> <p><code>AEGP_GetReceiptWorld</code></p> <p>Retrieves the pixels (<code>AEGP_WorldH</code>) associated with the referenced <code>AEGP_FrameReceiptH</code>.</p> <p><pre><code>AEGP_GetReceiptWorld(\n  AEGP_FrameReceiptH  receiptH,\n  AEGP_WorldH         *worldPH);\n</code></pre></p> <p><code>AEGP_GetRenderedRegion</code></p> <p>Retrieves an <code>A_LRect</code> containing the region of the <code>AEGP_FrameReceiptH's</code> <code>AEGP_WorldH</code> that has already been rendered.</p> <p>Remember that it's possible for only those portions of an image that have been changed to be rendered, so it's important to be able to check whether or not that includes the portion you need.</p> <p><pre><code>AEGP_GetRenderedRegion(\n  AEGP_FrameReceiptH  receiptH,\n  A_LRect             *regionP);\n</code></pre></p> <p><code>AEGP_IsRenderedFrameSufficient</code></p> <p>Given two sets of <code>AEGP_RenderOptionsH</code>, After Effects will return <code>TRUE</code> if the already-rendered pixels are still valid for the proposed <code>AEGP_RenderOptionsH</code>.</p> <p><pre><code>AEGP_IsRenderedFrameSufficient(\n  AEGP_RenderOptionsH  rendered_optionsH,\n  AEGP_RenderOptionsH  proposed_optionsH,\n  A_Boolean            *is_sufficientPB);\n</code></pre></p> <p><code>AEGP_RenderNewItemSoundData</code></p> <p>Obtains an <code>AEGP_ItemH's</code> audio at the given time, of the given duration, in the given format.</p> <p>The plug-in must dispose of the returned <code>AEGP_SoundDataH</code> (which may be NULL if no audio is available).</p> <p><pre><code>AEGP_RenderNewItemSoundData(\n  AEGP_ItemH                  itemH,\n  const A_Time                *start_timePT,\n  const A_Time                *durationPT,\n  const AEGP_SoundDataFormat  *formatP,\n  AEGP_SoundDataH             *new_dataPH);\n</code></pre></p> <p>NOTE: This function, if called as part of <code>AEGP_ItemSuite2</code>, provides a render interruptible using mouse clicks, unlike the version published here in <code>AEGP_RenderSuite</code>.</p> <p><code>AEGP_GetCurrentTimestamp</code></p> <p>Retrieves the current <code>AEGP_TimeStamp</code> of the project.</p> <p>The <code>AEGP_TimeStamp</code> is updated whenever an item is touched in a way that affects rendering.</p> <p><pre><code>AEGP_GetCurrentTimestamp(\n  AEGP_TimeStamp  *time_stampP);\n</code></pre></p> <p><code>AEGP_HasItemChangedSinceTimestamp</code></p> <p>Returns whether the video of an AEGP_ItemH has changed since the given <code>AEGP_TimeStamp</code>.</p> <p>Note: this does not track changes in audio.</p> <p><pre><code>AEGP_HasItemChangedSinceTimestamp(\n  AEGP_ItemH            itemH,\n  const A_Time          *start_timeP,\n  const A_Time          *durationP,\n  const AEGP_TimeStamp  *time_stampP,\n  A_Boolean             *changedPB);\n</code></pre></p> <p><code>AEGP_IsItemWorthwhileToRender</code></p> <p>Returns whether this frame would be worth rendering externally and checking in to the cache.</p> <p>A speculative renderer should check this twice: before sending the frame out to render and when it is complete, before calling <code>AEGP_NewPlatformWorld()</code> and checking in.</p> <p>This function is to be used with <code>AEGP_HasItemChangedSinceTimestamp()</code>, not alone.</p> <p><pre><code>AEGP_IsItemWorthwhileToRender(\n  AEGP_RenderOptionsH   roH,\n  const AEGP_TimeStamp  *time_stampP,\n  A_Boolean             *worthwhilePB);\n</code></pre></p> <p><code>AEGP_CheckinRenderedFrame</code></p> <p>Provide a rendered frame (<code>AEGP_PlatformWorldH</code>) to After Effects, which adopts it.</p> <p><code>ticksL</code> is the approximate time required to render the frame.</p> <p><pre><code>AEGP_CheckinRenderedFrame(\n  AEGP_RenderOptionsH    roH,\n  const AEGP_TimeStamp*  time_stampP,\n  A_u_long               ticksL,\n  AEGP_PlatformWorldH    imageH);\n</code></pre></p> <p><code>AEGP_GetReceiptGuid</code></p> <p>New in CS6. Retrieve a GUID for a rendered frame. The memory handle passed back must be disposed.</p> <p><pre><code>AEGP_GetReceiptGuid(\n  AEGP_FrameReceiptH  receiptH,\n  AEGP_MemHandle      *guidMH)\n</code></pre></p>"},{"location":"aegps/aegp-suites/#the-aegp_world-as-we-know-it","title":"The AEGP_World As We Know It","text":"<p><code>AEGP_Worlds</code> are the common format used throughout the AEGP APIs to describe frames of pixels.</p>"},{"location":"aegps/aegp-suites/#aegp_worldsuite3","title":"AEGP_WorldSuite3","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_New</code></p> <p>Returns an allocated, initialized <code>AEGP_WorldH</code>.</p> <p><pre><code>AEGP_New(\n  AEGP_PluginID   plugin_id,\n  AEGP_WorldType  type,\n  A_long          widthL,\n  A_long          heightL,\n  AEGP_WorldH     *worldPH);\n</code></pre></p> <p><code>AEGP_Dispose</code></p> <p>Disposes of an <code>AEGP_WorldH</code>. Use this on every world you allocate.</p> <p><pre><code>AEGP_Dispose(\n  AEGP_WorldH  worldH);\n</code></pre></p> <p><code>AEGP_GetType</code></p> <p>Returns the type of a given <code>AEGP_WorldH</code>.</p> <p><pre><code>AEGP_GetType(\n  AEGP_WorldH worldH,\n  AEGP_WorldType *typeP);\n</code></pre></p> <p>AEGP_WorldType will be one of the following:</p> <ul> <li><code>AEGP_WorldType_8</code></li> <li><code>AEGP_WorldType_16</code></li> <li><code>AEGP_WorldType_32</code></li> </ul> <p><code>AEGP_GetSize</code></p> <p>Returns the width and height of the given <code>AEGP_WorldH</code>.</p> <p><pre><code>AEGP_GetSize(\n  AEGP_WorldH  worldH,\n  A_long       *widthPL,\n  A_long       *heightPL);\n</code></pre></p> <p><code>AEGP_GetRowBytes</code></p> <p>Returns the rowbytes for the given <code>AEGP_WorldH</code>.</p> <p><pre><code>AEGP_GetRowBytes(\n  AEGP_WorldH  worldH,\n  A_u_long     *row_bytesPL);\n</code></pre></p> <p><code>AEGP_GetBaseAddr8</code></p> <p>Returns the base address of the <code>AEGP_WorldH</code> for use in pixel iteration functions.</p> <p>Will return an error if used on a non-8bpc world.</p> <p><pre><code>AEGP_GetBaseAddr8(\n  AEGP_WorldH  worldH,\n  PF_Pixel8    *base_addrP);\n</code></pre></p> <p><code>AEGP_GetBaseAddr16</code></p> <p>Returns the base address of the <code>AEGP_WorldH</code> for use in pixel iteration functions.</p> <p>Will return an error if used on a non-16bpc world.</p> <p><pre><code>AEGP_GetBaseAddr16(\n  AEGP_WorldH  worldH,\n  PF_Pixel16   *base_addrP);\n</code></pre></p> <p><code>AEGP_GetBaseAddr32</code></p> <p>Returns the base address of the <code>AEGP_WorldH</code> for use in pixel iteration functions.</p> <p>Will return an error if used on a non-32bpc world.</p> <p><pre><code>AEGP_GetBaseAddr32(\n  AEGP_WorldH    worldH,\n  PF_PixelFloat  *base_addrP);\n</code></pre></p> <p><code>AEGP_FillOutPFEffectWorld</code></p> <p>Populates and returns a PF_EffectWorld representing the given <code>AEGP_WorldH</code>, for use with numerous pixel processing callbacks.</p> <p>NOTE: This does not give your plug-in ownership of the world referenced; destroy the source <code>AEGP_WorldH</code> only if you allocated it. It just fills out the provided <code>PF_EffectWorld</code> to point to the same pixel buffer.</p> <p><pre><code>AEGP_FillOutPFEffectWorld(\n  AEGP_WorldH     worldH,\n  PF_EffectWorld  *pf_worldP);\n</code></pre></p> <p><code>AEGP_FastBlur</code></p> <p>Performs a fast blur on a given <code>AEGP_WorldH</code>.</p> <p><pre><code>AEGP_FastBlur(\n  A_FpLong      radiusF,\n  PF_ModeFlags  mode,\n  PF_Quality    quality,\n  AEGP_WorldH   worldH);\n</code></pre></p> <p><code>AEGP_NewPlatformWorld</code></p> <p>Creates a new <code>AEGP_PlatformWorldH</code> (a pixel world native to the execution platform).</p> <p><pre><code>AEGP_NewPlatformWorld(\n  AEGP_PluginID        plugin_id,\n  AEGP_WorldType       type,\n  A_long               widthL,\n  A_long               heightL,\n  AEGP_PlatformWorldH  *worldPH);\n</code></pre></p> <p><code>AEGP_DisposePlatformWorld</code></p> <p>Disposes of an <code>AEGP_PlatformWorldH</code>.</p> <p><pre><code>AEGP_DisposePlatformWorld(\n  AEGP_PlatformWorldH  worldH);\n</code></pre></p> <p><code>AEGP_NewReferenceFromPlatformWorld</code></p> <p>Retrieves an AEGP_WorldH referring to the given <code>AEGP_PlatformWorldH</code>.</p> <p>NOTE: This doesn't allocate a new world, it simply provides a reference to an existing one.</p> <p><pre><code>AEGP_NewReferenceFromPlatformWorld(\n  AEGP_PluginID        plugin_id,\n  AEGP_PlatformWorldH  plat_worldH,\n  AEGP_WorldH          *worldPH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#track-mattes-and-transform-functions","title":"Track Mattes and Transform Functions","text":"<p>Use the <code>AEGP_CompositeSuite</code> to copy pixel worlds, operate on track mattes, and apply transfer functions.</p>"},{"location":"aegps/aegp-suites/#aegp_compositesuite2","title":"AEGP_CompositeSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_ClearAlphaExceptRect</code></p> <p>For the given <code>PF_EffectWorld</code>, sets the alpha to fully transparent except for the specified rectangle.</p> <p><pre><code>AEGP_ClearAlphaExceptRect(\n  A_Rect          *clipped_dst_rectPR,\n  PF_EffectWorld  *dstP);\n</code></pre></p> <p><code>AEGP_PrepTrackMatte</code></p> <p>Mattes the pixels in a <code>PF_EffectWorld</code> with the <code>PF_Pixel</code> described in src_masks, putting the output into an array of pixels dst_mask.</p> <p>NOTE: Unlike most of the other pixel mangling functions provided by After Effects, this one doesn't take <code>PF_EffectWorld</code> arguments; rather, you can simply pass the data pointer from within the <code>PF_EffectWorld</code>. This can be confusing, but as a bonus, the function pads output appropriately so that <code>num_pix</code> pixels are always output.</p> <p><pre><code>AEGP_PrepTrackMatte(\n  A_long          num_pix,\n  A_Boolean       deepB,\n  const PF_Pixel  *src_mask,\n  PF_MaskFlags    mask_flags,\n  PF_Pixel        *dst_mask);\n</code></pre></p> <p><code>AEGP_TransferRect</code></p> <p>Blends two <code>PF_EffectWorlds</code> using a transfer mode, with an optional mask. Pass <code>NULL</code> for the <code>blend_tablesP0</code> parameter to perform blending in the current working color space.</p> <p><pre><code>AEGP_TransferRect(\n  PF_Quality               quality,\n  PF_ModeFlags             m_flags,\n  PF_Field                 field,\n  const A_Rect             *src_rec,\n  const PF_EffectWorld     *src_world,\n  const PF_CompositeMode   *comp_mode,\n  PF_EffectBlendingTables  blend_tablesP0,\n  const PF_MaskWorld       *mask_world0,\n  A_long                   dest_x,\n  A_long                   dest_y,\n  PF_EffectWorld           *dst_world);\n</code></pre></p> <p><code>AEGP_CopyBits_LQ</code></p> <p>Copies a rectangle of pixels (pass a <code>NULL</code> rectangle to get all pixels) from one <code>PF_EffectWorld</code> to another, at low quality.</p> <p><pre><code>AEGP_CopyBits_LQ(\n  PF_EffectWorld  *src_worldP,\n  A_Rect          *src_r,\n  A_Rect          *dst_r,\n  PF_EffectWorld  *dst_worldP);\n</code></pre></p> <p><code>AEGP_CopyBits_HQ_Straight</code></p> <p>Copies a rectangle of pixels (pass a <code>NULL</code> rectangle to get all pixels) from one <code>PF_EffectWorld</code> to another, at high quality, with a straight alpha channel.</p> <p><pre><code>AEGP_CopyBits_HQ_Straight(\n  PF_EffectWorld  *src,\n  A_Rect          *src_r,\n  A_Rect          *dst_r,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>AEGP_CopyBits_HQ_Premul</code></p> <p>Copies a rectangle of pixels (pass a <code>NULL</code> rectangle to get all pixels) from one <code>PF_EffectWorld</code> to another, at high quality, premultiplying the alpha channel.</p> <p><pre><code>AEGP_CopyBits_HQ_Premul(\n  PF_EffectWorld  *src,\n  A_Rect          *src_r,\n  A_Rect          *dst_r,\n  PF_EffectWorld  *dst);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#work-with-audio","title":"Work With Audio","text":"<p><code>AEGP_SoundDataSuite</code> allows AEGPs to obtain and manipulate the audio associated with compositions and footage items.</p> <p>Audio-only items may be added to the render queue using <code>AEGP_RenderNewItemSoundData()</code>.</p>"},{"location":"aegps/aegp-suites/#aegp_sounddatesuite1","title":"AEGP_SoundDateSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_NewSoundData</code></p> <p>Creates a new <code>AEGP_SoundDataH</code>, of which the plug-in must dispose.</p> <p><pre><code>AEGP_NewSoundData(\n  const AEGP_SoundDataFormat  *formatP,\n  AEGP_SoundDataH             *new_dataPH);\n</code></pre></p> <p><code>AEGP_DisposeSoundData</code></p> <p>Frees an <code>AEGP_SoundDataH</code>.</p> <p><pre><code>AEGP_DisposeSoundData(\n  AEGP_SoundDataH  sound_dataH);\n</code></pre></p> <p><code>AEGP_GetSoundDataFormat</code></p> <p>Obtains information about the format of a given <code>AEGP_SoundDataH</code>.</p> <p><pre><code>AEGP_GetSoundDataFormat(\n  AEGP_SoundDataH       soundH,\n  AEGP_SoundDataFormat  *formatP);\n</code></pre></p> <p><code>AEGP_LockSoundDataSamples</code></p> <p>Locks the <code>AEGP_SoundDataH</code> in memory.</p> <p><pre><code>AEGP_LockSoundDataSamples(\n  AEGP_SoundDataH  soundH,\n  void             *samples);\n</code></pre></p> <p><code>AEGP_UnlockSoundDataSamples</code></p> <p>Unlocks an <code>AEGP_SoundDataH</code>.</p> <p><pre><code>AEGP_UnlockSoundDataSamples(\n  AEGP_SoundDataH  soundH);\n</code></pre></p> <p><code>AEGP_GetNumSamples</code></p> <p>Obtains the number of samples in the given <code>AEGP_SoundDataH</code>.</p> <p><pre><code>AEGP_GetNumSamples(\n  AEGP_SoundDataH  soundH,\n  A_long           *numsamplesPL);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#audio-settings","title":"Audio Settings","text":"<p>Audio render settings are represented using the <code>AEGP_SoundDataFormat</code>.</p> <pre><code>struct AEGP_SoundDataFormat {\n    A_FpLong            sample_rateF;\n    AEGP_SoundEncoding  encoding;\n    A_long              bytes_per_sampleL;\n    A_long              num_channelsL; // 1 for mono, 2 for stereo\n} AEGP_SoundDataFormat;\n</code></pre> <p><code>bytes_per_sampleL</code> is always either <code>1</code>, <code>2</code>, or <code>4</code>, and is ignored if float encoding is specified.</p> <p><code>AEGP_SoundEncoding</code> is one of the following:</p> <ul> <li><code>AEGP_SoundEncoding_UNSIGNED_PCM</code></li> <li><code>AEGP_SoundEncoding_SIGNED_PCM</code></li> <li><code>AEGP_SoundEncoding_FLOAT</code></li> </ul>"},{"location":"aegps/aegp-suites/#render-queue-suite","title":"Render Queue Suite","text":"<p>This suite allows AEGPs to add items the to render queue (using default options), and control the basic state of the render queue.</p>"},{"location":"aegps/aegp-suites/#aegp_renderqueuesuite1","title":"AEGP_RenderQueueSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_AddCompToRenderQueue</code></p> <p>Adds a composition to the render queue, using default options.</p> <p><pre><code>AEGP_AddCompToRenderQueue(\n  AEGP_CompH     compH,\n  const A_char*  pathZ);\n</code></pre></p> <p><code>AEGP_SetRenderQueueState</code></p> <p>Sets the render queue to one of three valid states. It is not possible to go from stopped to paused.</p> <p><pre><code>AEGP_SetRenderQueueState(\n  AEGP_RenderQueueState  state);\n</code></pre></p> <ul> <li><code>AEGP_RenderQueueState_STOPPED</code></li> <li><code>AEGP_RenderQueueState_PAUSED</code></li> <li><code>AEGP_RenderQueueState_RENDERING</code></li> </ul> <p><code>AEGP_GetRenderQueueState</code></p> <p>Obtains the current render queue state.</p> <p><pre><code>AEGP_GetRenderQueueState(\n  AEGP_RenderQueueState  *stateP);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#render-queue-item-suite","title":"Render Queue Item Suite","text":"<p>Manipulate all aspects of render queue items using this suite.</p>"},{"location":"aegps/aegp-suites/#aegp_rqitemsuite4","title":"AEGP_RQItemSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetNumRQItems</code></p> <p>Returns the number of items currently in the render queue.</p> <p><pre><code>AEGP_GetNumRQItems(\n  A_long  *num_itemsPL);\n</code></pre></p> <p><code>AEGP_GetRQItemByIndex</code></p> <p>Returns an <code>AEGP_RQItemRefH</code> referencing the index'd item.</p> <p><pre><code>AEGP_GetRQItemByIndex(\n  A_long           rq_item_index,\n  AEGP_RQItemRefH  *rq_item_refPH);\n</code></pre></p> <p><code>AEGP_GetNextRQItem</code></p> <p>Returns the next <code>AEGP_RQItemRefH</code>, for iteration purposes.</p> <p>To get the first <code>AEGP_RQItemRefH</code>, pass <code>RQ_ITEM_INDEX_NONE</code> for the <code>current_rq_itemH</code>.</p> <p><pre><code>AEGP_GetNextRQItem(\n  AEGP_RQItemRefH  current_rq_itemH,\n  AEGP_RQItemRefH  *next_rq_itemPH);\n</code></pre></p> <p><code>AEGP_GetNumOutputModulesForRQItem</code></p> <p>Returns the number of output modules applied to the given <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_GetNumOutputModulesForRQItem(\n  AEGP_RQItemRefH  rq_itemH,\n  A_long           *num_outmodsPL);\n</code></pre></p> <p><code>AEGP_GetRenderState</code></p> <p>Returns <code>TRUE</code> if the <code>AEGP_RQItemRefH</code> is set to render (once the user clicks the Render button).</p> <p><pre><code>AEGP_GetRenderState(\n  AEGP_RQItemRefH  rq_itemH,\n  A_Boolean        *will_renderPB);\n</code></pre></p> <p><code>AEGP_SetRenderState</code></p> <p>Controls whether or not the <code>AEGP_RQItemRefH</code> will render when the user next clicks the Render button.</p> <p>Returns an error if called during rendering.</p> <p>This function will return:</p> <ul> <li><code>Err_PARAMETER</code> if you try to call while <code>AEGP_RenderQueueState</code> isn't <code>AEGP_RenderQueueState_STOPPED</code></li> <li><code>Err_RANGE</code> if you pass a status that is illegal in any case, and</li> <li><code>Err_PARAMETER</code> if you try to pass a status that doesn't make sense (like trying to queue something for which there's no output path)</li> </ul> <p><pre><code>AEGP_SetRenderState(\n  AEGP_RQItemRefH  rq_itemH,\n  A_Boolean        renderB);\n</code></pre></p> <p><code>AEGP_GetStartedTime</code></p> <p>Returns the time (in seconds, since 1904) that rendering began.</p> <p><pre><code>AEGP_GetStartedTime(\n  AEGP_RQItemRefH  rq_itemH,\n  A_Time           *started_timePT);\n</code></pre></p> <p><code>AEGP_GetElapsedTime</code></p> <p>Returns the time elapsed since rendering began.</p> <p><pre><code>AEGP_GetElapsedTime(\n  AEGP_RQItemRefH  rq_itemH,\n  A_Time           *render_timePT);\n</code></pre></p> <p><code>AEGP_GetLogType</code></p> <p>Returns the log type for the referenced <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_GetLogType(\n  AEGP_RQItemRefH  rq_itemH,\n  AEGP_LogType     *logtypeP);\n</code></pre></p> <p><code>AEGP_LogtType</code> will have one of the following values:</p> <ul> <li><code>AEGP_LogType_NONE</code></li> <li><code>AEGP_LogType_ERRORS_ONLY</code></li> <li><code>AEGP_LogType_PLUS_SETTINGS</code></li> <li><code>AEGP_LogType_PER_FRAME_INFO</code></li> </ul> <p><code>AEGP_SetLogType</code></p> <p>Specifies the log type to be used with the referenced <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_SetLogType(\n  AEGP_RQItemRefH  rq_itemH,\n  AEGP_LogType     logtype);\n</code></pre></p> <p><code>AEGP_RemoveOutputModule</code></p> <p>Removes the specified output module from the referenced <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_RemoveOutputModule(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH);\n</code></pre></p> <p><code>AEGP_GetComment</code></p> <p>Updated to support Unicode in <code>RQItemSuite4</code>, available in 14.1.</p> <p>Retrieves the comment associated with the referenced <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_GetComment(\n  AEGP_RQItemRefH  rq_itemH,\n  AEGP_MemHandle   *unicodeH);\n</code></pre></p> <p><code>AEGP_SetComment</code></p> <p>Updated to support Unicode in <code>RQItemSuite4</code>, available in 14.1.</p> <p>Specifies the comment associated with the referenced <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_SetComment(\n  AEGP_RQItemRefH    rq_itemH,\n  const A_UTF16Char  *commentZ);\n</code></pre></p> <p><code>AEGP_GetCompFromRQItem</code></p> <p>Retrieves the <code>AEGP_CompH</code> associated with the <code>AEGP_RQItemRefH</code>.</p> <p><pre><code>AEGP_GetCompFromRQItem(\n  AEGP_RQItemRefH  rq_itemH,\n  AEGP_CompH       *compPH);\n</code></pre></p> <p><code>AEGP_DeleteRQItem</code></p> <p>Deletes the render queue item. Undoable.</p> <p><pre><code>AEGP_DeleteRQItem(\n  AEGP_RQItemRefH  rq_itemH);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#render-queue-monitor-suite","title":"Render Queue Monitor Suite","text":"<p>New in CS6. This suite provides all the info a render queue manager needs to figure out what is happening at any point in a render.</p>"},{"location":"aegps/aegp-suites/#aegp_renderqueuemonitorsuite1","title":"AEGP_RenderQueueMonitorSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_RegisterListener</code></p> <p>Register a set of plug-in-defined functions to be called by the render queue.</p> <p>Use the refcon to pass in data that you want to use later on when your plug-in-defined functions in <code>AEGP_RQM_FunctionBlock1</code> are called later. It may be set it to <code>NULL</code> if you don't need it.</p> <p><pre><code>AEGP_RegisterListener(\n  AEGP_PluginID                  aegp_plugin_id,\n  AEGP_RQM_Refcon                aegp_refconP,\n  const AEGP_RQM_FunctionBlock1  *fcn_blockP);\n</code></pre></p> <p>The <code>AEGP_RQM_FunctionBlock1</code> is defined as follows:</p> <p><pre>struct _AEGP_RQM_FunctionBlock1 {  A_Err (AEGP_RQM_RenderJobStarted)(    AEGP_RQM_BasicData  *basic_dataP,    AEGP_RQM_SessionId  jobid);A_Err (AEGP_RQM_RenderJobEnded)(    AEGP_RQM_BasicData  *basic_dataP,    AEGP_RQM_SessionId  jobid);\n<p><code>AEGP_RQM_FinishedStatus</code> will be one of the following:</p>\n<ul>\n<li><code>AEGP_RQM_FinishedStatus_UNKNOWN</code></li>\n<li><code>AEGP_RQM_FinishedStatus_SUCCEEDED</code></li>\n<li><code>AEGP_RQM_FinishedStatus_ABORTED</code></li>\n<li><code>AEGP_RQM_FinishedStatus_ERRED</code></li>\n</ul>\n<p>The <code>AEGP_RQM_BasicData</code> is defined below.</p>\n<p><pre><code>struct _AEGP_RQM_BasicData {\n  const struct SPBasicSuite *pica_basicP;\n  A_long                    aegp_plug_id;\n  AEGP_RQM_Refcon           aegp_refconPV;\n} AEGP_RQM_BasicData;\n</code></pre></p>\n\n\n<p>A_Err (*AEGP_RQM_RenderJobItemStarted)(    AEGP_RQM_BasicData  *basic_dataP,    AEGP_RQM_SessionId  jobid,    AEGP_RQM_ItemId     itemid);</p>\n\n\n<p>A_Err (*AEGP_RQM_RenderJobItemUpdated)(    AEGP_RQM_BasicData  *basic_dataP,    AEGP_RQM_SessionId  jobid,    AEGP_RQM_ItemId     itemid,    AEGP_RQM_FrameId    frameid);</p>\n\n\n<p>A_Err (*AEGP_RQM_RenderJobItemEnded)(    AEGP_RQM_BasicData       *basic_dataP,    AEGP_RQM_SessionId       jobid,    AEGP_RQM_ItemId          itemid,    AEGP_RQM_FinishedStatus  fstatus);</p>\n\n\n<p>A_Err (*AEGP_RQM_RenderJobItemReportLog)(    AEGP_RQM_BasicData  *basic_dataP,    AEGP_RQM_SessionId  jobid,    AEGP_RQM_ItemId     itemid,    A_Boolean           isError,    AEGP_MemHandle      logbuf);} AEGP_RQM_FunctionBlock1;</p>\n\n\n\n\n<p><code>AEGP_DeregisterListener</code></p>\n\n\n<p>Deregister from the render queue.</p>\n<p><pre><code>AEGP_DeregisterListener(\n  AEGP_PluginID    aegp_plugin_id,\n  AEGP_RQM_Refcon  aegp_refconP);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetProjectName</code></p>\n\n\n<p>Obtain the current project name. The project name is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetProjectName(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_MemHandle      *utf_project_namePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetAppVersion</code></p>\n\n\n<p>Obtain the app version. The app version is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetAppVersion(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_MemHandle      *utf_app_versionPH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItems</code></p>\n\n\n<p>Obtain the number of job items.</p>\n<p><pre><code>AEGP_GetNumJobItems(\n  AEGP_RQM_SessionId  sessid,\n  A_long              *num_jobitemsPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemID</code></p>\n\n\n<p>Get the job with the index specified.</p>\n<p><pre><code>AEGP_GetJobItemID(\n  AEGP_RQM_SessionId  sessid,\n  A_long              jobItemIndex,\n  AEGP_RQM_ItemId     *jobItemID);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemRenderSettings</code></p>\n\n\n<p>Get the number of render settings for the job with the index specified.</p>\n<p><pre><code>AEGP_GetNumJobItemRenderSettings(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              *num_settingsPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemRenderSetting</code></p>\n\n\n<p>Get a specific render setting of a specific job. The setting name and value are handles to NULL-terminated A_UTF16Char strings, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetJobItemRenderSetting(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              settingIndex,\n  AEGP_MemHandle      *utf_setting_namePH0,\n  AEGP_MemHandle      *utf_setting_valuePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemOutputModules</code></p>\n\n\n<p>Get the number of output modules for the job with the index specified.</p>\n<p><pre><code>AEGP_GetNumJobItemOutputModules(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              *num_outputmodulesPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemOutputModuleSettings</code></p>\n\n\n<p>Get the number of settings for the output module with the index specified.</p>\n<p><pre><code>AEGP_GetNumJobItemOutputModuleSettings(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              *num_settingsPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemOutputModuleSetting</code></p>\n\n\n<p>Get a specific setting of a job item output module. The setting name and value are handles to NULL-terminated A_UTF16Char strings, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetJobItemOutputModuleSetting(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              settingIndex,\n  AEGP_MemHandle      *utf_setting_namePH0,\n  AEGP_MemHandle      *utf_setting_valuePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemOutputModuleWarnings</code></p>\n\n\n<p>Get the number of output module warnings for a job item.</p>\n<p><pre><code>AEGP_GetNumJobItemOutputModuleWarnings(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              *num_warningsPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemOutputModuleWarning</code></p>\n\n\n<p>Get a specific warning of a specific output module for a specific job item. The warning value is a handle to NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetJobItemOutputModuleWarning(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              warningIndex,\n  AEGP_MemHandle      *utf_warning_valuePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemFrameProperties</code></p>\n\n\n<p>Get the number of properties for a job item frame.</p>\n<p><pre><code>AEGP_GetNumJobItemFrameProperties(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  AEGP_RQM_FrameId    frameid,\n  A_long              *num_propertiesPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemFrameProperty</code></p>\n\n\n<p>Get a specific property on a job item frame. The property name and values are handle to NULL-terminated A_UTF16Char strings, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetJobItemFrameProperty(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  AEGP_RQM_FrameId    frameid,\n  A_long              propertyIndex,\n  AEGP_MemHandle      *utf_property_namePH0,\n  AEGP_MemHandle      *utf_property_valuePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetNumJobItemOutputModuleProperties</code></p>\n\n\n<p>Get the number of properties for a job item output module.</p>\n<p><pre><code>AEGP_GetNumJobItemOutputModuleProperties(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              *num_propertiesPL);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemOutputModuleProperty</code></p>\n\n\n<p>Get a specific property off a job item output module. The property name and values are handle to NULL-terminated A_UTF16Char strings, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetJobItemOutputModuleProperty(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  A_long              outputModuleIndex,\n  A_long              propertyIndex,\n  AEGP_MemHandle      *utf_property_namePH0,\n  AEGP_MemHandle      *utf_property_valuePH0);\n</code></pre></p>\n\n\n\n\n\n\n\n\n<p><code>AEGP_GetJobItemFrameThumbnail</code></p>\n\n\n<p>Get a buffer with a JPEG-encoded thumbnail of the job item frame.</p>\n<p>Pass in the maximum width and height, and the actual dimensions will be passed back.</p>\n<p><pre><code>AEGP_GetJobItemFrameThumbnail(\n  AEGP_RQM_SessionId  sessid,\n  AEGP_RQM_ItemId     itemid,\n  AEGP_RQM_FrameId    frameid,\n  A_long              *widthPL,\n  A_long              *heightPL,\n  AEGP_MemHandle      *thumbnailPH0);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#output-module-suite","title":"Output Module Suite","text":"<p>Every item in the render queue has at least one output module specified.</p>\n<p>Use this suite to query and control all aspects of the output modules attached to a given render item.</p>\n<p>You may also add and remove output modules.</p>\n<p>Factoid: For each frame rendered for a given render item, the list of output modules is traversed. So, for frame 0, output module 0, then 1, then 2 are called.</p>"},{"location":"aegps/aegp-suites/#aegp_outputmodulesuite4","title":"AEGP_OutputModuleSuite4","text":"<p>Function</p>\n\n\n<p>Purpose</p>\n\n\n\n\n\n\n<p><code>AEGP_GetOutputModuleByIndex</code></p>\n\n\n<p>Retrieves the indexed output module.</p>\n<p>NOTE: <code>AEGP_OutputModuleRefH</code> is an opaque data type, and can't be manipulated directly; you must use our accessor functions to modify it.</p>\n<p><pre><code>AEGP_GetOutputModuleByIndex(\n  AEGP_RQItemRefH        rq_itemH,\n  A_long                 outmod_indexL,\n  AEGP_OutputModuleRefH  *outmodPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetEmbedOptions</code></p>\n\n\n<p>Retrieves the embedding setting specified for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_GetEmbedOptions(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_EmbeddingType     *embed_optionsP);\n</code></pre></p>\n<p><code>AEGP_EmbeddingType</code> will be one of the following:</p>\n<ul>\n<li><code>AEGP_Embedding_NOTHING</code></li>\n<li><code>AEGP_Embedding_LINK</code></li>\n<li><code>AEGP_Embedding_LINK_AND_COPY</code></li>\n</ul>\n\n\n\n\n<p><code>AEGP_SetEmbedOptions</code></p>\n\n\n<p>Specifies the embedding setting for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_SetEmbedOptions(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_EmbeddingType     embed_options);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetPostRenderAction</code></p>\n\n\n<p>Retrieves the post-render action setting for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_GetPostRenderAction(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_PostRenderAction  *actionP);\n</code></pre></p>\n<p><code>AEGP_PostRenderAction</code> will be one of the following:</p>\n<ul>\n<li><code>AEGP_PostRenderOptions_IMPORT</code></li>\n<li><code>AEGP_PostRenderOptions_IMPORT_AND_REPLACE_USAGE</code></li>\n<li><code>AEGP_PostRenderOptions_SET_PROXY</code></li>\n</ul>\n\n\n\n\n<p><code>AEGP_SetPostRenderAction</code></p>\n\n\n<p>Specifies the post-render action setting for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_SetPostRenderAction(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_PostRenderAction  action);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetEnabledOutputs</code></p>\n\n\n<p>Retrieves which output types are enabled for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_GetEnabledOutputs(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_OutputTypes       *typesP);\n</code></pre></p>\n<p><code>AEGP_OutputTypes</code> will contain one or both of the following values:</p>\n<ul>\n<li><code>AEGP_OutputType_VIDEO</code></li>\n<li><code>AEGP_OutputType_AUDIO</code></li>\n</ul>\n<p>NOTE: These are flags, not an enumeration.</p>\n\n\n\n\n<p><code>AEGP_SetEnabledOutputs</code></p>\n\n\n<p>Specifies which output types are enabled for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_SetEnabledOutputs(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_OutputTypes       enabled_types);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetOutputChannels</code></p>\n\n\n<p>Retrieves which video channels are enabled for output in the referenced AEGP_OutputModuleRefH.</p>\n<p><pre><code>AEGP_GetOutputChannels(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_VideoChannels     *outchannelsP);\n</code></pre></p>\n<p><code>AEGP_VideoChannels</code> will be one of the following:</p>\n<ul>\n<li><code>AEGP_VideoChannels_RGB</code></li>\n<li><code>AEGP_VideoChannels_RGBA</code></li>\n<li><code>AEGP_VideoChannels_ALPHA</code></li>\n</ul>\n\n\n\n\n<p><code>AEGP_SetOutputChannels</code></p>\n\n\n<p>Specifies which video channels are enabled for output in the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_SetOutputChannels(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_VideoChannels     outchannels);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetStretchInfo</code></p>\n\n\n<p>Retrieves the stretch information enabled for the referenced <code>AEGP_OutputModuleRefH</code>; whether or not stretching is enabled, whether or not the frame aspect ratio is locked to the composition's, and what quality setting is specified.</p>\n<p><pre><code>AEGP_GetStretchInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  A_Boolean              *enabledPB,\n  AEGP_StretchQuality    *qualP,\n  A_Boolean              *lockedPB);\n</code></pre></p>\n<p><code>AEGP_StretchQuality</code> will be one of the following:</p>\n<ul>\n<li><code>AEGP_StretchQual_LOW</code></li>\n<li><code>AEGP_StretchQual_HIGH</code></li>\n</ul>\n\n\n\n\n<p><code>AEGP_SetStretchInfo</code></p>\n\n\n<p>Retrieves the stretch information enabled for the referenced <code>AEGP_OutputModuleRefH</code>.</p>\n<p><pre><code>AEGP_SetStretchInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  A_Boolean              is_enabledB,\n  AEGP_StretchQuality    quality);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetCropInfo</code></p>\n\n\n<p>Retrieves whether or not the cropping is enabled for the referenced <code>AEGP_OutputModuleRefH</code>, and the rectangle to be used.</p>\n<p><pre><code>AEGP_GetCropInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  A_Boolean              *is_enabledBP,\n  A_Rect                 *crop_rectP);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_SetCropInfo</code></p>\n\n\n<p>Specifies whether cropping is enabled for the referenced <code>AEGP_OutputModuleRefH</code>, and the rectangle to be used.</p>\n<p><pre><code>AEGP_SetCropInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  A_Boolean              enableB,\n  A_Rect                 crop_rect);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetSoundFormatInfo</code></p>\n\n\n<p>Retrieves whether or not audio output is enabled for the referenced <code>AEGP_OutputModuleRefH</code>, and the settings to be used.</p>\n<p><pre><code>AEGP_GetSoundFormatInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_SoundDataFormat   *formatP,\n  A_Boolean              *enabledPB);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_SetSoundFormatInfo</code></p>\n\n\n<p>Specifies whether or not audio output is enabled for the referenced <code>AEGP_OutputModuleRefH</code>, and the settings to be used.</p>\n<p><pre><code>AEGP_SetSoundFormatInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_SoundDataFormat   format_info,\n  A_Boolean              enabledB);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetOutputFilePath</code></p>\n\n\n<p>Retrieves the path to which <code>AEGP_OutputModuleRefH's</code> output file will be written. The path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p>\n<p><pre><code>AEGP_GetOutputFilePath(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_MemHandle         *unicode_pathPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_SetOutputFilePath</code></p>\n\n\n<p>Specifies the path to which <code>AEGP_OutputModuleRefH's</code> output file will be written. The file path is a NULL-terminated UTF-16 string with platform separators.</p>\n<p><pre><code>AEGP_SetOutputFilePath(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  const A_UTF16Char      *pathZ);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_AddDefaultOutputModule</code></p>\n\n\n<p>Adds the default output module to the specified <code>AEGP_RQItemRefH</code>, and returns the added output module's <code>AEGP_OutputModuleRefH</code> (you wouldn't add it if you didn't plan to mess around with it, would you?).</p>\n<p><pre><code>AEGP_AddDefaultOutputModule(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  *outmodPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetExtraOutputModuleInfo</code></p>\n\n\n<p>Retrieves information about the output module.</p>\n<p><code>format_uniPH</code> and <code>info_uniPH</code> provide the textual description of, and information about, the output module, formatted as the user would see it.</p>\n<p><code>format_uniPH</code> and <code>info_uniPH</code> will contain NULL-terminated UTF16 strings, of which the caller must dispose.</p>\n<p><pre><code>AEGP_GetExtraOutputModuleInfo(\n  AEGP_RQItemRefH        rq_itemH,\n  AEGP_OutputModuleRefH  outmodH,\n  AEGP_MemHandle         *format_uniPH,\n  AEGP_MemHandle         *info_uniPH,\n  A_Boolean              *is_sequenceBP,\n  A_Boolean              *multi_frameBP);\n</code></pre></p>"},{"location":"aegps/aegp-suites/#working-with-effects","title":"Working With Effects","text":"<p>These functions provide a way for effects (and AEGPs) to obtain information about the context of an applied effect.</p>\n\n<p>Note</p>\n<p>Any time you modify or rely on data from outside the normal render pipeline, you run the risk of dependency problems.</p>\n\n<p>There is no way for After Effects to know that you depend on this external information; consequently, you will not be notified if it changes out from under you.</p>"},{"location":"aegps/aegp-suites/#aegp_pfinterfacesuite1","title":"AEGP_PFInterfaceSuite1","text":"<p>Function</p>\n\n\n<p>Purpose</p>\n\n\n\n\n\n\n<p><code>AEGP_GetEffectLayer</code></p>\n\n\n<p>Obtain the layer handle of the layer to which the effect is applied.</p>\n<p><pre><code>AEGP_GetEffectLayer(\n  PF_ProgPtr   effect_ref,\n  AEGP_LayerH  *layerPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetNewEffectForEffect</code></p>\n\n\n<p>Obtain the <code>AEGP_EffectRefH</code> corresponding to the effect.</p>\n<p><pre><code>AEGP_GetNewEffectForEffect(\n  AEGP_PluginID    aegp_plugin_id,\n  PF_ProgPtr       effect_ref,\n  AEGP_EffectRefH  *effectPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_ConvertEffectToCompTime</code></p>\n\n\n<p>Retreive the composition time corresponding to the effect's layer time.</p>\n<p><pre><code>AEGP_ConvertEffectToCompTime(\n  PF_ProgPtr     effect_ref,\n  long           what_timeL,\n  unsigned long  time_scaleLu,\n  A_Time         *comp_timePT);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetEffectCamera</code></p>\n\n\n<p>Obtain the camera (if any) being used by After Effects to view the effect's layer.</p>\n<p><pre><code>AEGP_GetEffectCamera(\n  PF_ProgPtr    effect_ref,\n  const A_Time  *comp_timePT,\n  AEGP_LayerH   camera_layerPH);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_GetEffectCameraMatrix</code></p>\n\n\n<p>Obtain the transform used to move between the layer's coordinate space and that of the containing composition.</p>\n<p><pre><code>AEGP_GetEffectCameraMatrix(\n  PF_ProgPtr    effect_ref,\n  const A_Time  *comp_timePT,\n  A_Matrix4     *camera_matrixP,\n  A_FpLong      *dst_to_planePF,\n  A_short       *plane_widthPL,\n  A_short       *plane_heightPL);\n</code></pre></p>\n<p>NOTE: In cases where the effect's input layer has square pixels, but is in a non-square pixel composition, you must correct for the pixel aspect ratio by premultiplying the matrix by <code>(1/parF, 1, 1)</code>.</p>"},{"location":"aegps/aegp-suites/#aegp_geteffectcameramatrix-notes","title":"AEGP_GetEffectCameraMatrix Notes","text":"<p>The model view for the camera matrix is inverse of the matrix obtained from <code>AEGP_GetEffectCameraMatrix()</code>.</p>\n<p>Also note that our matrix is row-based; OpenGL's is column-based.</p>"},{"location":"aegps/aegp-suites/#do-this-many-times","title":"Do This Many Times","text":"<p>Utilizes multiple processors (if available) for your computations.</p>"},{"location":"aegps/aegp-suites/#aegp_iteratesuite1","title":"AEGP_IterateSuite1","text":"<p>Function</p>\n\n\n<p>Purpose</p>\n\n\n\n\n\n\n<p><code>AEGP_GetNumThreads</code></p>\n\n\n<p>Ask After Effects how many threads are currently available.</p>\n<p><pre><code>AEGP_GetNumThreads(\n  A_long  *num_threadsPL);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_IterateGeneric</code></p>\n\n\n<p>Specify a function for After Effects to manage on multiple processors.</p>\n<p>Can be any function pointer specified by <code>fn_func</code>, taking the arguments listed below.</p>\n<p>See Private Data for a description of how <code>refconPV</code> is used.</p>\n<p><pre><code>AEGP_IterateGeneric(\n  A_long  iterationsL,\n  void    *refconPV,\n  A_Err   (*fn_func)\n    (void   *refconPV,\n    A_long  thread_indexL,\n    A_long  i,\n    A_long  iterationsL));\n</code></pre></p>"},{"location":"aegps/aegp-suites/#file-import-manager-suite","title":"File Import Manager Suite","text":"<p>The FIMSuite allows file types handled by AEGPs to appear as part of the After Effects import dialog, and drag-and-drop messaging.</p>\n<p>These are not for use by AEIOs! Rather, they are for importing projects which are best represented as After Effects compositions.</p>"},{"location":"aegps/aegp-suites/#aegp_fimsuite3","title":"AEGP_FIMSuite3","text":"<p>Function</p>\n\n\n<p>Purpose</p>\n\n\n\n\n\n\n<p><code>AEGP_RegisterImportFlavor</code></p>\n\n\n<p>Registers the name of the file type(s) supported by the plug-in. Upon return, <code>imp_refP</code> will be a valid opaque reference, or <code>AE_FIM_ImportFlavorRef_NONE</code>.</p>\n<p><pre><code>AEGP_RegisterImportFlavor(\n  const char              *nameZ,\n  AE_FIM_ImportFlavorRef  *imp_refP);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_RegisterImportFlavorFileTypes</code></p>\n\n\n<p>Registers an array of file types and file extensions (the two arrays need not be of equal length) supported by the AEGP.</p>\n<p><pre><code>AEGP_RegisterImportFlavorFileTypes(\n  AE_FIM_ImportFlavorRef  imp_ref,\n  long                    num_filekindsL,\n  const AEIO_FileKind     *kindsAP,\n  long                    num_fileextsL,\n  const AEIO_FileKind     *extsAP);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_RegisterImportFlavorImportCallbacks</code></p>\n\n\n<p>Register the AEGP functions which will respond to import of different filetypes.</p>\n<p><pre><code>AEGP_RegisterImportFlavorImportCallbacks(\n  AE_FIM_ImportFlavorRef        ref,\n  AE_FIM_ImportFlags            single_flag,\n  const AE_FIM_ImportCallbacks  *imp_cbsP);\n</code></pre></p>\n\n\n\n\n<p><code>AEGP_SetImportedItem</code></p>\n\n\n<p>Designates an item as having been imported (possibly replacing an existing item), and sets associated import options.</p>\n<p><pre><code>AEGP_SetImportedItem(\n  AE_FIM_ImportOptions  imp_options,\n  AEGP_ItemH            imported_itemH);\n</code></pre></p>"},{"location":"aegps/aegps/","title":"AEGPs","text":"<p>The After Effects General Plug-in (AEGP) API is powerful and broad, offering functionality beyond what is available to effect plug-ins.</p> <p>To users, AEGPs appear to be part of After Effects.</p> <p>They can add, intercept, and trigger menu commands, access the keyframe database, and register functions as part of After Effects' internal messaging.</p> <p>AEGPs can add and remove items to projects and compositions, add and remove filters and keyframes.</p> <p>Once its command is triggered, AEGPs use the numerous PICA function suites (described in this section) to work with every After Effects item.</p> <p>AEGPs can publish function suites for plug-ins, manipulate all project elements, change interpretations, replace files and determine which external files are used to render a project.</p> <p>There are several specialized types of AEGP; Keyframers, Artisans, and I/O modules (AEIOs). They are all still AEGPs, but have access to specialized messaging streams, for which they register with After Effects.</p>"},{"location":"aegps/cheating-effect-usage-of-aegp-suites/","title":"Cheating Effect Usage of AEGP Suites","text":"<p>As soon as we showed developers the initial implementation of AEGP suites, they wanted to \"cheat\" and use them from within effects. This is certainly possible, but please keep in mind that depending on factors outside the effect API (i.e., any information you get from the AEGP APIs) can lead to trouble. If After Effects thinks an effect has all the information it needs to render, it won't (for example) update its parameters based on changes made through an AEGP function. We're actively working on this dependency issue for future versions, but bear it in mind as you write effects which \"masquerade\" as AEGPs.</p> <p>Effects can use some AEGP suites to take advantage of camera and lighting information, as well as the <code>AEGP_GetLayerParentComp</code> and <code>AEGP_GetCompBGColor</code> functions, from AEGP_CompSuite11. This should not be interpreted to mean that effects can use any AEGP suite calls. Also, see Effect UI &amp; Events for more information on effects adding keyframes.</p> <p>AEGP_PFInterfaceSuite is the starting point. The functions in this suite allow you to retrieve the AEGP_LayerH for the layer to which the effect is applied, and the AEGP_EffectRefH for the instance of your effect. <code>AEGP_RegisterWithAEGP</code> from AEGP_UtilitySuite6 allows you to get an AEGP_PluginID, which is needed for many AEGP calls.</p>"},{"location":"aegps/cheating-effect-usage-of-aegp-suites/#depending-on-aegp-queries","title":"Depending on AEGP Queries","text":"<p>One word: Don't. Effects cannot allow the results of AEGP queries to control what is rendered, without appropriately storing those query results (usually in sequence data), cancelling their own render, and forcing a re-render using the queried information.</p> <p>This is tricky.</p> <p>Failure to do so will result in nasty, subtle caching bugs guaranteed to cause hair loss and weight gain.</p>"},{"location":"aegps/data-types/","title":"Data Types","text":"<p>Whenever possible, After Effects presents plug-ins with opaque data types, and provides accessor functions for manipulating them. For example, video frames are represented using the opaque AEGP_WorldH. While in some cases it might be more efficient to simply modify the underlying structure, by maintaining the opaqueness of the data types we allow for changes to our implementation without making you recompile (and redistribute) your plug-ins.</p>"},{"location":"aegps/data-types/#aegp-api-data-types","title":"AEGP API Data Types","text":"<p>Type</p> <p>Describes</p> <p>Manage Using</p> <p><code>AEGP_MemHandle</code></p> <p>This structure contains more than just the referenced memory. So it should not be dereferenced directly.</p> <p>Use <code>AEGP_LockMemHandle</code> in the AEGP Memory Suite to get a pointer to the memory referenced by the <code>AEGP_MemHandle</code>. And of course, unlock it when you're done.</p> <p>AEGP Memory Suite</p> <p><code>AEGP_ProjectH</code></p> <p>The current After Effects project. Projects are a set of elements arranged hierarchically in a tree to preserve semantic relationships.</p> <p>Interior nodes of the tree are folders.</p> <p>As of CS6, there will only ever be one open project.</p> <p>AEGP Project Suite</p> <p><code>AEGP_ItemH</code></p> <p>An abstraction describing any element of a project, including folders. An item is anything that can be selected.</p> <p>Since multiple object types can be selected, we treat them as AEGP_ItemHs until more specificity is required.</p> <p>AEGP Item Suite</p> <p><code>AEGP_Collection2H</code></p> <p>A set of selected items.</p> <p>AEGP Collection Suite</p> <p><code>AEGP_CompH</code></p> <p>A composition is a sequence of renderable items that, together, produce output.</p> <p>A composition exists over a time interval.</p> <p>Multiple compositions can exist within one project.</p> <p>AEGP Composition Suite</p> <p><code>AEGP_FootageH</code></p> <p>An item that can be rendered. Folders and compositions are the only items that are not footage.</p> <p>AEGP Footage Suite</p> <p><code>AEGP_LayerH</code></p> <p>An element of a composition. Layers are rendered in sequence, which allows for occlusions.</p> <p>Solids, text, paint, cameras, lights, images, and image sequences are all represented as layers.</p> <p>Layers may be defined over sub-intervals of the composition's time interval.</p> <p>AEGP Layer Suite</p> <p><code>AEGP_WorldH</code></p> <p>A frame of pixels.</p> <p>AEGP World Suite</p> <p><code>AEGP_EffectRefH</code></p> <p>An effect applied to a layer. An effect is a function that takes as its argument a layer (and possibly other parameters) and returns an altered version of the layer for rendering.</p> <p>AEGP Effect Suite</p> <p><code>AEGP_StreamRefH</code></p> <p>Any parameter stream attached to a layer, in a composition.</p> <p>See the description of <code>AEGP_GetNewLayerStream</code> from AEGP_StreamSuite5 for a full list of stream types.</p> <p>AEGP Stream Suite, AEGP Dynamic Stream Suite, AEGP Keyframe Suite</p> <p><code>AEGP_MaskRefH</code></p> <p>A mask applied to a layer. An AEGP_MaskRefH is used to access details about the mask stream, not the specific points which constitute the mask.</p> <p>A mask is a rasterized path (sequence of vertices) that partitions a layer into two pieces, allowing each to be rendered differently.</p> <p>AEGP Mask Suite</p> <p><code>AEGP_MaskOutlineValH</code></p> <p>The specific points which constitute the mask.</p> <p>The points in a mask outline are ordered, and the mask need not be closed.</p> <p>AEGP Mask Outline Suite</p> <p><code>AEGP_TextDocumentH</code></p> <p>Represents the actual text associated with a text layer.</p> <p>AEGP Text Document Suite</p> <p><code>AEGP_TextOutlinesH</code></p> <p>A reference to all the paths that make up the outlines of a given text layer.</p> <p>AEGP Text Layer Suite</p> <p><code>AEGP_MarkerVal</code></p> <p>The data associated with a given timeline marker.</p> <p>AEGP Marker Suite</p> <p><code>AEGP_PersistentBlobH</code></p> <p>A \"blob\" of data containing the current preferences.</p> <p>AEGP Persistent Data Suite</p> <p><code>AEGP_RenderOptionsH</code></p> <p>The settings associated with a render request.</p> <p>AEGP Render Options Suite</p> <p><code>AEGP_LayerRenderOptionsH</code></p> <p>The settings associated with a layer render request.</p> <p>AEGP Layer Render Options Suite</p> <p><code>AEGP_FrameReceiptH</code></p> <p>A reference to a rendered frame.</p> <p>AEGP Render Suite</p> <p><code>AEGP_RQItemRefH</code> </p> <p>An item in the render queue. </p> <p>AEGP Render Queue Suite, AEGP Render Queue Item Suite</p> <p><code>AEGP_OutputModuleRefH</code></p> <p>An output module, attached to a specific AEGP_RQItemRef in the render queue.</p> <p>AEGP Output Module Suite</p> <p><code>AEGP_SoundDataH</code></p> <p>The audio settings used for a given layer.</p> <p>AEGP Sound Data Suite</p> <p><code>AEGP_RenderLayerContextH</code></p> <p>State information at the time of a render request, sent to an Artisan by After Effects.</p> <p>AEGP Canvas Suite</p> <p><code>AEGP_RenderReceiptH</code></p> <p>Used by Artisans when rendering.</p> <p>AEGP Canvas Suite</p>"},{"location":"aegps/data-types/#nasty-brutish-and-short","title":"Nasty, Brutish, and Short","text":"<p>Information about layers, streams, and many other items doesn't survive long; it's often invalidated by user activity.</p> <p>Anything that modifies the quantity (not quality) of items will invalidate references to those items; adding a keyframe to a stream invalidates references to that stream, but forcing a layer to be rendered doesn't invalidate references to it. Do not cache layer pixels.</p> <p>Caching references between calls to a specific hook function within your plug-in is not recommended; acquire information when you need it, and forget (release) it as soon as possible.</p>"},{"location":"aegps/data-types/#were-you-just-going-to-leave-that-data-lying-around","title":"Were You Just Going To Leave That Data Lying Around?","text":"<p>When you ask After Effects to populate and return handles to data structures, it's important that you clean up after yourself. For the following data types, you must call the appropriate disposal routines.</p>"},{"location":"aegps/data-types/#data-types-requiring-disposal","title":"Data Types Requiring Disposal","text":"<p>Data Type</p> <p>Disposal Function</p> <p><code>AEGP_Collection2H</code></p> <p><code>AEGP_DisposeCollection</code>, from AEGP_CollectionSuite2</p> <p><code>AEGP_FootageH</code></p> <p><code>AEGP_DisposeFootage</code>, from AEGP_FootageSuite5</p> <p><code>AEGP_WorldH</code> </p> <p><code>AEGP_Dispose</code>, from AEGP_WorldSuite3 (Or <code>AEGP_DisposeTexture</code>, from AEGP_CanvasSuite8, if layer texture created using <code>AEGP_RenderTexture</code>)</p> <p><code>AEGP_EffectRefH</code></p> <p><code>AEGP_DisposeEffect</code>, from AEGP_EffectSuite4</p> <p><code>AEGP_MaskRefH</code></p> <p><code>AEGP_DisposeMask</code>, from AEGP_MaskSuite6</p> <p><code>AEGP_RenderOptionsH</code></p> <p><code>AEGP_Dispose</code>, from AEGP_RenderQueueMonitorSuite1</p> <p><code>AEGP_LayerRenderOptionsH</code></p> <p><code>AEGP_Dispose</code>, from AEGP_LayerRenderOptionsSuite1</p> <p><code>AEGP_RenderReceiptH</code></p> <p><code>AEGP_DisposeRenderReceipt</code>, from AEGP_CanvasSuite8</p>"},{"location":"aegps/implementation/","title":"Implementation","text":"<p>Because the functionality available through the AEGP API is so vast, and the integration with After Effects so complete, a good deal of design work is necessary to ensure that your plug-in behaves appropriately in all situations.</p> <p>AEGPs interact with After Effects through PICA function suites.</p> <p>AEGPs are not loaded in a specific order.</p> <p>Check the version of the AEGP API (from within your AEGP's entry point function) to confirm whether a given suite will be available.</p> <p>AEGPs may also use any effect API suite function which doesn't require a PF_ProgPtr (obtained by effects from PF_InData).</p>"},{"location":"aegps/implementation/#entry-point","title":"Entry Point","text":"<pre><code>A_Err AEGP_PluginInitFuncPrototype(\n    struct SPBasicSuite  *pica_basicP,\n    A_long               major_versionL,\n    A_long               minor_versionL,\n    AEGP_PluginID        aegp_plugin_id,\n    AEGP_GlobalRefcon    *global_refconP)\n</code></pre> <p>The plug-in's entry point, exported in the PiPL Resources, is called just once during launch; all other calls to the AEGP go to the functions it's registered.</p> <p>This is very different from the effect plug-in model, where all communication comes through the same entry point.</p> <p>Because plug-in load order may vary, it's never a good idea to acquire suites not provided by After Effects during your entry point function. Rather, wait until the appropriate hook function(s).</p> <p>The AEGP API Versions can help distinguish between different versions of After Effects, in case the AEGP needs to behave differently or handle different behavior.</p> <p>Those other functions are registered as callback hooks. An AEGP that adds menu items must register an UpdateMenuHook function (with a function signature as described in AE_GeneralPlug.h) which After Effects can call to determine whether or not to enable those items. Similarly, plug-ins which process commands register a CommandHook (one for all commands).</p>"},{"location":"aegps/implementation/#specialization","title":"Specialization","text":"<p>AEIOs and Artisans must register with After Effects in order to receive the messaging streams on which they depend.</p> <p>Like everything else in the AEGP API, this is done through a function suite; in this case, the aptly-named AEGP_RegisterSuite.</p>"},{"location":"aegps/implementation/#example-adding-a-menu-item","title":"Example: Adding A Menu Item","text":"<p>During your entry point function, use <code>AEGP_GetUniqueCommand()</code> from Command Suite to obtain a command ID from After Effects, for use with <code>AEGP_InsertMenuCommand</code>. Use a different ID for each menu item you add.</p> <p>Using AEGP_RegisterSuite's <code>AEGP_RegisterCommandHook()</code>, tell After Effects which function to call when your menu item(s) are selected. The function you register using <code>AEGP_RegisterUpdateMenuHook()</code> enables and disabling your menu item(s). Your menu item(s) will be permanently disabled unless you register a menu updating function.</p> <p>No matter how many menu items you add, you register only one CommandHook. When called, determine which menu item was chosen (based on the command ID), use AEGP PICA suite functions to determine the current state of the project, and act accordingly. For example, keyframing plug-ins may want to disable their menu items unless a (keyframe-able) parameter stream is part of the current selection.</p>"},{"location":"aegps/implementation/#private-data","title":"Private Data","text":"<p>Unlike effects, AEGPs are never unloaded during an After Effects session. Still, that doesn't mean that relying on static and global variables is a good idea.</p> <p>All hook functions are passed a plugin_refconPV for storage information specific to that function. Many AEGP Suite functions take the <code>aegp_plugin_id</code> as a parameter; store it in the <code>global_refconPV</code> you are passed, either in a structure you allocate or just the ID itself.</p> <p>Where possible, use these refcons to store information, not statics and global variables. This becomes especially important when dealing with multi-threading issues.</p> <p>Use <code>global_refconPV</code> for your globals (like your <code>aegp_plugin_id</code>) and refcon for hook-function-specific storage.</p> <p>A potential \"multiple instances of After Effects\" gotcha; when a second, command-line instance of After Effects is launched, all of an AEGP's handles are duplicated. If this causes problems (and it may), provide code that attaches saved handles to specific instantiations of your plug-in.</p>"},{"location":"aegps/implementation/#threading","title":"Threading","text":"<p>AEGP supports no threading at all. Everything must be done from the main thread, either in response to a callback, or from the idle hook.</p> <p>There is one call that is thread safe: <code>AEGP_CauseIdleRoutinesToBeCalled()</code>.</p> <p>But since <code>SPBasicSuite</code> itself is not thread safe, you'll need to stash off the function pointer in the main thread.</p>"},{"location":"aegps/overview/","title":"Overview","text":"<p>AEGPs use Plug-In Component Architecture (PICA) function suites to access all functionality.</p> <p>They may also publish their own function suites, for use by effect plug-ins (since plug-in load order varies, AEGPs can't depend on suites not provided by After Effects).</p> <p>AEGPs can also request a suite and, if it's not present, provide replacement functionality themselves.</p>"},{"location":"aegps/overview/#aegp-communication-with-after-effects","title":"AEGP Communication With After Effects","text":"<p>For effect plug-ins, all communication with After Effects occurs through a single entry point function. This is not the case with AEGPs.</p> <p>While After Effects does call the entry point function designated in the AEGP's PiPL (which is still required), all subsequent communication between After Effects and AEGPs is handled by the hook functions the AEGP registers.</p> <p>This registration must be performed from within the plug-in's entry function, using the Register Suite.</p>"},{"location":"aegps/overview/#different-tasks-same-api","title":"Different Tasks, Same API","text":"<p>AEGPs work in the same manner, regardless of specialization.</p> <p>They can be simple, just adding one menu item to trigger an external application, or complex like Artisans.</p> <p>While any plug-in can access any function suite, only plug-ins of the appropriate type will have access to all the required parameters.</p> <p>Only Artisans will have render contexts, and only AEIO plug-ins will receive input and output specifications; messaging is dependent upon which hook functions are registered.</p>"},{"location":"aeios/AEIO_ModuleInfo/","title":"AEIO_ModuleInfo","text":"<p>This is the structure where your AEIO will define its basic properties.</p> <p>Notice that, in addition to describing the filetypes and extensions supported by your AEIO, you also describe your signature and behavior using the AEIO_ModuleFlags. We love flags.</p>"},{"location":"aeios/AEIO_ModuleInfo/#aeio_moduleinfo-members","title":"AEIO_ModuleInfo Members","text":"<p>Member</p> <p>Purpose</p> <p><code>sig</code></p> <p>A long, uniquely identifying your plug-in.</p> <p>Many developers prefer to use a decidedly Mac-ish four character code here.</p> <p>Please let us know what sig you're using.</p> <p><code>name</code></p> <p>Descriptive name for your AEIO plug-in.</p> <p><code>flags</code></p> <p>Set of <code>AEIO_ModuleFlags</code>.</p> <p><code>flags2</code></p> <p>Set of <code>AEIO_ModuleFlags2</code>.</p> <p><code>max_width</code>, <code>max_height</code></p> <p>The maximum dimensions supported by your format.</p> <p><code>num_filetypes</code></p> <p>The number of filetypes supported by your AEIO.</p> <p><code>num_extensions</code></p> <p>The number of file extensions supported by your AEIO.</p> <p><code>num_clips</code></p> <p>The number of clipboard formats supported by your AEIO.</p> <p><code>create_kind</code></p> <p>The macOS four character code for files created by your AEIO.</p> <p><code>create_ext</code></p> <p>The file extension for files created by your AEIO.</p> <p><code>read_kinds</code></p> <p>This array of 16 <code>AEIO_FileKinds</code> need not be entirely filled out, but the first <code>[num_filetypes + num_extensions + num_clips]</code> ones must be populated, in that order.</p> <p><code>num_aux_extensions</code></p> <p>The number of auxiliary extensions supported by your AEIO.</p> <p>Say, for example, that you're writing an AEIO to import information from a 3D program that saves scene information into a .123 file, and camera information into a .xyz file.</p> <p>The .xyz would be an auxiliary extension; it's not necessary to get the rest of the scene information, but it's associated with the .123 files.</p> <p><code>aux_ext</code></p> <p>The file extension of the auxiliary filetype(s) supported by your AEIO.</p>"},{"location":"aeios/AEIO_ModuleInfo/#behavior-flags","title":"Behavior Flags","text":"<p>AEIOs set these flags (like effect plug-ins use global outflags) in AEIO_ModuleInfo.flags to indicate their behavior to After Effects. Some flags are only relevant to input, and some are only relevant to output.</p>"},{"location":"aeios/AEIO_ModuleInfo/#aeio_moduleflags","title":"AEIO_ModuleFlags","text":"<p>Flag</p> <p>Purpose</p> <p>I or O?</p> <p><code>AEIO_MFlag_INPUT</code></p> <p>AEIO is an input module.</p> <p>Input!</p> <p><code>AEIO_MFlag_OUTPUT</code></p> <p>AEIO is an output module (one plug-in can be both).</p> <p>Output!</p> <p><code>AEIO_MFlag_FILE</code></p> <p>Each clip imported directly corresponds to a file, somewhere.</p> <p>Both</p> <p><code>AEIO_MFlag_STILL</code></p> <p>Supports still images, not video.</p> <p>Output</p> <p><code>AEIO_MFlag_VIDEO</code></p> <p>Supports video images, not stills.</p> <p>Output</p> <p><code>AEIO_MFlag_AUDIO</code></p> <p>Supports audio.</p> <p>Output</p> <p><code>AEIO_MFlag_NO_TIME</code></p> <p>Time information isn't part of the file format.</p> <p>This would be the case with numbered stills, with individual frames imported based on the composition's time settings.</p> <p>Input</p> <p><code>AEIO_MFlag_INTERACTIVE_GET</code></p> <p>A new input sequence necessitates user interaction.</p> <p>This would be the case for a non-file-based input module.</p> <p>Input</p> <p><code>AEIO_MFlag_INTERACTIVE_PUT</code></p> <p>A new output sequence necessitates user interaction.</p> <p>This would be the case for a non-file-based output module.</p> <p>Output</p> <p><code>AEIO_MFlag_CANT_CLIP</code></p> <p>The AEIO's drawing functions cannot accept dimensions smaller than the requested dimensions.</p> <p>Input</p> <p><code>AEIO_MFlag_MUST_INTERACT_PUT</code></p> <p>The AEIO must display a dialog box, even if a valid options data handle is available.</p> <p>Output</p> <p><code>AEIO_MFlag_CANT_SOUND_INTERLEAVE</code></p> <p>The AEIO requires that all video data be processed, then sound data (instead of interleaving the processing the video and audio).</p> <p>Output</p> <p><code>AEIO_MFlag_CAN_ADD_FRAMES_NON_LINEAR</code></p> <p>The AEIO supports adding non-sequential frames.</p> <p>Output</p> <p><code>AEIO_MFlag_HOST_DEPTH_DIALOG</code></p> <p>The AEIO wants After Effects to display a bit-depth selection dialog.</p> <p>Input</p> <p><code>AEIO_MFlag_HOST_FRAME_START_DIALOG</code></p> <p>The AEIO wants After Effects to display a dialog requesting that the user specify a starting frame.</p> <p>Input</p> <p><code>AEIO_MFlag_NO_OPTIONS</code></p> <p>The AEIO does not accept output options.</p> <p>Output</p> <p><code>AEIO_MFlag_NO_PIXELS</code></p> <p>The AEIO's file format doesn't actually store pixels. Currently unused as of CS6.</p> <p>(unused)</p> <p><code>AEIO_MFlag_SEQUENCE_OPTIONS_OK</code></p> <p>The AEIO will adopt the sequence options of its parent if a folder is selected.</p> <p>Input</p> <p><code>AEIO_MFlag_INPUT_OPTIONS</code></p> <p>The AEIO has user options associated with each input sequence.</p> <p>Note</p> <p>The options information must be flat (not referring to any data contained in external pointers or handles).</p> <p>Input</p> <p><code>AEIO_MFlag_HSF_AWARE</code></p> <p>The AEIO will provide horizontal scaling factor (pixel aspect ratio) information for each new sequence.</p> <p>This prevents After Effects from guessing.</p> <p>Input</p> <p><code>AEIO_MFlag_HAS_LAYERS</code></p> <p>The AEIO supports multiple layers in a single document.</p> <p>Input</p> <p><code>AEIO_MFlag_SCRAP</code></p> <p>The AEIO has a clipboard parsing component.</p> <p>Input</p> <p><code>AEIO_MFlag_NO_UI</code></p> <p>After Effects should display no UI for this module</p> <p>(do not combine this flag with <code>AEIO_MFlag_HOST_DEPTH_DIALOG</code> or <code>AEIO_MFlag_HOST_FRAME_START_DIALOG</code>)</p> <p>Input</p> <p><code>AEIO_MFlag_SEQ_OPTIONS_DLG</code></p> <p>The AEIO has sequence options accessible from the More Options button in the Interpret Footage dialog.</p> <p>Input</p> <p><code>AEIO_MFlag_HAS_AUX_DATA</code></p> <p>The file format supported by the AEIO has depth information, normals, or some other non-color information related to each pixel.</p> <p>Input</p> <p><code>AEIO_MFlag_HAS_META_DATA</code></p> <p>The file format supported by the AEIO supports user-definable metadata.</p> <p>If this flag is set, the embed pop-up in the output module dialog will be enabled.</p> <p>Output</p> <p><code>AEIO_MFlag_CAN_DO_MARKERS</code></p> <p>The file format support by the AEIO supports markers, url flips, and/or chapters.</p> <p>Output</p> <p><code>AEIO_MFlag_CAN_DRAW_DEEP</code></p> <p>The AEIO can draw into 16bpc (\"deep\") <code>PF_EffectWorlds</code>.</p> <p>Input</p> <p><code>AEIO_MFlag_RESERVED4</code> </p> <p>Special super-secret flag. Doesn't do anything...or does it? (No, it doesn't.)</p> <p>??? </p>"},{"location":"aeios/AEIO_ModuleInfo/#aeio_moduleflags2","title":"AEIO_ModuleFlags2","text":"<p>Gotta have dem flags...</p> Flag Purpose I or O? <code>AEIO_MFlag2_AUDIO_OPTIONS</code> The AEIO has an audio options dialog. Output <code>AEIO_MFlag2_SEND_ADDMARKER_BEFORE_ADDFRAME</code> The AEIO wants to receive marker data before outputting video or audio (useful for MPEG streams). Output <code>AEIO_MFlag2_CAN_DO_MARKERS_2</code> The AEIO supports combined markers; URL flips, chapters, and comments. Output <code>AEIO_MFlag2_CAN_DRAW_FLOAT</code> The AEIO can draw into float (32-bpc) worlds. Input <code>AEIO_MFlag2_CAN_DO_AUDIO_32</code> Supports 32-bit audio output. Output <code>AEIO_MFlag2_SUPPORTS_ICC_PROFILES</code> Supports ICC profiles. Both <code>AEIO_MFlag2_CAN_DO_MARKERS_3</code> The AEIO supports combined markers; URL flips, chapters, comments, and cue points. Output <code>AEIO_MFlag2_SEND_ADDMARKER_BEFORE_STARTADDING</code> The AEIO wants to process markers before video during export. Output <code>AEIO_MFlag2_USES_QUICKTIME</code> On MacOS, prior to the host calling <code>AEIO_AddFrame</code> or <code>AEIO_OutputFrame</code> from AEIO_FunctionBlock4, it will lock the global QuickTime mutex. Output"},{"location":"aeios/aeios/","title":"AEIOs","text":"<p>AEIOs are AEGPs that perform media file import and/or export. AEIOs do everything for a file of a given type that After Effects (or the plug-ins which ship with After Effects) would normally do. On the import side, AEIOs can open existing files, manage file-specific interpretation options, and provide audio and frames from the file to After Effects in AEGP_SoundWorld and PF_EffectWorld format. Additionally, AEIOs can create files interactively, asking users for the settings they'd like instead of reading them from a file. On the export side, AEIOs can create and manage output options for render queue items, create output files and save frames (provided by After Effects as PF_EffectWorlds) into those files.</p> <p>AEIOs work with uncompressed video with pixels in ARGB order from low to high-byte. Pixels can be 8-bit, 16-bit, or 32-bit float per channel. AEIOs must handle their own compression/decompression of any codecs supported.</p>"},{"location":"aeios/aeios/#aeio-or-aegp","title":"AEIO, or AEGP?","text":"<p>AEIOs provide pixels and audio data to After Effects.</p> <p>If you're writing an importer/exporter for a file format that represents timeline or project format (referencing file formats supported by After Effects or other installed AEIOs), write an AEGP and add its command to the Import/Export submenu.</p>"},{"location":"aeios/aeios/#aeio-for-import-or-mediacore-importer","title":"AEIO For Import, Or MediaCore Importer?","text":"<p>After Effects supports MediaCore importer plug-ins. MediaCore is a set of shared libraries that grew out of Premiere Pro; thus the MediaCore APIs are described in the Premiere Pro SDK.</p> <p>Only MediaCore importer plug-ins support an importer priority system: The highest priority importer gets the first opportunity to import a file, and if the particular imported file isn't supported, the next-highest priority importer will then have the opportunity to try importing it, and so on. MediaCore importers cannot defer file import to an AEIO. So if your goal is to take over file handling for any file type for which After Effects already provides a plug-in, you need to develop a MediaCore importer plug-in.</p> <p>If the above constraints haven't already answered whether you need to build an AEIO or MediaCore importer, then you'll likely want to build a MediaCore importer, which can be used across the video and audio applications including Premiere Pro, Media Encoder, Prelude, SpeedGrade, and Audition.</p>"},{"location":"aeios/aeios/#how-it-works","title":"How It Works","text":"<p>From within its entry point function, an AEIO populates a structure of function pointers with the names of the functions it wants called in response to certain events. Many of these function hooks are optional.</p>"},{"location":"aeios/aeios/#what-would-after-effects-do","title":"What Would After Effects Do?","text":"<p>For many AEIO hook functions, you can ask After Effects to perform default processing (this capability is noted in each hook's descriptions).</p> <p>Unless you have compelling reasons to do otherwise, return <code>AEIO_Err_USE_DFLT_CALLBACK</code> from the function, and let After Effects do the work.</p> <p>This is also a good way to learn the calling sequence before beginning implementation.</p>"},{"location":"aeios/aeios/#registering-your-aeio","title":"Registering Your AEIO","text":"<p>During your plug-in's entry point function, populate a AEIO_ModuleInfo describing the filetype(s) the AEIO supports, and an AEIO_FunctionBlock structure that points to your file handling functions. For some of these functions, you can rely on After Effects' default behavior by returning AEIO_Err_USE_DFLT_CALLBACK. However, you must still provide a function matching the required signature, that does so. Once you've filled out both these structures, call <code>AEGP_RegisterIO()</code> from AEGP_RegisterSuites5.</p> <p>In the AEIO_ModuleInfo that you pass in to the register call, you provide the file type and description information that After Effects uses in the Import dialog, for the \"Files of type\" drop-down on Windows, or the Enable drop-down on MacOS. As of CS6, file extensions cannot be more than three characters long, even though we have a few built-in importers with longer extensions.</p>"},{"location":"aeios/aeios/#inspec-outspec","title":"InSpec, OutSpec","text":"<p>On most import-related functions, an <code>AEIO_InSpecH</code> is passed. On most output-related functions, an <code>AEIO_OutSpecH</code> is passed.</p> <p>What are these mysterious handles? These opaque data handles can be used with AEGP_IOInSuite5 and AEGPIOOutSuite4, to set or query for information about the import or output.</p> <p>For example, on an import, you'll use <code>AEIO_InSpecH</code> when calling <code>AEGP_SetInSpecDimensions</code> in AEGP_IOInSuite.</p> <p>And during an export, you'll use <code>AEIO_OutSpecH</code> when calling <code>AEGP_GetOutSpecDimensions</code> in <code>AEGP_IOOutSuite</code>. So use these handles to exchange information with After Effects about the details of the input or output.</p>"},{"location":"aeios/calling-sequence/","title":"Calling Sequence","text":"<p>As with all AEGPs, the entry point function exported in the plug-in's PiPL is called during launch. During this function, the AEIO must provide function pointers to required functions and describe their capabilities, then pass the appropriate structures to AEGP_RegisterIO().</p>"},{"location":"aeios/calling-sequence/#import","title":"Import","text":"<p>When users select a file in the file import dialog which is of a type handled by your AEIO, its AEIO_VerifyFileImportable() function will be called; it's called again for each such file the user imports. AEIO_InitInSpecFromFile() will be called for each file; parse the file, and use the various set functions to describe it to After Effects. Also, construct any options data associated with the file, and save that data using AEGP_SetInSpecOptionsHandle().</p> <p>After Effects then calls the plug-in's AEIO_GetInSpecInfo() function, to get descriptive text about the file for display in the project window. As noted in the description of this function, it may be called for folders as well; we recommend that, if there is no valid options data for the file, you do nothing and return no error (that's what our AEIOs do).</p> <p>AEIO_CountUserData() is then sent; if the AEIO indicates that there is user data present, AEIO_GetUserData() will follow. After Effects will then request that the plug-in draw a frame of video (for the project window thumbnail) by sending AEIO_DrawSparseFrame().</p> <p>Once the supported file is added to a composition, user interaction will generate calls to <code>AEIO_DrawSparseFrame()</code> and AEIO_GetSound().</p> <p>When the project is saved, and if there is options data associated with the AEIO_InSpec, After Effects will send AEIO_FlattenOptions() during which the AEIO parses the options data, and creates a representation of it that contains no references to external memory. Likewise, the presence of any AEIO_OutSpec options data will result in AEIO_GetFlatOutputOptions() being sent.</p>"},{"location":"aeios/calling-sequence/#export","title":"Export","text":"<p>If the user adds an item to the render queue and chooses the AEIO's supported output format, AEIO_InitOutputSpec() will be sent. Use the various get functions to obtain information about the output settings, and store any pertinent information using AEGP_SetOutSpecOptionsHandle(), followed by <code>AEIO_GetFlatOutputOptions()</code>. AEIO_GetDepths() is sent so After Effects can determine what output pixel bit depths the AEIO supports. AEIO_GetOutputInfo() is sent so that file name, type and subtype information can be displayed in the output module details.</p> <p>When the user clicks on the Format Options button, in the render queue, AEIO_UserOptionsDialog() is called.</p> <p>When the user actually clicks on the \"Render\" button, AEIO_SetOutputFile() will be called, followed by AEIO_GetSizes() (your AEIO is responsible for determining whether the destination has sufficient disk space available).</p> <p>Before the video frames are sent, AEIO_StartAdding() is sent for the AEIO to open the file handle and write out the file header. If the AEIO supports a video or audio format, AEIO_AddSoundChunk() is sent for each audio chunk, and an AEIO_AddFrame() for each video frame.</p> <p>If the AEIO supports sequences of still images, AEIO_OutputFrame() is called repeatedly. After Effects sends a PF_EffectWorld representation of the frame to be output.</p> <p>AEIO_WriteLabels() is called (for each frame) to give the plug-in a chance to write out field and alpha interpretation information. AEIO_EndAdding() is sent when there are no more frames (or audio) to be output. Close the output file.</p>"},{"location":"aeios/implementation-details/","title":"Implementation Details","text":""},{"location":"aeios/implementation-details/#export-bit-depth","title":"Export Bit-Depth","text":"<p>In the Output Module Settings, the user can choose a Depth based on the options the AEIO declares support for in <code>AEIO_GetDepths()</code> from AEIO_FunctionBlock4.</p> <p>If a plug-in supports higher bit-depth exports, it should be able to handle these higher bit-depth PF_EffectWorlds passed in <code>AEIO_AddFrame()</code> or <code>AEIO_OutputFrame()</code>, even when the export setting is not set to the same depth.</p> <p>The frame delivered to the AEIO, and the final output will not necessarily be the same depth.</p> <p>You may get frames passed in the project bit-depth instead of the final output if After Effects thinks that will be higher quality.</p>"},{"location":"aeios/implementation-details/#user-data-vs-options","title":"User Data vs. Options","text":"<p>It's possible to use either user data allocations or options handles to store metadata about a file.</p> <p>We use user data for information that's to be embedded in the file (presuming the file format supports such information); marker data, field labels, etc.</p> <p>We use option handles for information about the file; output settings, dimensions, details of compression settings used.</p>"},{"location":"aeios/new-kids-on-the-function-block/","title":"New Kids On The Function Block","text":"<p>During its main entry point function, each AEIO plug-in must fill in an AEIO_FunctionBlock, providing pointers to the functions After Effects will call for different file-related tasks.</p> <p>The table below shows which functions are needed for input, and which ones are needed for output. For a bare-bones implementation, start with the functions that are noted as \"Required\" in the right column. You can often invoke \"best-case\" behavior by having After Effects handle the call for you (by returning <code>AEIO_Err_USE_DFLT_CALLBACK</code>).</p> <p>For a barebones AEIO for video input only, implement the following functions: <code>AEIO_InitInSpecFromFile</code> or <code>AEIO_InitInSpecInteractive</code> (depending on whether the source is a file or interactively generated), <code>AEIO_DisposeInSpec</code>, <code>AEIO_GetInSpecInfo</code>, <code>AEIO_DrawSparseFrame</code>, <code>AEIO_CloseSourceFiles</code>, and <code>AEIO_InqNextFrameTime</code> (using <code>AEIO_Err_USE_DFLT_CALLBACK</code> is fine).</p> <p>Starting from the IO sample, it is best to leave the other functions defined too, and fill them in further as needed.</p>"},{"location":"aeios/new-kids-on-the-function-block/#aeio_functionblock4","title":"AEIO_FunctionBlock4","text":"<p>Function</p> <p>Response</p> <p>I or O?</p> <p>Required?</p> <p><code>AEIO_InitInSpecFromFile</code></p> <p>Given a file path, describe its contents to After Effects in the provided <code>AEIO_InSpecH</code>. Use all appropriate \"set\" calls from the AEGP_IOInSuite to do so; if there is image data, set its depth, dimensions, and alpha interpretation. If there is audio, describe its channels and sample rate.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p><pre><code>AEIO_InitInSpecFromFile(\n  AEIO_BasicData     *basic_dataP,\n  const A_UTF16Char  *file_pathZ,\n  AEIO_InSpecH       inH);\n</code></pre></p> <p>Input</p> <p>Yes, for file-based media</p> <p><code>AEIO_InitInSpecInteractive</code></p> <p>Using some form of user interaction (and not a file path provided by After Effects), describe the audio and video your generated AEIO_InSpecH contains.</p> <p><pre><code>AEIO_InitInSpecInteractive(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH);\n</code></pre></p> <p>Input</p> <p>Yes, for interactiv ely generated media</p> <p><code>AEIO_DisposeInSpec</code> </p> <p>Free an <code>AEIO_InSpecH</code>. <pre><code>AEIO_DisposeInSpec(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH);\n</code></pre></p> <p>Input </p> <p>Yes </p> <p><code>AEIO_FlattenOptions</code></p> <p>For the given <code>AEIO_InSpecH</code>, return a flattened version of the data contained in its options handle.</p> <p>Obtain the unflattened options handle using <code>AEGP_GetInSpecOptionsHandle</code>.</p> <p><pre><code>AEIO_FlattenOptions(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  AEIO_Handle     *flat_optionsPH);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_InflateOptions</code></p> <p>For the given <code>AEIO_InSpecH</code>, create (using <code>AEGP_SetInSpecOptionsHandle</code>) an unflattened version of its flattened option data.</p> <p><pre><code>AEIO_InflateOptions(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  AEIO_Handle     flat_optionsH);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_SynchInSpec</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Inspect the <code>AEIO_InSpecH</code>, (update its options if necessary), and indicate whether or not you made changes.</p> <p><pre><code>AEIO_SynchInSpec(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_Boolean       *changed0);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetActiveExtent</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Populate the provided <code>A_LRect</code> with the active extent of the file's pixels at the given time.</p> <p><pre><code>AEIO_GetActiveExtent(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  const A_Time    *tr,\n  A_LRect         *extent);\n</code></pre></p> <p>Input</p> <p>Yes</p> <p><code>AEIO_GetInSpecInfo</code></p> <p>Provide a few strings in <code>AEIO_Verbiage</code> to describe the file, which will appear in the Project panel. This includes the strings used to describe the file type and subtype (the codec).</p> <p><pre><code>AEIO_GetInSpecInfo(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  AEIO_Verbiage   *verbiageP);\n</code></pre></p> <p>This function gets called OFTEN; every time we refresh the project panel. Keep allocations to a minimum.</p> <p>In the AEIOs that ship with After Effects, we check for a valid <code>optionsH</code> (using <code>AEGP_GetInSpecOptionsHandle</code>); if we find one, we use the information from within it. If not, we do nothing.</p> <p>This is important; if your AEIO handles still images, this function will get called for the folder containing the stills. Hopefully, there won't be an optionsH associated with it (unless you're writing a truly bizarre AEIO).</p> <p>Input</p> <p>Yes</p> <p><code>AEIO_DrawSparseFrame</code></p> <p>Draw a frame from the <code>AEIO_InSpecH</code>.</p> <p>The <code>PF_EffectWorld*</code> contains the width and height to use, but make sure you take the required_region0 into account, if it's not <code>NULL</code>.</p> <p><pre><code>AEIO_DrawSparseFrame(\n  AEIO_BasicData            *basic_dataP,\n  AEIO_InSpecH              inH,\n  AEIO_Quality              qual,\n  const AEIO_RationalScale  *rs0,\n  const A_Time              *tr,\n  const A_Time              *duration0,\n  const A_Rect               *required_region0,\n  PF_EffectWorld            *wP,\n  A_long&lt;em&gt;                   originx,\n  A_long&lt;/em&gt;                   originy,\n  AEIO_DrawingFlags         *draw_flagsP);\n</code></pre></p> <p>NOTE: return data as linear light (1.0), and After Effects will perform any necessary transformations to bring the footage into the working colorspace.</p> <p>Input</p> <p>Yes</p> <p><code>AEIO_GetDimensions</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Provide the dimensions (and, if necessary, scaling factor) of the video in the AEIO_InSpecH.</p> <p><pre><code>AEIO_GetDimensions(\n  AEIO_BasicData            *basic_dataP,\n  AEIO_InSpecH              inH,\n  const AEIO_RationalScale  *rs0,\n  A_long                    *width0,\n  A_long                    *height0);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetDuration</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Provide the duration of an <code>AEIO_InSpecH</code>, in seconds.</p> <p><pre><code>AEIO_GetDuration(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_Time          *trP);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetTime</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Provide the timebase of an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_GetTime(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_Time          *tr);\n</code></pre></p> <p>Here are the values we use internally for common timebases:</p> <ul> <li>29.97 fps: <code>scale = 100; value= 2997;</code></li> <li>59.94 fps: <code>scale = 50; value = 2997;</code></li> <li>23.976 fps: <code>scale = 125; value = 2997;</code></li> <li>30 fps: <code>scale = 1; value = 30;</code></li> <li>25 fps: <code>scale = 1; value = 25;</code></li> </ul> <p>Input</p> <p>No</p> <p><code>AEIO_GetSound</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Provide sound from an <code>AEIO_InSpecH</code>, at the quality described.</p> <p><pre><code>AEIO_GetSound(\n  AEIO_BasicData             *basic_dataP,\n  AEIO_InSpecH               inH,\n  AEIO_SndQuality            quality,\n  const AEIO_InterruptFuncs  *interrupt_funcsP0,\n  const A_Time               *startPT,\n  const A_Time               *durPT,\n  A_u_long                   start_sampLu,\n  A_u_long                   num_samplesLu,\n  void                       *dataPV);\n</code></pre></p> <p><code>AEIO_SndQuality</code> may be:</p> <ul> <li><code>AEIO_SndQuality_APPROX</code>, (this quality is used to draw the audio waveform)</li> <li><code>AEIO_SndQuality_LO</code>,</li> <li><code>AEIO_SndQuality_HI</code></li> </ul> <p>Input</p> <p>No</p> <p><code>AEIO_InqNextFrameTime</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed.</p> <p>Provide the time of the next frame (in the source footage's timebase) within the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_InqNextFrameTime(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  const A_Time    *base_time_tr,\n  AEIO_TimeDir    time_dir,\n  A_Boolean       *found0,\n  A_Time          *key_time_tr0);\n</code></pre></p> <p>Input</p> <p>Yes</p> <p><code>AEIO_InitOutputSpec</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed.</p> <p>Perform any initialization necessary for a new <code>AEIO_OutSpecH</code>, and indicate whether you made changes.</p> <p><pre><code>AEIO_InitOutputSpec(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_Boolean       *user_interacted);\n</code></pre></p> <p>Note</p> <p>The first time your AEIO is used, After Effects caches the last-known-good <code>optionsH</code> in its preferences.</p> <p>When testing this function, delete your preferences often.</p> <p>Output</p> <p>Yes</p> <p><code>AEIO_GetFlatOutputOptions</code></p> <p>Describe (in an <code>AEIO_Handle</code>) the output options for an <code>AEIO_OutSpecH</code>, in a disk-safe flat data structure (one that does not reference external memory).</p> <p>Note that your output options must be cross-platform, so pay attention to byte ordering issues.</p> <p><pre><code>AEIO_GetFlatOutputOptions(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  AEIO_Handle     *optionsH);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_DisposeOutputOptions</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Free the memory for the output options passed in.</p> <p><pre><code>AEIO_DisposeOutputOptions(\n  AEIO_BasicData  *basic_dataP,\n  void            *optionsPV);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_UserOptionsDialog</code></p> <p>Display an output settings dialog (select TIFF output within After Effects to see when this dialog will occur).</p> <p>Store this information in an options handle using <code>AEGP_SetInSpecOptionsHandle</code>.</p> <p><pre><code>AEIO_UserOptionsDialog(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  PF_EffectWorld  *sample0,\n  A_Boolean       *interacted0);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_GetOutputInfo</code></p> <p>Describe (in text) the output options in an <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEIO_GetOutputInfo(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  AEIO_Verbiage   *verbiage);\n</code></pre></p> <p><code>AEIO_OutputInfoChanged</code></p> <p>Update the <code>AEIO_OutSpecH</code> based on the current settings (using the various Get functions to obtain them).</p> <p><pre><code>AEIO_OutputInfoChanged(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_SetOutputFile</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Set the file path for output of an <code>AEIO_OutSpecH</code>.</p> <p>Return <code>AEIO_Err_USE_DEFAULT_CALLBACK</code> unless you've changed the path.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p><pre><code>AEIO_SetOutputFile(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_UTF16Char     *file_pathZ);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_StartAdding</code></p> <p>Prepare to add frames to the output file.</p> <p>This is a good time to create the ouput file(s) on disk, and to write any header information to such files. This is also your first opportunity to allocate pixel buffers based on valid output spec values.</p> <p><pre><code>AEIO_StartAdding(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_long          flags);\n</code></pre></p> <p>Output</p> <p>Yes, for writing formats that support multiple frames</p> <p><code>AEIO_AddFrame</code></p> <p>Add frame(s) to output file. You may pass a pointer to a function you want called if the user interrupts the render.</p> <p><pre><code>AEIO_AddFrame(\n  AEIO_BasicData       *basic_dataP,\n  AEIO_OutSpecH        outH,\n  A_long               frame_index,\n  A_long               frames,\n  PF_EffectWorld       *wP,\n  const A_LPoint       *origin0,\n  A_Boolean            was_compressedB,\n  AEIO_InterruptFuncs  *inter0);\n</code></pre></p> <p>Output</p> <p>Yes, for writing formats that support multiple frames</p> <p><code>AEIO_EndAdding</code></p> <p>Perform any clean-up associated with adding frames.</p> <p><pre><code>AEIO_EndAdding(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_long          flags);\n</code></pre></p> <p>Output</p> <p>Yes, for writing formats that support multiple frames</p> <p><code>AEIO_OutputFrame</code></p> <p>Output a single frame.</p> <p><pre><code>AEIO_OutputFrame(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  PF_EffectWorld  *wP);\n</code></pre></p> <p>Output</p> <p>Yes, for writing formats that support a single frame</p> <p><code>AEIO_WriteLabels</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Set alpha interpretation and field usage information for the <code>AEIO_OutSpecH</code>.</p> <p>Indicate in <code>AEIO_LabelFlags</code> which flags you wrote.</p> <p><pre><code>AEIO_WriteLabels(\n  AEIO_BasicData   *basic_dataP,\n  AEIO_OutSpecH    outH,\n  AEIO_LabelFlags  *written);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_GetSizes</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Provide information about file size and remaining free space on output volume.</p> <p><pre><code>AEIO_GetSizes(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_u_longlong    *free_space,\n  A_u_longlong    *file_size);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_Flush</code></p> <p>Destroy any options or user data associated with the <code>OutSpecH</code>.</p> <p><pre><code>AEIO_Flush(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH);\n</code></pre></p> <p><code>AEIO_AddSoundChunk</code></p> <p>Add the given sound to the output file.</p> <p><pre><code>AEIO_AddSoundChunk(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  const A_Time    *start,\n  AEIO_SndWorldH  swH);\n</code></pre></p> <p>Output</p> <p>Yes, for writing formats with audio</p> <p><code>AEIO_Idle</code></p> <p>Optional. Do something with idle time. <code>AEIO_Err_USE_DFLT_CALLBACK</code> is not supported.</p> <p><pre><code>AEIO_Idle(\n  AEIO_BasicData        *basic_dataP,\n  AEIO_ModuleSignature  sig,\n  AEIO_IdleFlags        *idle_flags0);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_GetDepths</code></p> <p>Set <code>AEIO_OptionsFlags</code> to indicate which pixel and color depths are valid for your output format.</p> <p>See the discussion on Export Bit-Depth.</p> <p><pre><code>AEIO_GetDepths(\n  AEIO_BasicData     *basic_dataP,\n  AEIO_OutSpecH      outH,\n  AEIO_OptionsFlags  *which);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_GetOutputSuffix</code></p> <p><code>AEIO_Err_USE_DFLT_CALLBACK</code> allowed. Describe the three character extension for the output file.</p> <p><pre><code>AEIO_GetOutputSuffix(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_char          *suffix);\n</code></pre></p> <p>Output</p> <p>Yes</p> <p><code>AEIO_SeqOptionsDlg</code></p> <p>Display a footage options dialog, and indicate whether the user made any changes.</p> <p><pre><code>AEIO_SeqOptionsDlg(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_Boolean       *interactedPB);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetNumAuxChannels</code></p> <p>Enumerate the auxiliary (beyond red, green, blue and alpha) channels of data contained in an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_GetNumAuxChannels(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_long          *num_channelsPL);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetAuxChannelDesc</code></p> <p>Describe the data type, name, channel, and dimensionality of an auxiliary data channel.</p> <p><pre><code>AEIO_GetAuxChannelDesc(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  long            chan_indexL,\n  PF_ChannelDesc  *descP);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_DrawAuxChannel</code></p> <p>Draw the auxiliary channel(s) from an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_DrawAuxChannel(\n  AEIO_BasicData          *basic_dataP,\n  AEIO_InSpecH            inH,\n  A_long                  chan_indexL,\n  const AEIO_DrawFramePB  *pbP,\n  PF_ChannelChunk         *chunkP);\n</code></pre></p> <p><code>AEIO_FreeAuxChannel</code></p> <p>Free data associated with an auxiliary channel.</p> <p><pre><code>AEIO_FreeAuxChannel(\n  AEIO_BasicData   *basic_dataP,\n  AEIO_InSpecH     inH,\n  PF_ChannelChunk  *chunkP);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_Num</code> AuxFiles</p> <p>Enumerate the files needed to render the given <code>AEIO_InSpecH</code>.</p> <p>This function and <code>AEIO_GetNthAuxFileSpec</code> will be called when the user chooses <code>File &gt; Dependencies &gt; Collect Files...</code>. Here your AEIO tells AE what the associated files are.</p> <p><pre><code>AEIO_NumAuxFiles(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    seqH,\n  A_long          *files_per_framePL);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_GetNthAuxFileSpec</code></p> <p>Retrieve data from the nth auxiliary file, for the specified frame.</p> <p>The path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEIO_GetNthAuxFileSpec(\n  AEIO_BasicData *basic_dataP,\n  AEIO_InSpecH   seqH,\n  A_long         frame_numL,\n  A_long         n,\n  AEGP_MemHandle *pathPH);\n</code></pre></p> <p>Input</p> <p>No, if no aux files</p> <p><code>AEIO_CloseSourceFiles</code></p> <p>Close (or open, depending upon closeB) the source files for an <code>AEIO_InSpecH</code>.</p> <p>When the user Collects Files, the AEIO will first be asked to close its source files, then re-open them.</p> <p><pre><code>AEIO_CloseSourceFiles(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    seqH,\n  A_Boolean       closeB);\n</code></pre></p> <ul> <li><code>TRUE</code> for close</li> <li><code>FALSE</code> for open.</li> </ul> <p>Input</p> <p>Yes</p> <p><code>AEIO_CountUserData</code></p> <p>Enumerate the units of user data associated with the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_CountUserData(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_u_long        typeLu,\n  A_u_long        max_sizeLu,\n  A_u_long        *num_of_typePLu);\n</code></pre></p> <p><code>AEIO_SetUserData</code></p> <p>Set user data (of the given index and type) for the given <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEIO_SetUserData(\n  AEIO_BasicData     *basic_dataP,\n  AEIO_OutSpecH      outH,\n  A_u_long           typeLu,\n  A_u_long           indexLu,\n  const AEIO_Handle  dataH);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_GetUserData</code></p> <p>Describe the user data (at the index and of the type given) associated with the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEIO_GetUserData(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_InSpecH    inH,\n  A_u_long        typeLu,\n  A_u_long        indexLu,\n  A_u_long        max_sizeLu,\n  AEIO_Handle     *dataPH);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_AddMarker</code></p> <p>Associate a marker of the specified type, at the specified frame, with the <code>AEIO_OutSpecH</code>.</p> <p>You may provide an interrupt function to handle user cancellation of this action.</p> <p><pre><code>AEIO_AddMarker(\n  AEIO_BasicData       *basic_dataP,\n  AEIO_OutSpecH        outH,\n  A_long               frame_index,\n  AEIO_MarkerType      marker_type,\n  void                 *marker_dataPV,\n  AEIO_InterruptFuncs  *inter0);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_VerifyFileImportable</code></p> <p>Indicate (by setting <code>importablePB</code>) whether or not the plug-in can import the file.</p> <p>Note that After Effects has already done basic extension checking; you may wish to open the file and determine whether or not it's valid.</p> <p>This can be a time-consuming process; most AEIOs that ship with After Effects simply return TRUE, and deal with bad files during <code>AEIO_InitInSpecFromFile</code>.</p> <p>The file path is a NULL-terminated UTF-16 string with platform separators.</p> <p><pre><code>AEIO_VerifyFileImportable(\n  AEIO_BasicData        *basic_dataP,\n  AEIO_ModuleSignature  sig,\n  const A_UTF16Char     *file_pathZ,\n  A_Boolean             *importablePB);\n</code></pre></p> <p>Input</p> <p>No</p> <p><code>AEIO_UserAudioOptionsDialog</code></p> <p>Display an audio options dialog.</p> <p><pre><code>AEIO_UserAudioOptionsDialog(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_Boolean       *interacted0);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_AddMarker3</code></p> <p>Add a marker, with a flag specifying whether or not this is a composition marker.</p> <p><pre><code>AEIO_AddMarker3(\n  AEIO_BasicData         *basic_dataP,\n  AEIO_OutSpecH          outH,\n  A_long                 frame_index,\n  AEGP_ConstMarkerValP   marker_valP,\n  AEIO_RenderMarkerFlag  marker_flag,\n  AEIO_InterruptFuncs    *inter0);\n</code></pre></p> <p>Output</p> <p>No</p> <p><code>AEIO_GetMimeType</code></p> <p>Describe the output mime type. This is used for XMP support.</p> <p><pre><code>AEIO_GetMimeType(\n  AEIO_BasicData  *basic_dataP,\n  AEIO_OutSpecH   outH,\n  A_long          mime_type_sizeL,\n  char            *mime_typeZ);\n</code></pre></p> <p>Output</p> <p>No</p>"},{"location":"aeios/new-kids-on-the-function-block/#what-goes-in","title":"What Goes In","text":"<p>These functions manage an input specification, After Effects' internal representation of data gathered from any source.</p> <p>Any image or audio data in After Effects (except solids) is obtained from an input specification handle, or <code>AEIO_InSpecH</code>.</p>"},{"location":"aeios/new-kids-on-the-function-block/#aegp_ioinsuite5","title":"AEGP_IOInSuite5","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetInSpecOptionsHandle</code></p> <p>Retrieves the options data (created by your AEIO) for the given <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecOptionsHandle(\n  AEIO_InSpecH  inH,\n  void          *optionsPPV);\n</code></pre></p> <p><code>AEGP_SetInSpecOptionsHandle</code></p> <p>Sets the options data for the given <code>AEIO_InSpecH</code>.</p> <p>Must be allocated using the Memory Suite.</p> <p><pre><code>AEGP_SetInSpecOptionsHandle(\n  AEIO_InSpecH  inH,\n  void          *optionsPV,\n  void          *old_optionsPPV);\n</code></pre></p> <p><code>AEGP_GetInSpecFilePath</code></p> <p>Retrieves the file path for the <code>AEIO_InSpecH</code>.</p> <p>The file path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p><pre><code>AEGP_GetInSpecFilePath(\n  AEIO_InSpecH    inH,\n  AEGP_MemHandle  *file_nameZ);\n</code></pre></p> <p><code>AEGP_GetInSpecNativeFPS</code></p> <p>Retrieves the frame rate of the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecNativeFPS(\n  AEIO_InSpecH  inH,\n  A_Fixed       *native_fpsP);\n</code></pre></p> <p><code>AEGP_SetInSpecNativeFPS</code></p> <p>Sets the frame rate of the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecNativeFPS(\n  AEIO_InSpecH  inH,\n  A_Fixed       native_fpsP);\n</code></pre></p> <p><code>AEGP_GetInSpecDepth</code></p> <p>Retrieves the bit depth of the image data in the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecDepth(\n  AEIO_InSpecH  inH,\n  A_short       *depthPS);\n</code></pre></p> <p><code>AEGP_SetInSpecDepth</code></p> <p>Indicates to After Effects the bit depth of the image data in the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecDepth(\n  AEIO_InSpecH  inH,\n  A_short       depthS);\n</code></pre></p> <p><code>AEGP_GetInSpecSize</code></p> <p>Retrieves the size (in bytes) of the data referenced by the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecSize(\n  AEIO_InSpecH   inH,\n  AEIO_FileSize  *sizePLLu);\n</code></pre></p> <p><code>AEGP_SetInSpecSize</code></p> <p>Indicates to After Effects the size (in bytes) of the data referenced by the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecSize(\n  AEIO_InSpecH   inH,\n  AEIO_FileSize  sizeL);\n</code></pre></p> <p><code>AEGP_GetInSpecInterlaceLabel</code></p> <p>Retrieves field information for the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecInterlaceLabel(\n  AEIO_InSpecH  inH,\n  FIEL_Label    *interlaceP);\n</code></pre></p> <p><code>AEGP_SetInSpecInterlaceLabel</code></p> <p>Specifies field information for the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecInterlaceLabel(\n  AEIO_InSpecH      inH,\n  const FIEL_Label  *interlaceP);\n</code></pre></p> <p><code>AEGP_GetInSpecAlphaLabel</code></p> <p>Retrieves alpha channel interpretation information for the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecAlphaLabel(\n  AEIO_InSpecH     inH,\n  AEIO_AlphaLabel  *alphaP);\n</code></pre></p> <p><code>AEGP_SetInSpecAlphaLabel</code></p> <p>Sets alpha channel interpretation information for the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecAlphaLabel(\n  AEIO_InSpecH           inH,\n  const AEIO_AlphaLabel* alphaP);\n</code></pre></p> <p><code>AEGP_GetInSpecDuration</code></p> <p>Retrieves the duration of the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecDuration(\n  AEIO_InSpecH  inH,\n  A_Time        *durationP);\n</code></pre></p> <p><code>AEGP_SetInSpecDuration</code></p> <p>Sets the duration of the <code>AEIO_InSpecH</code>.</p> <p>Note</p> <p>As of 5.5, this must be called, even for frame-based file formats.</p> <p>If you don't set the <code>A_Time.scale</code> to something other than zero, your file(s) will not import.</p> <p>This will be fixed in future versions.</p> <p><pre><code>AEGP_SetInSpecDuration(\n  AEIO_InSpecH  inH,\n  const A_Time  *durationP);\n</code></pre></p> <p><code>AEGP_GetInSpecDimensions</code></p> <p>Retrieves the width and height of the image data in the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecDimensions(\n  AEIO_InSpecH  inH,\n  A_long        *widthPL0,\n  A_long        *heightPL0);\n</code></pre></p> <p><code>AEGP_SetInSpecDimensions</code></p> <p>Indicates to After Effects the width and height of the image data in the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecDimensions(\n  AEIO_InSpecH  inH,\n  A_long        widthL,\n  A_long        heightL);\n</code></pre></p> <p><code>AEGP_InSpecGetRational</code> Dimensions</p> <p>Retrieves the width, height, bounding rect, and scaling factor applied to an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_InSpecGetRationalDimensions(\n  AEIO_InSpecH              inH,\n  const AEIO_RationalScale  *rs0,\n  A_long                    *width0,\n  A_long                    *height0,\n  A_Rect                    *r0);\n</code></pre></p> <p><code>AEGP_GetInSpecHSF</code></p> <p>Retrieves the horizontal scaling factor applied to an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecHSF(\n  AEIO_InSpecH  inH,\n  A_Ratio       *hsf);\n</code></pre></p> <p><code>AEGP_SetInSpecHSF</code></p> <p>Sets the horizontal scaling factor of an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecHSF(\n  AEIO_InSpecH   inH,\n  const A_Ratio  *hsf);\n</code></pre></p> <p><code>AEGP_GetInSpecSoundRate</code></p> <p>Obtains the sampling rate (in samples per second) for the audio data referenced by the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecSoundRate(\n  AEIO_InSpecH  inH,\n  A_FpLong      *ratePF);\n</code></pre></p> <p><code>AEGP_SetInSpecSoundRate</code></p> <p>Sets the sampling rate (in samples per second) for the audio data referenced by the <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecSoundRate(\n  AEIO_InSpecH  inH,\n  A_FpLong      rateF);\n</code></pre></p> <p><code>AEGP_GetInSpecSoundEncoding</code></p> <p>Obtains the encoding method (signed PCM, unsigned PCM, or floating point) from an AEIO_InSpecH.</p> <p><pre><code>AEGP_GetInSpecSoundEncoding(\n  AEIO_InSpecH      inH,\n  AEIO_SndEncoding  *encodingP);\n</code></pre></p> <p><code>AEGP_SetInSpecSoundEncoding</code></p> <p>Sets the encoding method of an AEIO_InSpecH.</p> <p><pre><code>AEGP_SetInSpecSoundEncoding(\n  AEIO_InSpecH      inH,\n  AEIO_SndEncoding  encoding);\n</code></pre></p> <p><code>AEGP_GetInSpecSoundSampleSize</code></p> <p>Retrieves the bytes-per-sample (1,2, or 4) from an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_GetInSpecSoundSampleSize(\n  AEIO_InSpecH        inH,\n  AEIO_SndSampleSize  *bytes_per_smpP);\n</code></pre></p> <p><code>AEGP_SetInSpecSoundSampleSize</code></p> <p>Set the bytes per sample of an <code>AEIO_InSpecH</code>.</p> <p><pre><code>AEGP_SetInSpecSoundSampleSize(\n  AEIO_InSpecH        inH,\n  AEIO_SndSampleSize  bytes_per_sample);\n</code></pre></p> <p><code>AEGP_GetInSpecSoundChannels</code></p> <p>Determines whether the audio in the <code>AEIO_SndChannels</code> is mono or stereo.</p> <p><pre><code>AEGP_GetInSpecSoundChannels(\n  AEIO_InSpecH      inH,\n  AEIO_SndChannels  *num_channelsP);\n</code></pre></p> <p><code>AEGP_SetInSpecSoundChannels</code></p> <p>Sets the audio in an <code>AEIO_SndChannels</code> to mono or stereo.</p> <p><pre><code>AEGP_SetInSpecSoundChannels(\n  AEIO_InSpecH      inH,\n  AEIO_SndChannels  num_channels);\n</code></pre></p> <p><code>AEGP_AddAuxExtMap</code></p> <p>If your file format has auxiliary files which you want to prevent users from opening directly, pass it's extension, file type and creator to this function to keep it from appearing in input dialogs.</p> <p><pre><code>AEGP_AddAuxExtMap(\n  const A_char  *extension,\n  A_long        file_type,\n  A_long        creator);\n</code></pre></p> <p><code>AEGP_SetInSpecEmbeddedColorProfile</code></p> <p>In case of RGB data, if there is an embedded icc profile, build an <code>AEGP_ColorProfile</code> out of this icc profile using <code>AEGP_GetNewColorProfileFromICCProfile</code> from AEGP_ColorSettingsSuite5 and set the profile description set to NULL.</p> <p>In case of non-RGB data, if there is an embedded non-RGB icc profile or you know the color space the data is in, set the color profile set to NULL, and provide the description as a NULL-terminated unicode string. Doing this disables color management UI that allows user to affect profile choice in the application UI.</p> <p>If you are unpacking non-RGB data directly into working space (to get working space use <code>AEGP_GetNewWorkingSpaceColorProfile</code>), you are done.</p> <p>If you are unpacking non-RGB data into specific RGB color space, you must pass the profile describing this space to <code>AEGP_SetInSpecAssignedColorProfile</code> below. Otherwise, your RGB data will be incorrectly interpreted as being in working space.</p> <p>Either color profile or profile description should be NULL in this function. You cannot use both.</p> <p><pre><code>AEGP_SetInSpecEmbeddedColorProfile(\n  AEIO_InSpecH             inH,\n  AEGP_ConstColorProfileP  color_profileP0,\n  const A_UTF16Char        *profile_descP0);\n</code></pre></p> <p><code>AEGP_SetInSpecAssignedColorProfile</code></p> <p>Assign a valid RGB color profile to the footage.</p> <p><pre><code>AEGP_SetInSpecAssignedColorProfile(\n  AEIO_InSpecH             inH,\n  AEGP_ConstColorProfileP  color_profileP);\n</code></pre></p> <p><code>AEGP_GetInSpecNativeStartTime</code></p> <p>New in CC. Retrieves the native start time of the footage.</p> <p><pre><code>AEGP_GetInSpecNativeStartTime(\n  AEIO_InSpecH  inH,\n  A_Time        *startTimeP);\n</code></pre></p> <p><code>AEGP_SetInSpecNativeStartTime</code></p> <p>New in CC. Assign a native start time to the footage.</p> <p><pre><code>AEGP_SetInSpecNativeStartTime(\n  AEIO_InSpecH  inH,\n  const A_Time  *startTimeP);\n</code></pre></p> <p><code>AEGP_ClearInSpecNativeStartTime</code></p> <p>New in CC. Clear the native start time of the footage.</p> <p>Setting the native start time to 0 using <code>AEGP_SetInSpecNativeStartTime</code> doesn't do this.</p> <p>It still means there is a special native start time provided.</p> <p><pre><code>AEGP_ClearInSpecNativeStartTime(\n  AEIO_InSpecH  inH);\n</code></pre></p> <p><code>AEGP_GetInSpecNativeDisplayDropFrame</code></p> <p>New in CC. Retrieve the drop-frame setting of the footage.</p> <p><pre><code>AEGP_GetInSpecNativeDisplayDropFrame(\n  AEIO_InSpecH  inH,\n  A_Boolean     *displayDropFrameBP);\n</code></pre></p> <p><code>AEGP_SetInSpecNativeDisplayDropFrame</code></p> <p>New in CC. Assign the drop-frame setting of the footage.</p> <p><pre><code>AEGP_SetInSpecNativeDisplayDropFrame(\n  AEIO_InSpecH  inH,\n  A_Boolean     displayDropFrameB);\n</code></pre></p>"},{"location":"aeios/new-kids-on-the-function-block/#what-goes-out","title":"What Goes Out","text":"<p>These functions manage all interactions with an output specification in After Effects' render queue.</p>"},{"location":"aeios/new-kids-on-the-function-block/#aegpiooutsuite4","title":"AEGPIOOutSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetOutSpecOptionsHandle</code></p> <p>Retrieves the Options for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecOptionsHandle(\n  AEIO_OutSpecH  outH,\n  void           *optionsPPV);\n</code></pre></p> <p><code>AEGP_SetOutSpecOptionsHandle</code></p> <p>Sets the Options for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecOptionsHandle(\n  AEIO_OutSpecH  outH,\n  void           *optionsPV,\n  void           *old_optionsPPV);\n</code></pre></p> <p><code>AEGP_GetOutSpecFilePath</code></p> <p>Obtains the path for the <code>AEIO_OutSpecH</code>.</p> <p>The file path is a handle to a NULL-terminated A_UTF16Char string, and must be disposed with <code>AEGP_FreeMemHandle</code>.</p> <p>If <code>file_rsrvdPB</code> returns <code>TRUE</code>, the plug-in should not overwrite it (After Effects has already created an empty file); doing so can cause network renders to fail.</p> <p><pre><code>AEGP_GetOutSpecFilePath(\n  AEIO_OutSpecH   outH,\n  AEGP_MemHandle  *unicode_pathPH,\n  A_Boolean       *file_rsrvdPB);\n</code></pre></p> <p><code>AEGP_GetOutSpecFPS</code></p> <p>Obtains the frames per second of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecFPS(\n  AEIO_OutSpecH  outH,\n  A_Fixed        *native_fpsP);\n</code></pre></p> <p><code>AEGP_SetOutSpecNativeFPS</code></p> <p>Sets the frames per second of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecNativeFPS(\n  AEIO_OutSpecH  outH,\n  A_Fixed        native_fpsP);\n</code></pre></p> <p><code>AEGP_GetOutSpecDepth</code></p> <p>Obtains the pixel bit depth of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecDepth(\n  AEIO_OutSpecH  outH,\n  A_short        *depthPS);\n</code></pre></p> <p><code>AEGP_SetOutSpecDepth</code></p> <p>Sets the pixel bit depth of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecDepth(\n  AEIO_OutSpecH  outH,\n  A_short        depthPS);\n</code></pre></p> <p><code>AEGP_GetOutSpecInterlaceLabel</code></p> <p>Obtains field information for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecInterlaceLabel(\n  AEIO_OutSpecH  outH,\n  FIEL_Label     *interlaceP);\n</code></pre></p> <p><code>AEGP_SetOutSpecInterlaceLabel</code></p> <p>Set the field information for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecInterlaceLabel(\n  AEIO_OutSpecH     outH,\n  const FIEL_Label  *interlaceP);\n</code></pre></p> <p><code>AEGP_GetOutSpecAlphaLabel</code></p> <p>Obtains alpha interpretation information for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecAlphaLabel(\n  AEIO_OutSpecH    outH,\n  AEIO_AlphaLabel  *alphaP);\n</code></pre></p> <p><code>AEGP_SetOutSpecAlphaLabel</code></p> <p>Sets the alpha interpretation for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecAlphaLabel(\n  AEIO_OutSpecH          outH,\n  const AEIO_AlphaLabel  *alphaP);\n</code></pre></p> <p><code>AEGP_GetOutSpecDuration</code></p> <p>Obtains the duration of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecDuration(\n  AEIO_OutSpecH  outH,\n  A_Time         *durationP);\n</code></pre></p> <p><code>AEGP_SetOutSpecDuration</code></p> <p>Sets the duration of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecDuration(\n  AEIO_OutSpecH  outH,\n  const A_Time   *durationP);\n</code></pre></p> <p><code>AEGP_GetOutSpecDimensions</code></p> <p>Obtains the dimensions of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecDimensions(\n  AEIO_OutSpecH  outH,\n  A_long         *widthPL0,\n  A_long         *heightPL0);\n</code></pre></p> <p><code>AEGP_GetOutSpecHSF</code></p> <p>Obtains the horizontal scaling factor of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecHSF(\n  AEIO_OutSpecH  outH,\n  A_Ratio        *hsf);\n</code></pre></p> <p><code>AEGP_SetOutSpecHSF</code></p> <p>Sets the horizontal scaling factor of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecHSF(\n  AEIO_OutSpecH  outH,\n  const A_Ratio  *hsf);\n</code></pre></p> <p><code>AEGP_GetOutSpecSoundRate</code></p> <p>Obtains the sampling rate for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecSoundRate(\n  AEIO_OutSpecH  outH,\n  A_FpLong       *ratePF);\n</code></pre></p> <p><code>AEGP_SetOutSpecSoundRate</code></p> <p>Sets the sampling rate for the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecSoundRate(\n  AEIO_OutSpecH  outH,\n  A_FpLong       rateF);\n</code></pre></p> <p><code>AEGP_GetOutSpecSoundEncoding</code></p> <p>Obtains the sound encoding format of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecSoundEncoding(\n  AEIO_OutSpecH     outH,\n  AEIO_SndEncoding  *encodingP);\n</code></pre></p> <p><code>AEGP_SetOutSpecSoundEncoding</code></p> <p>Sets the sound encoding format of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecSoundEncoding(\n  AEIO_OutSpecH     outH,\n  AEIO_SndEncoding  encoding);\n</code></pre></p> <p><code>AEGP_GetOutSpecSoundSampleSize</code></p> <p>Obtains the bytes-per-sample of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecSoundSampleSize(\n  AEIO_OutSpecH       outH,\n  AEIO_SndSampleSize  *bpsP);\n</code></pre></p> <p><code>AEGP_SetOutSpecSoundSampleSize</code></p> <p>Sets the bytes-per-sample of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecSoundSampleSize(\n  AEIO_OutSpecH       outH,\n  AEIO_SndSampleSize  bpsP);\n</code></pre></p> <p><code>AEGP_GetOutSpecSoundChannels</code></p> <p>Obtains the number of sounds channels in the  <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecSoundChannels(\n  AEIO_OutSpecH     outH,\n  AEIO_SndChannels  *channelsP);\n</code></pre></p> <p><code>AEGP_SetOutSpecSoundChannels</code></p> <p>Sets the number of sounds channels in the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_SetOutSpecSoundChannels(\n  AEIO_OutSpecH     outH,\n  AEIO_SndChannels  channels);\n</code></pre></p> <p><code>AEGP_GetOutSpecIsStill</code></p> <p>Determines whether the <code>AEIO_OutSpecH</code> is a still.</p> <p><pre><code>AEGP_GetOutSpecIsStill(\n  AEIO_OutSpecH  outH,\n  A_Boolean      *is_stillPB);\n</code></pre></p> <p><code>AEGP_GetOutSpecPosterTime</code></p> <p>Obtains the time of the <code>AEIO_OutSpecH's</code> poster frame.</p> <p><pre><code>AEGP_GetOutSpecPosterTime(\n  AEIO_OutSpecH  outH,\n  A_Time         *poster_timeP);\n</code></pre></p> <p><code>AEGP_GetOutSpecStartFrame</code></p> <p>Obtains the time of the first frame in the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecStartFrame(\n  AEIO_OutSpecH  outH,\n  A_long         *start_frameP);\n</code></pre></p> <p><code>AEGP_GetOutSpecPullDown</code></p> <p>Obtains the pulldown phase of the <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecPullDown(\n  AEIO_OutSpecH  outH,\n  AEIO_Pulldown  *pulldownP);\n</code></pre></p> <p><code>AEGP_GetOutSpecIsMissing</code></p> <p>Passes back TRUE if there is no <code>AEIO_OutSpecH</code>.</p> <p><pre><code>AEGP_GetOutSpecIsMissing(\n  AEIO_OutSpecH  outH,\n  A_Boolean      *missingPB);\n</code></pre></p> <p><code>AEGP_GetOutSpecShouldEmbedICCProfile</code></p> <p>Returns TRUE if the AEIO should embed a color profile in the output.</p> <p><pre><code>AEGP_GetOutSpecShouldEmbedICCProfile(\n  AEIO_OutSpecH  outH,\n  A_Boolean      *embedPB);\n</code></pre></p> <p><code>AEGP_GetNewOutSpecColorProfile</code></p> <p>Returns an (opaque) ICC color profile for embedding in the AEIO's output.</p> <p>Must be disposed with <code>AEGP_DisposeColorProfile</code>.</p> <p><pre><code>AEGP_GetNewOutSpecColorProfile(\n  AEGP_PluginID       aegp_plugin_id,\n  AEIO_OutSpecH       outH,\n  AEGP_ColorProfileP  *color_profilePP);\n</code></pre></p> <p><code>AEGP_GetOutSpecOutputModule</code></p> <p>Returns the <code>AEGP_RQItemRefH</code> and <code>AEGP_OutputModuleRefH</code> associated with the given <code>AEIO_OutSpecH</code>.</p> <p>Fails if the render queue item is not found, or if <code>AEIO_OutSpecH</code> is not a confirmed outH and is a copy, i.e. if the Output Module settings dialog is open and the user hasn't hit OK.</p> <p><pre><code>AEGP_GetOutSpecOutputModule(\n  AEIO_OutSpecH          outH,\n  AEGP_RQItemRefH        *rq_itemP,\n  AEGP_OutputModuleRefH  *om_refP);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/","title":"Artisan Data Types","text":"<p>Below are the data types most commonly used in the Artisan API.</p>"},{"location":"artisans/artisan-data-types/#data-types-used-in-the-artisan-api","title":"Data Types Used In The Artisan API","text":"<p>Type</p> <p>Describes</p> <p><code>AEGP_RenderLayerContextH</code></p> <p>State information at the time of a render request, sent to an Artisan by After Effects.</p> <p><code>PR_RenderContextH</code></p> <p>A collection of settings defining what is to be rendered, and how.</p> <p><code>AEGP_SoundDataH</code></p> <p>The audio settings used for a given layer.</p> <p><code>AEGP_RenderReceiptH</code> <code>AEGP_FrameReceiptH</code></p> <p>Used by Artisans when rendering. </p> <p><code>AEGP_WorldH</code></p> <p>A frame of pixels.</p> <p><code>AEGP_RenderOptionsH</code></p> <p>The settings associated with a render queue item.</p>"},{"location":"artisans/artisan-data-types/#horz-vert","title":"Horz? Vert?","text":"<p>After Effects' matrix is row based; OpenGL's is column based. This means more work for you. Yay, billable hours!</p>"},{"location":"artisans/artisan-data-types/#implementation-and-design","title":"Implementation And Design","text":"<p>An Artisan is nearly an application unto itself. Because we realized early in the After Effects 5.0 that there are many ways to approach the problems inherent in 3D rendering; intersections and shading, for example.</p> <p>We provided an API with which we and third parties (yes, we really do use our own APIs) could implement any 3D rendering scheme desired.</p>"},{"location":"artisans/artisan-data-types/#3d-compositing-not-modeling","title":"3D Compositing, Not Modeling","text":"<p>After Effects is not a 3D modeling application. Users work in a responsive mode, switching to higher quality only at for proofing or final output. Consider providing at least two quality modes, one for layout and another for final output. Be conscious of render time in low quality mode.</p>"},{"location":"artisans/artisan-data-types/#registering-an-artisan","title":"Registering An Artisan","text":"<p>An Artisan is an AEGP, and has a single entry point. Artisans must also register their own function entry points and have a special callback for this purpose. See <code>AEGP_RegisterArtisan()</code> from AEGP_RegisterSuites5.</p> <p>This tables shows the functions that Artisans can support as defined by <code>PR_ArtisanEntryPoints</code>: only <code>render_func</code> is required.</p>"},{"location":"artisans/artisan-data-types/#artisan-entry-points","title":"Artisan Entry Points","text":"<p>PR_ArtisanEntryPoints</p> <p><code>global_setup_func0</code></p> <p>Called only once, right after <code>GP_Main</code>. The global data is common across all instances of the plug-in.</p> <p>If you allocate memory during Global Setup, you must free it during your <code>global_setdown_func</code>.</p> <p><pre><code>PR_GlobalSetupFunc(\n  const PR_InData    *in_dataP,\n  PR_GlobalContextH  global_contextH,\n  PR_GlobalDataH     *global_dataPH);\n</code></pre></p> <p><code>global_setdown_func0</code></p> <p>Dispose of any global data you allocated.</p> <p><pre><code>PR_GlobalSetdownFunc(\n  const PR_InData    *in_dataP,\n  PR_GlobalContextH  global_contextH,\n  PR_GlobalDataH     global_dataH);\n</code></pre></p> <p><code>global_do_about_func0</code></p> <p>Tell the world about yourself! Use <code>in_dataP&gt;msg_func</code> to display your dialog.</p> <p><pre><code>PR_GlobalDoAboutFunc(\n  const PR_InData    *in_dataP,\n  PR_GlobalContextH  global_contextH,\n  PR_GlobalDataH     global_dataH);\n</code></pre></p> <p><code>setup_instance_func0</code></p> <p>Allocate and instantiate any data specific to this instance of your Artisan.</p> <p><pre><code>PR_InstanceSetupFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceFlags     flags,\n  PR_FlatHandle        flat_dataH0,\n  PR_InstanceDataH     *instance_dataPH);\n</code></pre></p> <p><code>setdown_instance_func0</code></p> <p>Deallocate and free any data specific to this instance of your Artisan.</p> <p><pre><code>PR_InstanceSetdownFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH);\n</code></pre></p> <p><code>flatten_instance_func0</code></p> <p>Flatten your data in preparation to being written to disk. (making sure it's OS independent, if your Artisan is).</p> <p><pre><code>PR_FlattenInstanceFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH,\n  PR_FlatHandle        *flatH);\n</code></pre></p> <p><code>do_instance_dialog_func0</code></p> <p>If your Artisan has a additional parameters (accessed through its Options dialog), this function will be called to get and set them.</p> <p><pre><code>PR_DoInstanceDialogFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH,\n  PR_DialogResult      *resultP);\n</code></pre></p> <p><code>PR_DialogResultis</code> is either <code>PR_DialogResult_NO_CHANGE</code> or <code>PR_DialogResult_CHANGE_MADE</code>.</p> <p><code>frame_setup_func0</code></p> <p>Perform any setup necessary to render a frame (called immediately before rendering).</p> <p><pre><code>PR_FrameSetupFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH\n  PR_RenderContextH    render_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH,\n  PR_RenderDataH       *render_dataPH);\n</code></pre></p> <p><code>frame_setdown_func0</code></p> <p>Dispose of any setup data allocated during <code>frame_setup</code> (sent immediately after rendering).</p> <p><pre><code>PR_FrameSetdownFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH\n  PR_RenderContextH    render_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH,\n  PR_RenderDataH       render_dataH);\n</code></pre></p> <p><code>render_func</code></p> <p>Render the scene.</p> <p><pre><code>PR_FrameRenderFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH\n  PR_RenderContextH    render_contextH,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH,\n  PR_RenderDataH       render_dataH);\n</code></pre></p> <p><code>query_func0</code></p> <p>Artisans can draw their own projection axes, should the need arise.</p> <p>After Effects will call this function to obtain the transform between the composition world and those axes, as well as for a number of other functions related to on- and off-screen preview drawing (the former is relevant only to interactive artisans).</p> <p><pre><code>PR_QueryFunc(\n  const PR_InData      *in_dataP,\n  PR_GlobalContextH    global_contextH,\n  PR_InstanceContextH  instance_contextH\n  PR_QueryContextH     query_contextH,\n  PR_QueryType         query_type,\n  PR_GlobalDataH       global_dataH,\n  PR_InstanceDataH     instance_dataH);\n</code></pre></p> <p><code>PR_QueryType</code> can be one of the following:</p> <ul> <li><code>PR_QueryType_NONE = 0</code></li> <li><code>PR_QueryType_TRANSFORM</code></li> <li><code>PR_QueryType_INTERACTIVE_WINDOW_DISPOSE</code></li> <li><code>PR_QueryType_INTERACTIVE_WINDOW_CLEAR</code></li> <li><code>PR_QueryType_INTERACTIVE_WINDOW_FROZEN_PROXY</code></li> <li><code>PR_QueryType_INTERACTIVE_SWAP_BUFFER</code></li> <li><code>PR_QueryType_INTERACTIVE_DRAW_PROCS</code></li> <li><code>PR_QueryType_PREPARE_FOR_LINE_DRAWING</code></li> <li><code>PR_QueryType_UNPREPARE_FOR_LINE_DRAWING</code></li> <li><code>PR_QueryType_GET_CURRENT_CONTEXT_SAFE_FOR_LINE_DRAWING</code></li> <li><code>PR_QueryType_GET_ARTISAN_QUALITY</code> (New in CS6.)</li> </ul>"},{"location":"artisans/artisan-data-types/#the-world-is-your-canvas","title":"The World Is Your Canvas","text":"<p><code>AEGP_RenderTexture()</code> supplies the raw pixels of a layer, untransformed, into an arbitrarily-sized buffer.</p> <p><code>AEGP_RenderLayer()</code> invokes the entire After Effects render pipeline, including transforms, masking, et cetera, providing the layer as it appears in its composition, in a composition-sized buffer.</p> <p>If the layer being rendered is 3D, the default (Standard 3D) Artisan is invoked to perform any 3D geometrics.</p> <p>Your Artisan can use this to render track matte layers, and apply them only in a strictly 2D sense, to the transformed 3D layer.</p> <p>Before rendering, the Artisans that ship with After Effects apply an inverse transform to get square pixels, then re-apply the transform before display.</p> <p>For example, if the pixel aspect ratio is 10/11 (DV NTSC), we multiply by 11/10 to get square pixels. We process and composite 3D layers, then re-divide to get back to the original pixel aspect ratio.</p> <p>The following suite supplies the layers, compositions, texture and destination buffers. This is a vital suite for all artisans.</p>"},{"location":"artisans/artisan-data-types/#aegp_canvassuite8","title":"AEGP_CanvasSuite8","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetCompToRender</code></p> <p>Given the render context provided to the Artisan at render time, returns a handle to the composition.</p> <p><pre><code>AEGP_GetCompToRender(\n  PR_RenderContextH  render_contextH,\n  AEGP_CompH         *compPH)\n</code></pre></p> <p><code>AEGP_GetNumLayersToRender</code></p> <p>Given the render context, returns the number of layers the Artisan needs to render.</p> <p><pre><code>AEGP_GetNumLayersToRender(\n  PR_RenderContextH  render_contextH,\n  A_long             *num_to_renderPL)\n</code></pre></p> <p><code>AEGP_GetNthLayerContextToRender</code></p> <p>Used to build a list of layers to render after determining the total number of layers that need rendering by the Artisan.</p> <p><pre><code>AEGP_GetNthLayerContextToRender(\n  PR_RenderContextH         render_contextH,\n  A_long                    n,\n  AEGP_RenderLayerContextH  *layer_indexPH)\n</code></pre></p> <p><code>AEGP_GetLayerFromLayerContext</code></p> <p>Given a <code>AEGP_RenderLayerContextH</code>,retrieves the associated <code>AEGP_LayerH</code> (required by many suite functions).</p> <p><pre><code>AEGP_GetLayerFromLayerContext(\n  const PR_RenderContextH   render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  AEGP_LayerH               *layerPH);\n</code></pre></p> <p><code>AEGP_GetLayerAndSubLayerFromLayerContext</code></p> <p>Allows for rendering of sub-layers (as within a Photoshop file).</p> <p><pre><code>AEGP_GetLayerAndSubLayerFromLayerContext(\n  const PR_RenderContextH   render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  AEGP_LayerH               *layerPH,\n  AEGP_SubLayerIndex        *sublayerP);\n</code></pre></p> <p><code>AEGP_GetTopLayerFromLayerContext</code></p> <p>With collapsed geometrics \"on\" this gives the layer in the root composition containing the layer context.</p> <p>With collapsed geometrics off this is the same as <code>AEGP_GetLayerFromLayerContext</code>.</p> <p><pre><code>AEGP_GetTopLayerFromLayerContext(\n  const PR_RenderContextH   r_contextH,\n  AEGP_RenderLayerContextH  l_contextH,\n  AEGP_LayerH               *layerPH);\n</code></pre></p> <p><code>AEGP_GetCompRenderTime</code></p> <p>Given the render context, returns the current point in (composition) time to render.</p> <p><pre><code>AEGP_GetNthLayerIndexToRender(\n  PR_RenderContextH  render_contextH,\n  A_long             *time,\n  A_long             *time_step)\n</code></pre></p> <p><code>AEGP_GetCompDestinationBuffer</code></p> <p>Given the render context, returns a buffer in which to place the final rendered output.</p> <p><pre><code>AEGP_GetCompToRender(\n  PR_RenderContextH  render_contextH,\n  AEGP_CompH         compH,\n  PF_EffectWorld     *dst);\n</code></pre></p> <p><code>AEGP_GetROI</code></p> <p>Given the render context provided to the Artisan at render time, returns a handle to the composition.</p> <p><pre><code>AEGP_GetROI(\n  PR_RenderContextH  render_contextH,\n  A_LegacyRect       *roiPR);\n</code></pre></p> <p><code>AEGP_RenderTexture</code></p> <p>Given the render context and layer, returns the layer texture.</p> <p>All parameters with a trailing '0' are optional; the returned <code>PF_EffectWorld</code> can be NULL.</p> <p><pre><code>AEGP_RenderTexture(\n  PR_RenderContextH  render_contextH,\n  AEGP_LayerH        layerH,\n  AEGP_RenderHints   render_hints,\n  A_FloatPoint       *suggested_scaleP0,\n  A_FloatRect        *suggsted_src_rectP0,\n  A_Matrix3          *src_matrixP0,\n  PF_EffectWorld     *render_bufferP);\n</code></pre></p> <p><code>AEGP_RenderHints</code> contains one or more of the following:</p> <ul> <li><code>AEGP_RenderHints_NONE</code></li> <li><code>AEGP_RenderHints_IGNORE_EXTENTS</code></li> <li><code>AEGP_RenderHints_NO_TRANSFER_MODE</code> (prevents application of opacity &amp; transfer mode; for use with <code>RenderLayer</code> calls.)</li> </ul> <p><code>AEGP_DisposeTexture</code></p> <p>Disposes of an acquired layer texture.</p> <p><pre><code>AEGP_DisposeTexture(\n  PR_RenderContextH  render_contextH,\n  AEGP_LayerH        layerH,\n  AEGP_WorldH        *dst0);\n</code></pre></p> <p><code>AEGP_GetFieldRender</code></p> <p>Returns the field settings of the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetFieldRender(\n  PR_RenderContextH  render_contextH,\n  PF_Field           *field);\n</code></pre></p> <p><code>AEGP_ReportArtisanProgress</code></p> <p>Given the render context provided to the Artisan at render time, returns a handle to the composition.</p> <p>Note</p> <p>This is NOT thread-safe on macOS; only use this function when the current thread ID is 0.</p> <p><pre><code>AEGP_ReportArtisanProgress(\n  PR_RenderContextH  render_contextH,\n  A_long             countL,\n  A_long             totalL);\n</code></pre></p> <p><code>AEGP_GetRenderDownsampleFactor</code></p> <p>Returns the downsample factor of the <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetRenderDownsampleFactor(\n  PR_RenderContextH      render_contextH,\n  AEGP_DownsampleFactor  *dsfP);\n</code></pre></p> <p><code>AEGP_IsBlankCanvas</code></p> <p>Determines whether the <code>PR_RenderContextH</code> is blank (empty).</p> <p><pre><code>AEGP_IsBlankCanvas(\n  PR_RenderContextH  render_contextH,\n  A_Boolean          *is_blankPB);\n</code></pre></p> <p><code>AEGP_GetRenderLayerToWorldXform</code></p> <p>Given a render context and a layer (at a given time), retrieves the 4 by 4 transform to move between their coordinate spaces.</p> <p><pre><code>AEGP_GetRenderLayerToWorldXform(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timeP,\n  A_Matrix4                 *transform);\n</code></pre></p> <p><code>AEGP_GetRenderLayerBounds</code></p> <p>Retrieves the bounding rectangle of the layer_contextH (at a given time) within the <code>render_contextH</code>.</p> <p><pre><code>AEGP_GetRenderLayerBounds(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timeP,\n  A_LegacyRect              *boundsP);\n</code></pre></p> <p><code>AEGP_GetRenderOpacity</code></p> <p>Returns the opacity of the given layer context at the given time, within the render context.</p> <p><pre><code>AEGP_GetRenderOpacity(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timePT,\n  A_FpLong                  *opacityPF);\n</code></pre></p> <p><code>AEGP_IsRenderLayerActive</code></p> <p>Returns whether or not a given layer context is active within the render context, at the given time.</p> <p><pre><code>AEGP_IsRenderLayerActive(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timePT,\n  A_Boolean                 *activePB);\n</code></pre></p> <p><code>AEGP_SetArtisanLayerProgress</code></p> <p>Sets the progress information for a rendering Artisan.</p> <ul> <li><code>countL</code> is the number of layers completed,</li> <li><code>num_layersL</code> is the total number of layers the Artisan is rendering.</li> </ul> <p><pre><code>AEGP_SetArtisanLayerProgress(\n  PR_RenderContextH  render_contextH,\n  A_long             countL,\n  A_long             num_layersL);\n</code></pre></p> <p><code>AEGP_RenderLayerPlus</code></p> <p>Similar to <code>AEGP_RenderLayer</code>, but takes into account the <code>AEGP_RenderLayerContextH</code>.</p> <p><pre><code>AEGP_RenderLayerPlus(\n  PR_RenderContextH          r_contextH,\n  AEGP_LayerH                layerH,\n  AEGP_RenderLayerContextH   l_contextH,\n  AEGP_RenderHints           render_hints,\n  AEGP_WorldH                *bufferP);\n</code></pre></p> <p><code>AEGP_GetTrackMatteContext</code></p> <p>Retrieves the <code>AEGP_RenderLayerContextH</code> for the specified render and fill contexts.</p> <p><pre><code>AEGP_GetTrackMatteContext(\n  PR_RenderContextH         rnder_contextH,\n  AEGP_RenderLayerContextH  fill_contextH,\n  AEGP_RenderLayerContextH  *mattePH);\n</code></pre></p> <p><code>AEGP_RenderTextureWithReceipt</code></p> <p>Renders a texture into an <code>AEGP_WorldH</code>, and provides an <code>AEGP_RenderReceiptH</code> for the operation.</p> <p>The returned <code>receiptPH</code> must be disposed of with <code>AEGP_DisposeRenderReceipt</code>.</p> <p><pre><code>AEGP_RenderTextureWithReceipt(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  AEGP_RenderHints          render_hints,\n  A_FloatPoint              *suggested_scaleP0,\n  A_FloatRect               *suggest_src_rectP0,\n  A_Matrix3                 *src_matrixP0,\n  AEGP_RenderReceiptH       *receiptPH,\n  AEGP_WorldH               *dstPH);\n</code></pre></p> <p><code>AEGP_GetNumberOfSoftwareEffects</code></p> <p>Returns the number of software effects applied in the given <code>AEGP_RenderLayerContextH</code>.</p> <p><pre><code>AEGP_GetNumberOfSoftwareEffects(\n  PR_RenderContextH         ren_contextH,\n  AEGP_RenderLayerContextH  lyr_contextH,\n  A_short                   *num_sft_FXPS);\n</code></pre></p> <p><code>AEGP_RenderLayerPlusWithReceipt</code></p> <p>An improvement over <code>AEGP_RenderLayerPlus</code>, this function also provides an <code>AEGP_RenderReceiptH</code> for caching purposes.</p> <p><pre><code>AEGP_RenderLayerPlusWithReceipt(\n  PR_RenderContextH            render_contextH,\n  AEGP_LayerH                  layerH,\n  AEGP_RenderLayerContextH     layer_contextH,\n  AEGP_RenderHints             render_hints,\n  AEGP_NumEffectsToRenderType  num_effectsS,\n  AEGP_RenderReceiptH          *receiptPH,\n  AEGP_WorldH                  *bufferPH);\n</code></pre></p> <p><code>AEGP_DisposeRenderReceipt</code></p> <p>Frees an <code>AEGP_RenderReceiptH</code>.</p> <p><pre><code>AEGP_DisposeRenderReceipt(\n  AEGP_RenderReceiptH  receiptH);\n</code></pre></p> <p><code>AEGP_CheckRenderReceipt</code></p> <p>Checks with After Effects' internal caching to determine whether a given <code>AEGP_RenderReceiptH</code> is still valid.</p> <p><pre><code>AEGP_CheckRenderReceipt(\n  PR_RenderContextH            current_contextH,\n  AEGP_RenderLayerContextH     current_lyr_ctxtH,\n  AEGP_RenderReceiptH          old_receiptH,\n  A_Boolean                    check_aceB,\n  AEGP_NumEffectsToRenderType  num_effectsS,\n  AEGP_RenderReceiptStatus     *receipt_statusP);\n</code></pre></p> <p><code>AEGP_GenerateRenderReceipt</code></p> <p>Generates a <code>AEGP_RenderReceiptH</code> for a layer as if the first <code>num_effectsS</code> have been rendered.</p> <p><pre><code>AEGP_GenerateRenderReceipt(\n  PR_RenderContextH            current_contextH,\n  AEGP_RenderLayerContextH     current_lyr_contextH,\n  AEGP_NumEffectsToRenderType  num_effectsS,\n  AEGP_RenderReceiptH          *render_receiptPH);\n</code></pre></p> <p><code>AEGP_GetNumBinsToRender</code></p> <p>Returns the number of bins After Effects wants the artisan to render.</p> <p><pre><code>AEGP_GetNumBinsToRender(\n  const PR_RenderContextH  contextH,\n  A_long                   *num_binsPL);\n</code></pre></p> <p><code>AEGP_SetNthBin</code></p> <p>Sets the given render context to be the n-th bin to be rendered by After Effects.</p> <p><pre><code>AEGP_SetNthBin(\n  const PR_RenderContextH  contextH,\n  A_long                   n);\n</code></pre></p> <p><code>AEGP_GetBinType</code></p> <p>Retrieves the type of the given bin.</p> <p><pre><code>AEGP_GetBinType(\n  const PR_RenderContextH  contextH,\n  AEGP_BinType             *bin_typeP);\n</code></pre></p> <p><code>AEGP_BinType</code> will be one of the following:</p> <ul> <li><code>AEGP_BinType_NONE</code></li> <li><code>AEGP_BinType_2D</code></li> <li><code>AEGP_BinType_3D</code></li> </ul> <p><code>AEGP_GetRenderLayerToWorldXform2D3D</code></p> <p>Retrieves the transform to correctly orient the layer being rendered with the output world.</p> <p>Pass <code>TRUE</code> for <code>only_2dB</code> to constrain the transform to two dimensions.</p> <p><pre><code>AEGP_GetRenderLayerToWorldXform2D3D(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timeP,\n  A_Boolean                 only_2dB,\n  A_Matrix4                 *transformP);\n</code></pre></p> <p>Note</p> <p>Functions below are for interactive artisans only.</p> <p>Function</p> <p>Purpose</p> <p><code>AEGP_GetPlatformWindowRef</code></p> <p>Retrieves the platform-specific window context into which to draw the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetPlatformWindowRef(\n  const PR_RenderContextH  contextH,\n  AEGP_PlatformWindowRef   *window_refP);\n</code></pre></p> <p><code>AEGP_GetViewportScale</code></p> <p>Retrieves the source-to-frame downsample factor for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetViewportScale(\n  const PR_RenderContextH  contextH,\n  A_FpLong                 *scale_xPF,\n  A_FpLong                 *scale_yPF);\n</code></pre></p> <p><code>AEGP_GetViewportOrigin</code></p> <p>Retrieves to origin of the source, within the frame (necessary to translate between the two), for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetViewportOrigin(\n  const PR_RenderContextH  contextH,\n  A_long                   *origin_xPL,\n  A_long                   *origin_yPL);\n</code></pre></p> <p><code>AEGP_GetViewportRect</code></p> <p>Retrieves the bounding rectangle for the area to be drawn, for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetViewportRect(\n  const PR_RenderContextH  contextH,\n  A_LegacyRect             *v_rectPR);\n</code></pre></p> <p><code>AEGP_GetFallowColor</code></p> <p>Retrieves the color used for the fallow regions in the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetFallowColor(\n  const PR_RenderContextH  contextH,\n  PF_Pixel8                *fallow_colorP);\n</code></pre></p> <p><code>AEGP_GetInteractiveCheckerboard</code></p> <p>Retrieves whether or not the checkerboard is currently active for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetInteractiveCheckerboard(\n  const PR_RenderContextH  contextH,\n  A_Boolean                *cboard_onPB);\n</code></pre></p> <p><code>AEGP_GetInteractiveCheckerboardColors</code></p> <p>Retrieves the colors used in the checkerboard.</p> <p><pre><code>AEGP_GetInteractiveCheckerboardColors(\n  const PR_RenderContextH  contextH,\n  PF_Pixel                 *color1P,\n  PF_Pixel                 *color2P);\n</code></pre></p> <p><code>AEGP_GetInteractiveCheckerboardSize</code></p> <p>Retrieves the width and height of one checkerboard square.</p> <p><pre><code>AEGP_GetInteractiveCheckerboardSize(\n  const PR_RenderContextH  contextH,\n  A_u_long                 *cbd_widthPLu,\n  A_u_long                 *cbd_heightPLu);\n</code></pre></p> <p><code>AEGP_GetInteractiveCachedBuffer</code></p> <p>Retrieves the cached AEGP_WorldH last used for the <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetInteractiveCachedBuffer(\n  const PR_RenderContextH  contextH,\n  AEGP_WorldH              *buffer);\n</code></pre></p> <p><code>AEGP_ArtisanMustRenderAsLayer</code></p> <p>Determines whether or not the artisan must render the current <code>AEGP_RenderLayerContextH</code> as a layer.</p> <p><pre><code>AEGP_ArtisanMustRenderAsLayer(\n  const PR_RenderContextH   contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  A_Boolean                 *use_txturePB);\n</code></pre></p> <p><code>AEGP_GetInteractiveDisplayChannel</code></p> <p>Returns which channels should be displayed by the interactive artisan.</p> <p><pre><code>AEGP_GetInteractiveDisplayChannel(\n  const PR_RenderContextH  contextH,\n  AEGP_DisplayChannelType  *channelP);\n</code></pre></p> <p><code>AEGP_DisplayChannelType</code> will be one of the following:</p> <ul> <li><code>AEGP_DisplayChannel_NONE</code></li> <li><code>AEGP_DisplayChannel_RED</code></li> <li><code>AEGP_DisplayChannel_GREEN</code></li> <li><code>AEGP_DisplayChannel_BLUE</code></li> <li><code>AEGP_DisplayChannel_ALPHA</code></li> <li><code>AEGP_DisplayChannel_RED_ALT</code></li> <li><code>AEGP_DisplayChannel_GREEN_ALT</code></li> <li><code>AEGP_DisplayChannel_BLUE_ALT</code></li> <li><code>AEGP_DisplayChannel_ALPHA_ALT</code></li> </ul> <p><code>AEGP_GetInteractiveExposure</code></p> <p>Returns the exposure for the given <code>PR_RenderContextH</code>, expressed as a floating point number.</p> <p><pre><code>AEGP_GetInteractiveExposure(\n  const PR_RenderContextH  rcH,\n  A_FpLong                 *exposurePF);\n</code></pre></p> <p><code>AEGP_GetColorTransform</code></p> <p>Returns the color transform for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetColorTransform(\n  const PR_RenderContextH  render_contextH,\n  A_Boolean                *cms_onB,\n  A_u_long                 *xform_keyLu,\n  void                      *xformP);\n</code></pre></p> <p><code>AEGP_GetCompShutterTime</code></p> <p>Returns the shutter angle for the given <code>PR_RenderContextH</code>.</p> <p><pre><code>AEGP_GetCompShutterTime(\n  PR_RenderContextH  render_contextH,\n  A_Time             *shutter_time,\n  A_Time             *shutter_dur);\n</code></pre></p> <p><code>AEGP_MapCompToLayerTime</code></p> <p>New in CC. Unlike AEGP_ConvertCompToLayerTime, this handles time remapping with collapsed or nested comps.</p> <p><pre><code>AEGP_MapCompToLayerTime(\n  PR_RenderContextH         render_contextH,\n  AEGP_RenderLayerContextH  layer_contextH,\n  const A_Time              *comp_timePT,\n  A_Time                    *layer_timePT);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/#convert-between-different-contexts","title":"Convert Between Different Contexts","text":"<p>Convert between render and instance contexts, and manage global data specific to the artisan.</p>"},{"location":"artisans/artisan-data-types/#aegp_artisanutilsuite1","title":"AEGP_ArtisanUtilSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetGlobalContextFromInstanceContext</code></p> <p>Given an instance context, returns a handle to the global context.</p> <p><pre><code>AEGP_GetGlobalContextFromInstanceContext(\n  const PR_InstanceContextH  instance_contextH,\n  PR_GlobalContextH          *global_contextPH);\n</code></pre></p> <p><code>AEGP_GetInstanceContextFromRenderContext</code></p> <p>Given the render context, returns a handle to the instance context.</p> <p><pre><code>AEGP_GetInstanceContextFromRenderContext(\n  const PR_RenderContextH  render_contextH,\n  PR_InstanceContextH      *instnc_ctextPH);\n</code></pre></p> <p><code>AEGP_GetInstanceContextFromQueryContext</code></p> <p>Given a query context, returns a handle to the instance context.</p> <p><pre><code>AEGP_GetInstanceContextFromQueryContext(\n  const PR_QueryContextH  query_contextH,\n  PR_InstanceContextH     *instnce_contextPH);\n</code></pre></p> <p><code>AEGP_GetGlobalData</code></p> <p>Given the global context, returns a handle to global data.</p> <p><pre><code>AEGP_GetGlobalData(\n  const PR_GlobalContextH  global_contextH,\n  PR_GlobalDataH           *global_dataPH);\n</code></pre></p> <p><code>AEGP_GetInstanceData</code></p> <p>Given an instance context, return the associated instance data.</p> <p><pre><code>AEGP_GetInstanceData(\n  const PR_InstanceContextH  instance_contextH,\n  PR_InstanceDataH           *instance_dataPH);\n</code></pre></p> <p><code>AEGP_GetRenderData</code></p> <p>Given a render context, returns the associated render data.</p> <p><pre><code>AEGP_GetRenderData(\n  const PR_RenderContextH  render_contextH,\n  PR_RenderDataH           *render_dataPH);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/#smile-cameras","title":"Smile! Cameras","text":"<p>Obtains the camera geometry, including camera properties (type, lens, depth of field, focal distance, aperture, et cetera).</p>"},{"location":"artisans/artisan-data-types/#aegp_camerasuite2","title":"AEGP_CameraSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetCamera</code></p> <p>Given a layer handle and time, returns the current camera layer handle.</p> <p><pre><code>AEGP_GetCamera(\n  PR_RenderContextH  render_contextH,\n  const A_Time       *comp_timeP,\n  AEGP_LayerH        *camera_layerPH);\n</code></pre></p> <p><code>AEGP_GetCameraType</code></p> <p>Given a layer, returns the camera type of the layer.</p> <p><pre><code>AEGP_GetCameraType(\n  AEGP_LayerH      aegp_layerH,\n  AEGP_CameraType  *camera_typeP;\n</code></pre></p> <p>The camera type can be the following:</p> <ul> <li><code>AEGP_CameraType_NONE = -1</code></li> <li><code>AEGP_CameraType_PERSPECTIVE</code></li> <li><code>AEGP_CameraType_ORTHOGRAPHIC</code></li> </ul> <p><code>AEGP_GetDefaultCameraDistanceToImagePlane</code></p> <p>Given a composition handle, returns the camera distance to the image plane.</p> <p><pre><code>AEGP_GetDefaultCamera DistanceToImagePlane(\n  AEGP_CompH  compH,\n  A_FpLong    *dist_to_planePF)\n</code></pre></p> <p><code>AEGP_GetCameraFilmSize</code></p> <p>Retrieves the size (and units used to measure that size) of the film used by the designated camera.</p> <p><pre><code>AEGP_GetCameraFilmSize(\n  AEGP_LayerH         camera_layerH,\n  AEGP_FilmSizeUnits  *film_size_unitsP,\n  A_FpLong            *film_sizePF0);\n</code></pre></p> <p><code>AEGP_SetCameraFilmSize</code></p> <p>Sets the size (and unites used to measure that size) of the film used by the designated camera.</p> <p><pre><code>AEGP_SetCameraFilmSize)(\n  AEGP_LayerH         camera_layerH,\n  AEGP_FilmSizeUnits  film_size_units,\n  A_FpLong            *film_sizePF0);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/#notes-regarding-camera-behavior","title":"Notes Regarding Camera Behavior","text":"<p>Camera orientation is in composition coordinates, and the rotations are in layer (the camera's layer) coordinates.</p> <p>If the camera layer has a parent, the position is in a coordinate space relative to the parent.</p>"},{"location":"artisans/artisan-data-types/#orthographic-camera-matrix","title":"Orthographic Camera Matrix","text":"<p>Internally, we use composition width and height to set the matrix described by the OpenGL specification as</p> <pre><code>glOrtho(-width/2, width/2, -height/2, height/2, -1, 100);\n</code></pre> <p>The orthographic matrix describes the projection. The position of the camera is described by another, scaled matrix. The inverse of the camera position matrix provides the \"eye\" coordinates.</p>"},{"location":"artisans/artisan-data-types/#focus-on-focal","title":"Focus On Focal","text":"<p>Remember, focal length affects field of view; focal distance only affects depth of field.</p>"},{"location":"artisans/artisan-data-types/#film-size","title":"Film Size","text":"<p>In the real world, film size is measured in millimeters. In After Effects, it's measured in pixels. Multiply by 72 and divide by 25.4 to move from millimeters to pixels.</p> <p>Field of view is more complex;</p> <p>\u03f4 = 1/2 field of view</p> <p>tan(\u03f4) = 1/2 composition height / focal length</p> <p>focal length = 2 tan(\u03f4) / composition height</p>"},{"location":"artisans/artisan-data-types/#hit-the-lights","title":"Hit The Lights!","text":"<p>Get and set the type of lights in a composition.</p>"},{"location":"artisans/artisan-data-types/#aegp_lightsuite2","title":"AEGP_LightSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_GetLightType</code></p> <p>Retrieves the <code>AEGP_LightType</code> of the specified camera layer.</p> <p><pre><code>AEGP_GetLightType(\n  AEGP_LayerH     light_layerH,\n  AEGP_LightType  *light_typeP);\n</code></pre></p> <p><code>AEGP_LightType</code> will be one of the following:</p> <ul> <li><code>AEGP_LightType_PARALLEL</code></li> <li><code>AEGP_LightType_SPOT</code></li> <li><code>AEGP_LightType_POINT</code></li> <li><code>AEGP_LightType_AMBIENT</code></li> </ul> <p><code>AEGP_SetLightType</code></p> <p>Sets the <code>AEGP_LightType</code> for the specified camera layer.</p> <p><pre><code>AEGP_SetLightType(\n  AEGP_LayerH     light_layerH,\n  AEGP_LightType  light_type);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/#notes-on-light-behavior","title":"Notes On Light Behavior","text":"<p>The formula for parallel lights is found in Foley and Van Dam's \"Introduction to Computer Graphics\" (ISBN 0-201-60921-5) as is the formula for point lights.</p> <p>We use the half angle variant proposed by Jim Blinn instead.</p> <p>Suppose we have a point on a layer and want to shade it with the light.</p> <p>Let V be the unit vector from the layer point to the eye point. Let L be the unit vector to the light (in the parallel light case this is constant). Let H be (V+L)/2 (normalized). Let N be the unit normal vector to the layer.</p> <p>The amount of specular reflected light is S * power(H Dot N, shine), where S is the specular coefficient.</p>"},{"location":"artisans/artisan-data-types/#how-should-i-draw-that","title":"How Should I Draw That?","text":"<p>After Effects relies upon Artisans to draw 3D layer handles. If your Artisan chooses not to respond to this call, the default Artisan will draw 3D layer handles for you. Querying transforms is important for optimization of After Effects' caching.</p> <p>The coordinate system is positive x to right, positive y down, positive z into the screen. The origin is the upper left corner. Rotations are x then y then z. For matrices the translate is the bottom row, orientations are quaternions (which are applied first), then any x-y-z rotation after that. As a general rule, use orientation or rotation but not both. Also use rotations if you need control over angular velocity.</p>"},{"location":"artisans/artisan-data-types/#query-transform-functions","title":"Query Transform Functions","text":"<p>These functions give artisans information about the transforms they'll need in order to correctly place layers within a composition and respond appropriately to the various queries After Effects will send to their <code>PR_QueryFunc</code> entry point function.</p> <p>As that entry point is optional, so is your artisan's response to the queries; however, if you don't, your users may be disappointed that (while doing interactive preview drawing) all the camera and light indicators vanish, until they stop moving! Artisans are complex beasts; contact us if you have any questions.</p>"},{"location":"artisans/artisan-data-types/#aegp_queryxformsuite2","title":"AEGP_QueryXFormSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_QueryXformGetSrcType</code></p> <p>Given a query context, returns trasnsform source currently being modified.</p> <p><pre><code>AEGP_QueryXformGetSrcType(\n  PR_QueryContextH     query_contextH,\n  AEGP_QueryXformType  *src_type);\n</code></pre></p> <p>The query context will be one of the following:</p> <ul> <li><code>AEGP_Query_Xform_LAYER</code></li> <li><code>AEGP_Query_Xform_WORLD</code></li> <li><code>AEGP_Query_Xform_VIEW</code></li> <li><code>AEGP_Query_Xform_SCREEN</code></li> </ul> <p><code>AEGP_QueryXformGetDstType</code></p> <p>Given a query context, returns the currently requested transform destination.</p> <p><pre><code>AEGP_QueryXformGetDstType(\n  PR_QueryContextH     query_contextH,\n  AEGP_QueryXformType  *dst_type);\n</code></pre></p> <p><code>AEGP_QueryXformGetLayer</code></p> <p>Used if the source or destination type is a layer. Given a query context, returns the layer handle.</p> <p><pre><code>AEGP_QueryXformGetLayer(\n  PR_QueryContextH  query_contextH,\n  AEGP_LayerH       *layerPH);\n</code></pre></p> <p><code>AEGP_QueryXformGetComp</code></p> <p>Given a query context, returns the current composition handle.</p> <p><pre><code>AEGP_QueryXformGetComp(\n  PR_QueryContextH  query_contextH,\n  AEGP_CompH        *compPH);\n</code></pre></p> <p><code>AEGP_QueryXformGetTransformTime</code></p> <p>Given a query context, returns the time of the transformation.</p> <p><pre><code>AEGP_QueryXformGetTransformTime(\n  PR_QueryContextH  query_contextH,\n  A_Time            *time);\n</code></pre></p> <p><code>AEGP_QueryXformGetViewTime</code></p> <p>Given a query context, returns the time of the associated view.</p> <p><pre><code>AEGP_QueryXformGetViewTime(\n  PR_QueryContextH  query_contextH,\n  A_Time            *time);\n</code></pre></p> <p><code>AEGP_QueryXformGetCamera</code></p> <p>Given a query context, returns the current camera layer handle.</p> <p><pre><code>AEGP_QueryXformGetCamera(\n  PR_QueryContextH  query_contextH,\n  AEGP_LayerH       *camera_layerPH);\n</code></pre></p> <p><code>AEGP_QueryXformGetXform</code></p> <p>Given a query context, returns the current matrix transform.</p> <p><pre><code>AEGP_QueryXformGetXform(\n  PR_QueryContextH  query_contextH,\n  A_Matrix4         *xform);\n</code></pre></p> <p><code>AEGP_QueryXformSetXform</code></p> <p>Given a query context, return the matrix transform you compute in <code>xform</code>.</p> <p><pre><code>AEGP_QueryXformSetXform(\n  PR_QueryContextH  query_contextH,\n  A_Matrix4         *xform);\n</code></pre></p> <p><code>AEGP_QueryWindowRef</code></p> <p>Sets the window reference to be used (by After Effects) for the given <code>PR_QueryContextH</code>.</p> <p><pre><code>AEGP_QueryWindowRef(\n  PR_QueryContextH        q_contextH,\n  AEGP_PlatformWindowRef  *window_refP);\n</code></pre></p> <p><code>AEGP_QueryWindowClear</code></p> <p>Returns which <code>AEGP_PlatformWindowRef</code> (and <code>A_Rect</code>) to clear, for the given <code>PR_QueryContextH</code>.</p> <p><pre><code>AEGP_QueryWindowClear(\n  PR_QueryContextH        q_contextH,\n  AEGP_PlatformWindowRef  *window_refP,\n  A_LegacyRect            *boundsPR);\n</code></pre></p> <p><code>AEGP_QueryFrozenProxy</code></p> <p>Returns whether or not the textures used in the given <code>PR_QueryContextH</code> should be frozen.</p> <p><pre><code>AEGP_QueryFrozenProxy(\n  PR_QueryContextH  q_contextH,\n  A_Boolean         *onPB);\n</code></pre></p> <p><code>AEGP_QuerySwapBuffer</code></p> <p>Sent after rendering and camera/light handle drawing is complete; After Effects returns the buffer into which the artisan should draw its output.</p> <p><pre><code>AEGP_QuerySwapBuffer(\n  PR_QueryContextH        q_contextH,\n  AEGP_PlatformWindowRef  *window_refP,\n  AEGP_WorldH             *dest_bufferp);\n</code></pre></p> <p><code>AEGP_QueryDrawProcs</code></p> <p>Sets the interactive drawing functions After Effects will call while drawing camera and lighting handles into the artisan's provided context.</p> <p><pre><code>AEGP_QueryDrawProcs(\n  PR_QueryContextH         query_contextH,\n  PR_InteractiveDrawProcs  *window_refP);\n</code></pre></p> <p><code>AEGP_QueryPrepareForLineDrawing</code></p> <p>Informs After Effects about the context into which it will be drawing.</p> <p><pre><code>AEGP_QueryPrepareForLineDrawing(\n  PR_QueryContextH        query_contextH,\n  AEGP_PlatformWindowRef  *window_refP,\n  A_LegacyRect            *viewportP,\n  A_LPoint                *originP,\n  A_FloatPoint            *scaleP);\n</code></pre></p> <p><code>AEGP_QueryUnprepareForLineDrawing</code></p> <p>As far as After Effects is concerned, the artisan is done drawing lines.</p> <p><pre><code>AEGP_QueryUnprepareForLineDrawing(\n  PR_QueryContextH        query_contextH,\n  AEGP_PlatformWindowRef  *window_refP);\n</code></pre></p>"},{"location":"artisans/artisan-data-types/#interactive-drawing-functions","title":"Interactive Drawing Functions","text":"<p>We've added the ability for artisans to provide functions After Effects can use to do basic drawing functions for updating the comp window display during preview, including camera, light, and wireframe preview modeling.</p>"},{"location":"artisans/artisan-data-types/#pr_interactivedrawprocs","title":"PR_InteractiveDrawProcs","text":"Function Purpose <code>PR_Draw_MoveToFunc</code> <pre><code>PR_Draw_MoveToFunc(\n  short  x,\n  short  y);\n</code></pre> <code>PR_Draw_LineToFunc</code> <pre><code>PR_Draw_LineToFunc(\n  short  x,\n  short  y);\n</code></pre> <code>PR_Draw_ForeColorFunc</code> <pre><code>PR_Draw_ForeColorFunc(\n  const A_Color  *fore_colo\n</code></pre> <code>PR_Draw_FrameRectFunc</code> <pre><code>PR_Draw_FrameRectFunc(\n  const A_Rect  *rectPR );\n</code></pre> <code>PR_Draw_PaintRectFunc</code> <pre><code>PR_Draw_PaintRectFunc(\n  const A_Rect  *rectPR );\n</code></pre>"},{"location":"artisans/artisan-data-types/#notes-on-query-time-functions","title":"Notes On Query Time Functions","text":"<p><code>AEGP_QueryXformGetTransformTime()</code> and <code>AEGP_QueryXformGetViewTime()</code> are both necessary for an artisan to build a representation of the scene to render.</p> <p><code>AEGP_QueryXformGetTransformTime()</code> gets the time of the transform, which is then passed to <code>AEGP_GetCompShutterFrameRange()</code> from AEGP_CompSuite11.</p> <p><code>AEGP_QueryXformGetViewTime()</code> gets the time of the view, which is used in calling <code>AEGP_GetLayerToWorldXformFromView()</code> from AEGP_LayerSuite9.</p>"},{"location":"artisans/artisans/","title":"Artisans","text":"<p>Note</p> <p>If you're considering developing an Artisan, please talk it over with us first.</p> <p>The Artisan API exposes function hooks necessary for a plug-in to provide rendered output of 3D layers, taking over completely from After Effects (which still handles all rendering of 2D layers). There can be only one Artisan per composition, chosen from within the Composition Settings &gt; Advanced dialog. Artisans render the 3D environment, asking After Effects for information about each element in the composition. As you might guess, this is a vast and tedious process. This API is not recommended for anyone without a strong need to override After Effects' 3D rendering.</p> <p>Artisans may share information with effects written to communicate with them, but effects may not initiate this communication. Many of the suites used by Artisans require a rendering context which is generated only after all effects have been applied to the layer.</p>"},{"location":"artisans/artisans/#interactive-artisans","title":"Interactive Artisans","text":"<p>These differ from standard artisans in that they handle all layers in a composition (not just those which the user has made 3D), and they will only ever be called for onscreen display, never for rendered final output (the rendering calls \"fall through\" to the default artisan).</p>"},{"location":"audio/accessing-audio-data/","title":"Accessing Audio Data","text":"<p>Use <code>PF_CHECKOUT_LAYER_AUDIO</code> from Interaction Callbacks to retrieve an audio layer.</p> <p>This layer is opaque; use <code>PF_GET_AUDIO_DATA</code> to access specific details about that audio.</p> <p>As with pixel data, it's important that you check in the audio as soon as possible.</p> <p>If your effect requires as input a time span different from the output time span, update the <code>startsampL</code> and <code>endsampL</code> field in <code>PF_OutData</code> during <code>PF_Cmd_AUDIO_SETUP</code> from Frame Selectors.</p>"},{"location":"audio/accessing-audio-data/#extending-audio-clips","title":"Extending Audio Clips","text":"<p>You cannot extend the length of an audio clip through the API.</p> <p>However, it is a relatively simple matter for the user to extend the length of the clip before applying your effect. Apply time remapping to the layer and simply extend the out point.</p> <p>If you're adding a delay effect to a sounds clip, you'd want to allow it time to fade away instead of truncating the sound at the original end point.</p> <p>Document the steps users should take when applying your effect.</p>"},{"location":"audio/audio-considerations/","title":"Audio Considerations","text":"<p>The After Effects audio API supports sampling rates up to 96Khz, in as many formats as possible.</p> <p>In the same way that plug-ins' pixel manipulation functions should remain \"resolution independent\", audio plug-ins should be sample rate- and bit depth-independent.</p> <p>Your plug-in can't know anything about the final output format of the audio in question; it might get stretched, normalized, truncated, or phase-inverted between the application of your plug-in and the final output.</p> <p>Audio filters encounter different issues than do image filters.</p> <p>Investigate the SDK sample for one possible implementation of audio rendering.</p>"},{"location":"audio/audio-data-structures/","title":"Audio Data Structures","text":"<p>The following data types are used by After Effects to describe audio data.</p> <p>Structure</p> <p>Description</p> <p><code>PF_SoundFormat</code></p> <p>Indicates whether the audio is in unsigned pulse code modulation (PCM), signed PCM, or floating point format.</p> <p><code>PF_SoundSampleSize</code></p> <p>Samples are in 1, 2, or 4 byte format.</p> <p><code>PF_SoundChannels</code></p> <p>Indicates whether the audio is mono or stereo.</p> <p><code>PF_SoundFormatInfo</code></p> <p>Contains the sampling rate, number of channels, sample size, and format of the audio to which it refers.</p> <p><code>PF_SoundWorld</code></p> <p>Use <code>PF_SoundWorlds</code> to represent audio.</p> <p>In addition to a <code>PF_SoundFormatInfo</code>, they contain the length of the audio, and a pointer to the actual audio data.</p> <p><code>PF_SoundFormat</code>, <code>PF_SoundSampleSize</code>, and <code>PF_SoundChannels</code> are all contained within a <code>PF_SoundFormatInfo</code>.</p> <p><code>PF_SoundWorlds</code> contain a <code>PF_SoundFormatInfo</code>, and further instance-specific information.</p>"},{"location":"audio/audio-specific-float-slider-variables/","title":"Audio-Specific Float Slider Variables","text":"<p><code>PF_Param_FLOAT_SLIDERs</code> contain several parameters not found in other sliders; flags, phase, and curve tolerance.</p>"},{"location":"audio/audio-specific-float-slider-variables/#flags","title":"Flags","text":"<p>The only flag available is <code>PF_FSliderFlag_WANT_PHASE</code>.</p> <p>This registers the effect to receive updated phase information from After Effects during audio rendering.</p> <p>To understand what this flag does, turn it off and check your output.</p>"},{"location":"audio/audio-specific-float-slider-variables/#phase","title":"Phase","text":"<p>This is where the requested phase value is stored.</p>"},{"location":"audio/audio-specific-float-slider-variables/#curve-tolerance","title":"Curve Tolerance","text":"<p>Curve tolerance is used by After Effects to subdivide the audio effects' time-variant parameters. Set this to zero for default behavior (or for non-audio <code>FLOAT_SLIDER</code> parameters).</p>"},{"location":"audio/audio-specific-float-slider-variables/#whats-zero-really","title":"What's Zero, Really?","text":"<p>When amplitude is zero, After Effects is at -192db.</p>"},{"location":"audio/audio/","title":"Audio","text":"<p>After Effects can process audio encoded at up to 96Khz, floating point (24-bit) resolution, mono or stereo.</p> <p>We provide high quality resampling.</p> <p><code>PF_InData</code> and <code>PF_OutData</code> both contain information specific to audio handling.</p> <p>While audio isn't the focus of After Effects' feature set, it is an important component of compositing and pre-visualization workflows.</p> <p>Also, several engineers on our team are audio fanatics, and ensure that our audio effects (and the whole audio pipeline) are of the highest quality.</p>"},{"location":"audio/global-outflags/","title":"Global Outflags","text":"<p>All audio effects must set either <code>PF_OutFlag_AUDIO_EFFECT_TOO</code> or <code>PF_OutFlag_AUDIO_EFFECT_ONLY</code>.</p> <p><code>PF_OutFlag_I_USE_AUDIO</code> is for visual effects that check out audio data, but don't modify it.</p> <p><code>PF_OutFlag_AUDIO_FLOAT_ONLY</code>, <code>PF_OutFlag_AUDIO_IIR</code> and <code>PF_OutFlag_I_SYNTHESIZE_AUDIO</code> provide greater control over audio output (see PF_OutFlags for more details).</p>"},{"location":"effect-basics/PF_EffectWorld/","title":"PF_EffectWorld / PF_LayerDef","text":"<p>After Effects represents images using PF_EffectWorlds, also called PF_LayerDefs.</p>"},{"location":"effect-basics/PF_EffectWorld/#pf_effectworld-structure","title":"PF_EffectWorld Structure","text":"<p>Item</p> <p>Description</p> <p><code>world_flags</code></p> <p>Currently, the only flags are:</p> <ul> <li><code>PF_WorldFlag_DEEP</code> - set if the world is 16-bpc</li> <li><code>PF_WorldFlag_WRITEABLE</code> - indicates that you are allowed to alter the image data of the world.</li> </ul> <p>Normally effects cannot alter input image data; only output.</p> <p><code>data</code></p> <p>Pointer to image data, stored as a <code>PF_PixelPtr</code>.</p> <p>Do not access directly; use the PF_PixelPtr Accessor Macros.</p> <p>Image data in After Effects is always organized in sequential words each containing Alpha, Red, Green, Blue from the low byte to the high byte.</p> <p><code>rowbytes</code></p> <p>The length, in bytes, of each row in the image's block of pixels.</p> <p>The block of pixels contains height lines each with width pixels followed by some bytes of padding.</p> <p>The width pixels (times four, because each pixel is four bytes long) plus optional extra padding adds up to rowbytes bytes.</p> <p>Use this value to traverse the image data.</p> <p>Platform-specific padding at the end of rows makes it unwise to traverse the entire buffer.</p> <p>Instead, find the beginning of each row using height and rowbytes.</p> <p>Note</p> <p>This value does not vary based on whether field rendering is active.</p> <p>Note</p> <p>Input and output worlds with the same dimensions can use different rowbytes values.</p> <p><code>width</code></p> <p>Width and height of the pixel buffer.</p> <p><code>height</code></p> <p><code>extent_hint</code></p> <p>The smallest rectangle encompassing all opaque (non-zero alpha) pixels in the layer.</p> <p>This defines the area which needs to be output.</p> <p>If your plug-in varies with extent (like a diffusion dither), ignore this and render the full frame each time.</p> <p><code>pix_aspect_ratio</code></p> <p>The pixel aspect ratio expressed as a <code>PF_Rational</code>.</p> <p>Note</p> <p>Effects can use this value for checked out layers, but must use <code>PF_InData.pixel_aspect_ratio</code> for the layer to which they're applied. Sorry.</p> <p><code>platform_ref</code></p> <p>No longer used in CS5.</p> <p>Platform-specific reference information.</p> <p>On Windows, this contains an opaque value.</p> <p>On macOS, <code>PF_GET_PLATFORM_REFS</code> provides a <code>CGrafPtr</code> and a <code>GDeviceHandle</code> from a <code>PF_EffectWorld</code>.</p> <p>Note</p> <p>You cannot acquire a <code>platform_ref</code> during <code>PF_Cmd_GLOBAL_SETUP</code>, as there isn't any output context yet. Patience, my pet.</p> <p><code>dephault</code></p> <p>For layer parameters only.</p> <p>Either <code>PF_LayerDefault_MYSELF</code> or <code>PF_LayerDefault_NONE</code>.</p>"},{"location":"effect-basics/PF_EffectWorld/#new-in-160","title":"New In 16.0","text":"<p>During PF_Cmd_SMART_RENDER_GPU, PF_LayerDef will be filled out the same as it is for regular CPU renders, but PF_LayerDef.data will be null; all other fields will be valid.</p>"},{"location":"effect-basics/PF_EffectWorld/#rowbytes-in-pf_effectworlds","title":"Rowbytes In PF_EffectWorlds","text":"<p>Don't assume that you can get to the next scanline of a <code>PF_EffectWorld</code> using <code>(width * sizeof(current_pixel_type)) + 4</code>, or whatever; use the PF_EffectWorld's <code>rowbytes</code> instead.</p> <p>Never write outside the indicated region of a PF_EffectWorld; this can corrupt cached image buffers that don't belong to you.</p> <p>To test whether your effects are honoring the <code>PF_EffectWorld&gt;rowbytes</code>, apply the Grow Bounds effect after your effect.</p> <p>The output buffer will have larger rowbytes than the input (though it will still have the same logical size).</p>"},{"location":"effect-basics/PF_EffectWorld/#byte-alignment","title":"Byte Alignment","text":"<p>The pixels in a <code>PF_EffectWorld</code> are not guaranteed to be 16-byte-aligned. An effect may get a subregion of a larger PF_EffectWorld. Users of Apple's sample code for pixel processing optimization, you have been warned.</p> <p>Beyond 8-bit per channel color, After Effects supports 16 bit and 32-bit float per-channel color.</p> <p>Effects will never receive input and output worlds with differing bit depths, nor will they receive worlds with higher bit depth than they have claimed to be able to handle.</p>"},{"location":"effect-basics/PF_EffectWorld/#accessor-macros-for-opaque-data-type-pixels","title":"Accessor Macros For Opaque (Data Type) Pixels","text":"<p>Use the following macros to access the data within (opaque) PF_PixelPtrs.</p> <p>It is, emphatically, not safe to simply cast pointers of one type into another! To make it work at all requires a cast, and there's nothing that prevents you from casting it incorrectly. We may change its implementation at a later date (at which time you'll thank us for forcing this level of abstraction).</p>"},{"location":"effect-basics/PF_EffectWorld/#pf_pixelptr-accessor-macros","title":"PF_PixelPtr Accessor Macros","text":"<p>Macro</p> <p>Purpose</p> <p><code>PF_GET_PIXEL_DATA16</code></p> <p>Obtain a pointer to a 16-bpc pixel within the specified world.</p> <p>The returned pixel pointer will be NULL if the world is not 16-bpc.</p> <p>The second parameter is optional; if it is not NULL, the returned pixel will be an interpretation of the values in the passed-in pixel, as if it were in the specified PF_EffectWorld.</p> <p><pre><code>PF_GET_PIXEL_DATA16 (\n  PF_EffectWorld wP,\n  PF_PixelPtr    pP0,\n  PF_Pixel16     *outPP);\n</code></pre></p> <p><code>PF_GET_PIXEL_DATA8</code></p> <p>Obtain a pointer to a 8-bpc pixel within the specified world.</p> <p>The returned pixel pointer will be NULL if the world is not 8- bpc.</p> <p>The second parameter is optional; if it is not NULL, the returned pixel will be an interpretation of the values in the passed-in pixel, as if it were in the specified PF_EffectWorld.</p> <p><pre><code>PF_GET_PIXEL_DATA8 (\n  PF_EffectWorld wP,\n  PF_PixelPtr    pP0,\n  PF_Pixel8      *outPP);\n</code></pre></p> <p>Think of <code>PF_GET_PIXEL_DATA16</code> and <code>PF_GET_PIXEL_DATA8</code> as safe (ahem) casting routines.</p> <p>The code required is actually very simple to get a <code>PF_Pixel16*</code> out of the PF_EffectWorld output:</p> <pre><code>{\n    PF_Pixel16 *deep_pixelP = NULL;\n    PF_Err     err = PF_Err_NONE;\n    err = PF_GET_PIXEL_DATA16(output, NULL, &amp;deep_pixelP);\n}\n</code></pre> <p>This returns deep_pixelP as NULL if the world does not have deep pixels.</p> <p>The second parameter is not used very often and should be passed as NULL; pass a PF_PixelPtr that is not contained in a PF_EffectWorld to coerce it to the depth of that PF_EffectWorld).</p>"},{"location":"effect-basics/PF_InData/","title":"PF_InData","text":"<p>After Effects communicates system, project, layer and audio information using <code>PF_InData</code>. This structure is updated before each command selector is sent to a plug-in.</p> <p>Fields valid only during specific PF_Cmds are noted.</p> <p>Also, don't worry; although <code>PF_InData</code> is dauntingly large, you need not memorize each member's purpose; you'll use some of the fields some of the time.</p>"},{"location":"effect-basics/PF_InData/#pf_indata-members","title":"PF_InData Members","text":"<p>Name</p> <p>Description</p> <p><code>inter</code></p> <p>Callbacks used for user interaction, adding parameters, checking whether the user has interrupted the effect, displaying a progress bar, and obtaining source frames and parameter values at times other than the current time being rendered.</p> <p>This very useful function suite is described in Interaction Callback Functions.</p> <p><code>utils</code></p> <p>Graphical and mathematical callbacks. This pointer is defined at all times.</p> <p><code>effect_ref</code></p> <p>Opaque data that must be passed to most of the various callback routines.</p> <p>After Effects uses this to identify your plug-in.</p> <p><code>quality</code></p> <p>The current quality setting, either <code>PF_Quality_HI</code> or <code>PF_Quality_LO</code>.</p> <p>Effects should perform faster in LO, and more accurately in HI.</p> <p>The graphics utility callbacks perform differently between LO and HI quality; so should your effect!</p> <p>This field is defined during all frame and sequence selectors.</p> <p><code>version</code></p> <p>Effects specification version, Indicate the version you need to run successfully during <code>PF_Cmd_GLOBAL_SETUP</code>.</p> <p><code>serial_num</code></p> <p>The serial number of the invoking application.</p> <p><code>appl_id</code></p> <p>The identifier of the invoking application.</p> <p>If your plug-in is running in After Effects, <code>appl_id</code> contains the application creator code 'FXTC'.</p> <p>If it is running in Premiere Pro &amp; Other Hosts it will be 'PrMr'.</p> <p>Use this to test whether your plug-in, licensed for use with one application, is being used with another.</p> <p><code>num_params</code></p> <p>Input parameter count.</p> <p><code>what_cpu</code></p> <p>Under macOS this contains the Gestalt value for CPU type (see Inside Macintosh, volume 6). Undefined on Windows.</p> <p><code>what_fpu</code></p> <p>Under macOS this contains the Gestalt value for FPU type. Undefined on Windows.</p> <p><code>current_time</code></p> <p>The time of the current frame being rendered, valid during PF_Cmd_RENDER.</p> <p>This is the current time in the layer, not in any composition.</p> <p>If a layer starts at other than time 0 or is time-stretched, layer time and composition time are distinct.</p> <p>The current frame number is <code>current_time</code> divided by <code>time_step</code>.</p> <p>The current time in seconds is <code>current_time</code> divided by time_scale.</p> <p>To handle time stretching, composition frame rate changes, and time remapping, After Effects may ask effects to render at non-integral times (between two frames).</p> <p>Be prepared for this; don't assume that you'll only be asked for frames on frame boundaries.</p> <p>Note</p> <p>As of CS3 (8.0), effects may be asked to render at negative current times. Deal!</p> <p><code>time_step</code></p> <p>The duration of the current source frame being rendered.</p> <p>In several situations with nested compositions, this source frame duration may be different than the time span between frames in the layer (<code>local_time_step</code>).</p> <p>This value can be converted to seconds by dividing by time_scale.</p> <p>When calculating other source frame times, such as for PF_CHECKOUT_PARAM, use this value rather than <code>local_time_step</code>.</p> <p>Can be negative if the layer is time-reversed. Can vary from one frame to the next if time remapping is applied on a nested composition.</p> <p>Can differ from local_time_step when source material is stretched or remapped in a nested composition.</p> <p>For example, this could occur when an inner composition is nested within an outer composition with a different frame rate, or time remapping is applied to the outer composition.</p> <p>This value will be 0 during PF_Cmd_SEQUENCE_SETUP if it is not constant for all frames.</p> <p>It will be set correctly during <code>PF_Cmd_FRAME_SETUP</code> and <code>PF_Cmd_FRAME_SETDOWN</code> selectors.</p> <p>Warning</p> <p>This can be zero, so check it before you divide.</p> <p><code>total_time</code></p> <p>Duration of the layer.</p> <p>If the layer is time-stretched longer than 100%, the value will be adjusted accordingly; but if the layer is time-stretched shorter, the value will not be affected.</p> <p>If time remapping is enabled, this value will be the duration of the composition.</p> <p>This value can be converted to seconds by dividing by <code>time_scale</code>.</p> <p><code>local_time_step</code></p> <p>Time difference between frames in the layer.</p> <p>Affected by any time stretch applied to a layer.</p> <p>Can be negative if the layer is time-reversed.</p> <p>Unlike <code>time_step</code>, this value is constant from one frame to the next.</p> <p>This value can be converted to seconds by dividing by <code>time_scale</code>.</p> <p>For a step value that is constant over the entire frame range of the layer, use <code>local_time_step</code>, which is based on the composition's framerate and layer stretch.</p> <p><code>time_scale</code></p> <p>The units per second that <code>current_time</code>, <code>time_step</code>, <code>local_time_step</code> and <code>total_time</code> are in.</p> <p>If <code>time_scale</code> is 30, then the units of <code>current_time</code>, <code>time_step</code>, <code>local_time_step</code> and <code>total_time</code> are in 30ths of a second.</p> <p>The <code>time_step</code> might then be 3, indicating that the sequence is actually being rendered at 10 frames per second. <code>total_time</code> might be 105, indicating that the sequence is 3.5 seconds long.</p> <p><code>field</code></p> <p>Valid only if PF_OutFlag_PIX_INDEPENDENT was set during PF_Cmd_GLOBAL_SETUP.</p> <p>Check this field to see if you can process just the upper or lower field.</p> <p><code>shutter_angle</code></p> <p>Motion blur shutter angle. Values range from 0 to 1, which represents 360 degrees.</p> <p>Will be zero unless motion blur is enabled and checked for the target layer.</p> <p><code>shutter_angle == 180</code> means the time interval between <code>current_time</code> and <code>current_time + 1/2 time_step</code>.</p> <p>Valid only if PF_OutFlag_I_USE_SHUTTER_ANGLE was set during PF_Cmd_GLOBAL_SETUP.</p> <p>See the section on Motion Blur for details on how to implement motion blur in your effect.</p> <p><code>width</code></p> <p>Dimensions of the source layer, which are not necessarily the same as the width and height fields in the input image parameter.</p> <p>Buffer resizing effects can cause this difference. Not affected by downsampling.</p> <p><code>height</code></p> <p><code>extent_hint</code></p> <p>The intersection of the visible portions of the input and output layers; encloses the composition rectangle transformed into layer coordinates.</p> <p>Iterating over only this rectangle of pixels can speed your effect dramatically. See extent_hint Usage later in this chapter regarding proper usage.</p> <p><code>output_origin_x</code></p> <p>The origin of the output buffer in the input buffer. Non-zero only when the effect changes the origin.</p> <p><code>output_origin_y</code></p> <p><code>downsample_x</code></p> <p>Point control parameters and layer parameter dimensions are automatically adjusted to compensate for a user telling After Effects to render only every nth pixel.</p> <p>Effects need the downsampling factors to interpret scalar parameters representing pixel distances in the image (like sliders).</p> <p>For example, a blur of 4 pixels should be interpreted as a blur of 2 pixels if the downsample factor is 1/2 in each direction (downsample factors are represented as ratios.)</p> <p>Valid only during:</p> <ul> <li>PF_Cmd_SEQUENCE_SETUP</li> <li>PF_Cmd_SEQUENCE_RESETUP</li> <li>PF_Cmd_FRAME_SETUP</li> <li>PF_Cmd_RENDER</li> </ul> <p><code>downsample_y</code></p> <p><code>pixel_aspect_ratio</code></p> <p>Pixel aspect ratio (width over height).</p> <p><code>in_flags</code></p> <p>Unused.</p> <p><code>global_data</code></p> <p>Data stored by your plug-in during other selectors. Locked and unlocked by After Effects before and after calling the plug-in.</p> <p><code>sequence_data</code></p> <p><code>frame_data</code></p> <p><code>start_sampL</code></p> <p>Starting sample number, relative to the start of the audio layer.</p> <p><code>dur_sampL</code></p> <p>Duration of audio, expressed as the number of samples. Audio-specific.</p> <p><code>total_sampL</code></p> <p>Samples in the audio layer; equivalent to total_time expressed in samples.</p> <p><code>src_snd</code></p> <p><code>PF_SoundWorld</code> describing the input sound. Audio-specific.</p> <p><code>pica_basicP</code></p> <p>Pointer to the PICA Basic suite, used to acquire other suites.</p> <p><code>pre_effect_source_origin_x</code></p> <p>Origin of the source image in the input buffer. Valid only when sent with a frame selector.</p> <p>Non-zero only if one or more effects that preceded this effect on the same layer resized the output buffer and moved the origin.</p> <p>Check for both the resize and the new origin to determine output area.</p> <p>This is useful for effects which have implicit spatial operations (other than point controls), like flipping a file around an image's center.</p> <p>Note</p> <p>Checked-out point parameters are adjusted for the pre-effect origin at the current time, not the time being checked out.</p> <p><code>pre_effect_source_origin_y</code></p> <p><code>shutter_phase</code></p> <p>Offset from frame time to shutter open time as a percentage of a frame duration.</p>"},{"location":"effect-basics/PF_InData/#extent_hint-usage","title":"extent_hint Usage","text":"<p>Note</p> <p>Hint rectangles are much more effective...and complicated...for SmartFX.</p> <p>Use <code>extent_hint</code> to process only those pixels for which output is required; this is one of the simplest optimizations you can make.</p> <p>Tell After Effects you use <code>in_data&gt;extent_hint</code> by setting PF_OutFlag_USE_OUTPUT_EXTENT in PF_OutData during PF_Cmd_GLOBAL_SETUP (and in your PiPL).</p> <p>Disable caching from the preferences menu before testing <code>extent_hint</code> code, so After Effects renders your effect whenever anything in your composition changes.</p> <p>Otherwise, the caching mechanism would obscure your plug-in's (possibly incorrect) output.</p> <p>Move the layer within the composition so it's cropped. The <code>output&gt;extent_hint</code> is the portion of the layer which is visible in the composition.</p> <p>Add a mask to your layer and move it around.</p> <p>This changes the <code>extent_hint</code>, which encloses all of the non-zero alpha areas of the image.</p> <p>The <code>in_data&gt;extent_hint</code> is the intersection of these two rectangles (the composition and the mask), and changes whenever they do.</p> <p>Extent rectangles are computed in the coordinate space of the original input layer, before resizing and origin shifting, to simplify rectangle intersection between the input and output extents for effects which set PF_OutFlag_PIX_INDEPENDENT.</p> <p>To get the output extent in the coordinate system of the output buffer, offset the <code>extent_hint</code> by the <code>PF_InData-&gt;output_origin_x</code> and <code>y</code> fields.</p> <p>Account for downsampling when computing output size; users must be able to render at full resolution.</p> <p>If the output buffer exceeds 30,000 by 30,000, clamp it to that size, and consider displaying an alert dialog.</p> <p>Once your code behaves correctly, enable the cache and see how frequently the effect needs to re-render.</p> <p>Consider a drop shadow; users frequently apply a static drop shadow to a still image.</p> <p>The <code>output&gt;extent_hint</code> is ignored, so the cache is used more often.</p> <p>For buffer-expanding effects, intersect the <code>output&gt;extent_hint</code> with your plug-in's transformed bounds and sets the size accordingly during PF_Cmd_FRAME_SETUP.</p>"},{"location":"effect-basics/PF_InData/#now-with-20-more-pixels","title":"Now with 20% More Pixels!","text":"<p>As of 6.0, the extent_hints passed are 20% larger than the layer itself, to help with our predictive rendering decisions.</p> <p>Numerous effects expand the buffer \"just a touch\", and After Effects often uses the hint rectangles later.</p>"},{"location":"effect-basics/PF_InData/#point-controls-and-buffer-expansion","title":"Point Controls And Buffer Expansion","text":"<p>Effects which expand the output buffer position the original layer's upper left corner by setting set <code>output_origin_x/y</code> in <code>PF_InData</code> during PF_Cmd_FRAME_SETUP.</p> <p>This shift is reported to subsequent effects in the <code>pre_effect_source_origin_x/y</code>. Point parameters are adjusted for this shift automatically.</p> <p>Apply a buffer expander such as Gaussian Blur or the Resizer SDK sample, before your effect, and use a large resize value.</p> <p>If your effect is not handling <code>pre_effect_source_origin_x/y</code> correctly, turning the blur on and off will shift the position of the output.</p> <p>All point parameter values (at any time) have shift values described by <code>pre_effect_source_origin_x/y</code>. For most effects this works transparently.</p> <p>However, if a buffer expansion changes over time (as with an animated blur amount), the origin shift will move non-animated points.</p> <p>Consider this when designing effects which cache point parameter values between frames.</p>"},{"location":"effect-basics/PF_OutData/","title":"PF_OutData","text":"<p>Communicate changes made by your plug-in to After Effects using <code>PF_OutData</code>. Valid times for altering these fields are noted.</p>"},{"location":"effect-basics/PF_OutData/#pf_outdata-members","title":"PF_OutData Members","text":"<p>Field</p> <p>Description</p> <p><code>my_version</code></p> <p>Set this flag (using the PF_VERSION macro) to the version of your plug-in code.</p> <p>After Effects uses this data to decide which of duplicate effects to load.</p> <p><code>name</code></p> <p>Unused.</p> <p><code>global_data</code></p> <p>Handle which will be returned to you in PF_InData with every call.</p> <p>Use After Effects' memory allocation functions.</p> <p><code>num_params</code></p> <p>After Effects checks this field against the number of calls made to <code>PF_ADD_PARAM</code>, as well as the implicit input layer.</p> <p><code>sequence_data</code></p> <p>Allocatable upon receiving PF_Cmd_SEQUENCE_SETUP, this handle will be passed back to you in PF_InData during all subsequent calls.</p> <p><code>flat_sdata_size</code></p> <p>Unused (After Effects knows the size, because you used its allocation functions to get the memory in the first place).</p> <p><code>frame_data</code></p> <p>Handle you (might have) allocated during PF_Cmd_FRAME_SETUP.</p> <p>This is never written to disk; it was used to pass information from your PF_Cmd_FRAME_SETUP response to your PF_Cmd_RENDER or PF_Cmd_FRAME_SETDOWN (which you must do if you resize the output buffer).</p> <p>Otherwise, this memory is rarely used.</p> <p><code>width</code>, <code>height</code>, <code>origin</code></p> <p>Set during PF_Cmd_FRAME_SETUP if the output image size differs from the input.</p> <p><code>width</code> and <code>height</code> are the size of the output buffer, and <code>origin</code> is the point the input should map to in the output.</p> <p>To create a 5-pixel drop shadow up and left, set origin to (5, 5).</p> <p>out_flags</p> <p>Send messages to After Effects. OR together multiple values.</p> <p><code>return_msg</code></p> <p>After Effects displays any C string you put here (checked and cleared after every command selector).</p> <p><code>start_sampL</code>, <code>dur_sampL</code>, <code>dest_snd</code></p> <p>Used only for Audio commands</p> <p>out_flags2</p> <p>Send messages to After Effects. OR together multiple values.</p>"},{"location":"effect-basics/PF_OutData/#pf_outflags","title":"PF_OutFlags","text":"<p>These flags communicate capability and status information to After Effects. In previous versions they were also used to send rudimentary messages, e.g. refresh the UI, send an error message.</p> <p>These capabilities have been supplanted by function suites, and all new messaging functions will come in that format. However, capability flags are still contained in the PiPL.</p> <p>Update both the PiPL and your source code when you make a change. Many of these flags can be changed during an After Effects session.</p> <p>Flag</p> <p>Indicates</p> <p><code>PF_OutFlag_KEEP_RESOURCE_OPEN</code></p> <p>The plug-in's resources must be available during all commands.</p> <p>During PF_Cmd_GLOBAL_SETUP, the plug-in's resources are always open, but unavailable at all other times (except during PF_Cmd_ABOUT and PF_Cmd_DO_DIALOG), unless this flag has been set.</p> <p>Set if you need access to resources at any time other than during PF_Cmd_GLOBAL_SETUP.</p> <p>Note</p> <p>We recommend the plug-in load and store the necessary resources in global data, rather than keeping the file's resources open.</p> <p><code>PF_OutFlag_WIDE_TIME_INPUT</code></p> <p>The effect checks out a parameter at a time other than <code>current_time</code>.</p> <p>If you use a parameter (including layer parameters) from another time, set this flag.</p> <p>Otherwise, After Effects won't correctly invalidate cached frames used by your effect.</p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p>If you set this flag, we strongly recommend you also set <code>PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT</code> for better performance.</p> <p><code>PF_OutFlag_NON_PARAM_VARY</code></p> <p>With this flag set, After Effects will not cache output when the effect is applied to a still.</p> <p>Otherwise, After Effects will cache your output to be used to render other frames, if possible.</p> <p>Set this flag if output varies based on something besides a parameter value.</p> <p>If the effect produces changing frames when applied to a still image and all parameters are constant, that's a sure sign that this bit should be set (e.g. Wave Warp).</p> <p>Particle effects, for example, will need this.</p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p>Can be overridden dynamically if needed during PF_Cmd_QUERY_DYNAMIC_FLAGS.</p> <p>Turn this off whenever possible to improve performance.</p> <p><code>PF_OutFlag_RESERVED6</code></p> <p>Unused. Formerly <code>PF_OutFlag_SEND_PARAMS_UPDATE</code>. Replaced by <code>PF_OutFlag_REFRESH_UI</code>.</p> <p><code>PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING</code></p> <p>Both After Effects and Premiere Pro assume this flag is set.</p> <p>Flattening is necessary when sequence data contains referencing items (pointers, handles), which must be flattened for storage and unflattened for use.</p> <p>See PF_Cmd_SEQUENCE_RESETUP.</p> <p><code>PF_OutFlag_I_DO_DIALOG</code></p> <p>Effect displays a dialog in response to PF_Cmd_DO_DIALOG.</p> <p>Set during PF_Cmd_GLOBAL_SETUP, checked during PF_Cmd_SEQUENCE_SETUP.</p> <p>Note</p> <p>The effect's response to <code>PF_OutFlag_I_DO_DIALOG</code> is not undoable. You can use arbitrary data with a custom UI, should such changes become necessary.</p> <p><code>PF_OutFlag_USE_OUTPUT_EXTENT</code></p> <p>Effect honors the output <code>extent_rect</code>. Set during PF_Cmd_GLOBAL_SETUP.</p> <p>See details at the end of the chapter for proper usage.</p> <p>Note</p> <p>Obsolete for SmartFX.</p> <p><code>PF_OutFlag_SEND_DO_DIALOG</code></p> <p>Effect must show dialog to function (added for compatibility with Photoshop plug-ins).</p> <p>After Effects sends PF_Cmd_DO_DIALOG after PF_Cmd_SEQUENCE_SETUP.</p> <p>Set during PF_Cmd_SEQUENCE_RESETUP, not during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag_DISPLAY_ERROR_MESSAGE</code></p> <p>Display the contents of <code>return_msg</code> in an error dialog.</p> <p>Whenever return_msg is non-NULL, After Effects displays the contents in a dialog, which will be an error dialog if this flag is set.</p> <p>Set after any command, and can be used during debugging.</p> <p>This is also a good way to implement nag messages for tryout versions.</p> <p><code>PF_OutFlag_I_EXPAND_BUFFER</code></p> <p>Effect expands the output buffer.</p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p>Set this flag and <code>PF_OutFlag_USE_OUTPUT_EXTENT</code> to use the intersection of the output <code>extent_rect</code> and your new buffer size during PF_Cmd_FRAME_SETUP.</p> <p>Use <code>pre_effect_source_origin</code> fields to detect other transformations.</p> <p>Note</p> <p>Only set this flag if you need to; it drastically reduces caching efficiency.</p> <p>Note</p> <p>Obsolete for SmartFX.</p> <p><code>PF_OutFlag_PIX_INDEPENDENT</code></p> <p>A given pixel is independent of the pixels around it.</p> <p>Set during PF_Cmd_GLOBAL_SETUP or PF_Cmd_QUERY_DYNAMIC_FLAGS.</p> <p>As an example, color correction effects are typically pixel independent, distortions are not.</p> <p>Note</p> <p>If your effect doesn't use the color values of one pixel to affect those of adjacent pixels, set this outflag!</p> <p>It can provide dramatic performance improvements.</p> <p><code>PF_OutFlag_I_WRITE_INPUT_BUFFER</code></p> <p>The effect writes into the input buffer.</p> <p>This is of limited use; while saving an allocation, it invalidates some pipeline caching. Set during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag_I_SHRINK_BUFFER</code></p> <p>The effect shrinks its buffer based on the <code>extent_rect</code> in order to be more memory efficient.</p> <p>Set during PF_Cmd_GLOBAL_SETUP whenever possible.</p> <p>Note</p> <p>Obsolete for SmartFX.</p> <p><code>PF_OutFlag_WORKS_IN_PLACE</code></p> <p>Unused.</p> <p><code>PF_OutFlag_SQUARE_PIX_ONLY</code></p> <p>Unused.</p> <p><code>PF_OutFlag_CUSTOM_UI</code></p> <p>The effect has a custom user interface and requires PF_Cmd_EVENT messages.</p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag_RESERVED5</code></p> <p>Unused.</p> <p><code>PF_OutFlag_REFRESH_UI</code></p> <p>Refresh the entire effect controls, composition, and layer windows.</p> <p>Set during PF_Cmd_EVENT, PF_Cmd_RENDER, and PF_Cmd_DO_DIALOG.</p> <p>If refreshing custom UI during <code>PF_Cmd_EVENT</code>, we recommend using the new redraw mechanism with finer granularity.</p> <p><code>PF_OutFlag_NOP_RENDER</code></p> <p>Set this flag during PF_Cmd_FRAME_SETUP to invalidate the current render.</p> <p><code>PF_OutFlag_I_USE_SHUTTER_ANGLE</code></p> <p>Indicates rendered images depend upon the value of <code>shutter_angle</code>.</p> <p><code>PF_OutFlag_I_USE_AUDIO</code></p> <p>Effect's parameters depend on audio data, obtained using PF_CHECKOUT_LAYER_AUDIO.</p> <p><code>PF_OutFlag_I_AM_OBSOLETE</code></p> <p>Effect is available for use when working with an old project in which it was originally applied, but doesn't appear in the effect menu.</p> <p><code>PF_OutFlag_FORCE_RERENDER</code></p> <p>Effect made a change that requires a re-render. PF_ChangeFlag_CHANGED_VALUE also forces a re-render.</p> <p><code>PF_OutFlag_PiPL_OVERRIDES_OUTDATA_OUTFLAGS</code></p> <p>After Effects will use PiPL outflags, and ignore those set during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag_I_HAVE_EXTERNAL_DEPENDENCIES</code></p> <p>Effect depends on an external file (or external font).</p> <p>If set, After Effects sends PF_Cmd_GET_EXTERNAL_DEPENDENCIES.</p> <p><code>PF_OutFlag_DEEP_COLOR_AWARE</code></p> <p>The effect handles 16-bpc color.</p> <p><code>PF_OutFlag_SEND_UPDATE_PARAMS_UI</code></p> <p>Set this flag during PF_Cmd_GLOBAL_SETUP to receive PF_Cmd_UPDATE_PARAMS_UI.</p> <p><code>PF_OutFlag_AUDIO_FLOAT_ONLY</code></p> <p>Effect requires audio data in PF_SIGNED_FLOAT format.</p> <p>After Effects will perform any required format conversion.</p> <p>You must also set either <code>PF_OutFlag_AUDIO_EFFECT_TOO</code> or <code>PF_OutFlag_AUDIO_EFFECT_ONLY</code>.</p> <p><code>PF_OutFlag_AUDIO_IIR</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP if the (audio) effect is an Infinite Impulse Response filter.</p> <p>This is true if output at a given time depends on output from previous times.</p> <p>When an IIR filter receives PF_Cmd_AUDIO_RENDER, the input audio time span is the same as the output audio time span (when they intersect with the output time span requested in PF_Cmd_AUDIO_SETUP).</p> <p>In response to PF_Cmd_AUDIO_SETUP, the filter can request audio from earlier times (as for delay effects).</p> <p>The filter can access parameters from that earlier time, and should cache them (along with interim audio) in sequence data.</p> <p>If the audio generated does not correspond to the requested output audio's time, the output audio duration should be set to zero.</p> <p>The filter can update its delay line using the parameters and the input audio.</p> <p>Having cached its delay line, request more input audio during PF_Cmd_AUDIO_SETUP based on the last cached delay line. Use PF_HasParamChanged to determine whether or not your cache is valid.</p> <p><code>PF_OutFlag_I_SYNTHESIZE_AUDIO</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP time if the effect generates audio, even when passed silence.</p> <p>You must also set either <code>PF_OutFlag_AUDIO_EFFECT_TOO</code> or <code>PF_OutFlag_AUDIO_EFFECT_ONLY</code>.</p> <p><code>PF_OutFlag_AUDIO_EFFECT_TOO</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP if the effect alters audio.</p> <p><code>PF_OutFlag_AUDIO_EFFECT_ONLY</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP if the effect alters only audio output.</p>"},{"location":"effect-basics/PF_OutData/#pf_outflags2","title":"PF_OutFlags2","text":"<p>We added a second set of outflags in After Effects 5.0; partly for room to expand in the future, and partly to break ourselves of the bad habit of repurposing existing flags.</p> <p>As with <code>PF_OutFlags</code>, many of these flags can be changed during an After Effects session.</p> <p>And don't forget to update both the PiPL and your source code when you make a change.</p> <p>Flag</p> <p>Indicates</p> <p><code>PF_OutFlag2_NONE</code></p> <p>Nothing.</p> <p><code>PF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS</code></p> <p>The effect responds to PF_Cmd_QUERY_DYNAMIC_FLAGS. Must be set in the PiPL and during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag2_I_USE_3D_CAMERA</code></p> <p>The effect accesses 3D camera information.</p> <p><code>PF_OutFlag2_I_USE_3D_LIGHTS</code></p> <p>The effect accesses 3D lighting information.</p> <p><code>PF_OutFlag2_PARAM_GROUP_START_COLLAPSED_FLAG</code></p> <p>This flag in itself doesn't control the state of the param group twirlies.</p> <p>The initial collapse state of each individual parameter group is set during PF_Cmd_PARAM_SETUP, by setting the PF_ParamFlag_START_COLLAPSED flag in PF_ParamFlags, but those individual settings will not be honored unless the effect sets this bit.</p> <p>Otherwise, all parameter groups will be collapsed by default.</p> <p>Remember to set this flag in both the PiPL and here during PF_Cmd_GLOBAL_SETUP.</p> <p><code>PF_OutFlag2_I_AM_THREADSAFE</code></p> <p>Currently this does nothing. If this sounds interesting to you, you may be interested in <code>PF_OutFlag2_PPRO_DO_NOT_CLONE_SEQUENCE_DATA_FOR_RENDER</code>, described below.</p> <p><code>PF_OutFlag2_CAN_COMBINE_WITH_DESTINATION</code></p> <p>Originally added for Premiere usage, but no longer used.</p> <p><code>PF_OutFlag2_DOESNT_NEED_EMPTY_PIXELS</code></p> <p>Added for render optimizations; shrinks the input buffer passed to the effect to exclude any empty pixels (where empty means \"zero alpha\" unless <code>PF_OutFlag2_REVEALS_ZERO_ALPHA</code> is set, in which case RGB must be zero as well).</p> <p>Set during PF_Cmd_GLOBAL_SETUP or PF_Cmd_QUERY_DYNAMIC_FLAGS.</p> <p>The origin of the trimmed buffer can be found in <code>in_data&gt;pre_effect_source_origin</code>.</p> <p>Effects with both this flag and <code>PF_OutFlag_I_EXPAND_BUFFER</code> set may get called with a null input buffer if their input is completely empty, and must be able to handle this case without crashing.</p> <p>Note</p> <p>this flag can cause the size of the output buffer to change.</p> <p>Note</p> <p>Obsolete for SmartFX.</p> <p><code>PF_OutFlag2_REVEALS_ZERO_ALPHA</code></p> <p>This is the one flag implementors need to pay most attention to since it represents a change in the default behavior.</p> <p>Set this flag if the effect can take pixels with zero alpha and reveal the RGB data in them (like our Set Channels effect).</p> <p>This tells After Effects not to trim such pixels when determining the input for the effect.</p> <p>This flag can be changed during PF_Cmd_QUERY_DYNAMIC_FLAGS.</p> <p>Note that, while this flag can cause changes to the size of the <code>extent_hint</code>, it will not change the image buffer size.</p> <p>As of 6.0, pixels outside the mask's bounding box are zeroed.</p> <p>If your effect can reveal such pixels, tell AE not to throw away these RGB values by setting this flag.</p> <p>If your effect does not always reveal such pixels, set this bit dynamically.</p> <p>To see if your effect needs this bit set, apply a mask significantly smaller than the layer to a solid, then apply the effect and set it to its alpha-modifying state.</p> <p>If the rectangular bounding box of the mask becomes visible, this bit needs to be set.</p> <p><code>PF_OutFlag2_PRESERVES_FULLY_OPAQUE_PIXELS</code></p> <p>Preserve those pixels!</p> <p><code>PF_OutFlag2_SUPPORTS_SMART_RENDER</code></p> <p>The effect uses the SmartFX API.</p> <p><code>PF_OutFlag2_FLOAT_COLOR_AWARE</code></p> <p>The effect supports 32-bpc floating point color representation.</p> <p>Note</p> <p><code>PF_OutFlag2_SUPPORTS_SMART_RENDER</code> must also be set.</p> <p><code>PF_OutFlag2_I_USE_COLORSPACE_ENUMERATION</code></p> <p>This is for effects which optimized for different color spaces in Premiere Pro. See the Premiere Pro SDK for more details.</p> <p><code>PF_OutFlag2_I_AM_DEPRECATED</code></p> <p>Setting this during PF_Cmd_GLOBAL_SETUP puts the effect in the localized \"Obsolete\" folder in the Effects panel.</p> <p>Compare to <code>PF_OutFlag_I_AM_OBSOLETE</code>.</p> <p><code>PF_OutFlag2_PPRO_DO_NOT_CLONE_SEQUENCE_DATA_FOR_RENDER</code></p> <p>Supported in Premiere Pro, and not in After Effects.</p> <p>This affects how Premiere Pro drives the plug-in using Multithreading.</p> <p><code>PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p>Requires setting of <code>PF_OutFlag_WIDE_TIME_INPUT</code> (which allows you to support old hosts), but effectively overrides that flag.</p> <p>When set, all parameter checkouts are tracked so over-time dependencies are known by the host, and much more efficient.</p> <p>For example, if you set only the old <code>PF_OutFlag_WIDE_TIME_INPUT</code>, anytime anything changes at any time upstream from your effect, you will be called to re-render.</p> <p>With this flag set, if a given frame 17 has checked out things from times 0-17, AE will know that any changes at frames 18+ will not affect that cached frame.</p> <p>Note that if you use this new flag, you must not cache any time-dependent data in your sequence data (or anywhere else), unless you also validate that cache using <code>PF_GetCurrentState()</code> / <code>PF_AreStatesIdentical()</code> from PF_ParamUtilSuite3 before using the time-dependent data.</p> <p>This only works for SmartFX (those that set <code>PF_OutFlag2_SUPPORTS_SMART_RENDER</code>).</p> <p>If you haven't set that, After Effects will silently treat this as <code>PF_OutFlag_WIDE_TIME_INPUT</code> instead.</p> <p><code>PF_OutFlag2_I_USE_COMP_TIMECODE</code></p> <p>Set during PF_Cmd_GLOBAL_SETUP.</p> <p>This lets AE know it should rerender an effect if the composition start time and/ or drop-frame setting has been modified.</p> <p><code>PF_OutFlag2_DEPENDS_ON_UNREFERENCED_MASKS</code></p> <p>New in CS6. Set this if you are going to look at paths that aren't directly referenced by a path param, e.g. if you are going to draw a stroke on all masks.</p> <p>This is needed so After Effects knows to invalidate your output when a mask is modified that doesn't appear to be referenced by your effect.</p> <p>Set during PF_Cmd_GLOBAL_SETUP or PF_Cmd_QUERY_DYNAMIC_FLAGS.</p> <p><code>PF_OutFlag2_OUTPUT_IS_WATERMARKED</code></p> <p>New in CS6. Set this during PF_Cmd_GLOBAL_SETUP if your output is going to be watermarked in some way that makes it unsuitable for final use, probably because the user is using an unlicensed demo version.</p> <p>It is ok to change this state during the course of app session during PF_Cmd_QUERY_DYNAMIC_FLAGS, if e.g. a floating license status changes.</p> <p>Plug-in authors that actually do have this state changing asynchronously must be careful to have the next render match the last state returned from PF_Cmd_QUERY_DYNAMIC_FLAGS otherwise race conditions could cause incorrect frames to be cached.</p> <p>(This is a non-issue if you only change this in response to <code>DO_DIALOG</code>.)</p> <p><code>PF_OutFlag2_SUPPORTS_GPU_RENDER_F32</code></p> <p>New in 16.0 Set during PF_Cmd_GLOBAL_SETUP, this indicates GPU support.</p> <p>The effect will be called with GPU selectors, and will be badged as GPU-supporting in the GUI.</p> <p>At <code>PF_Cmd_GPU_DEVICE_SETUP</code> time, these flags indicate rendering capabilities for a specific device and framework.</p> <p><code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING</code></p> <p>Available in After Effects Beta builds starting June 2020, After Effects 2022.</p> <p>Set during <code>PF_Cmd_GLOBAL_SETUP</code>, this indicates the effect supports rendering on multiple threads at the same time. Single or multiple applications of this effect on a layer can be called to render at the same time on multiple threads.</p> <p>This flag indicates the effect supports rendering on multiple threads at the same time. Single or multiple applications of this effect on a layer can be called to render at the same time on multiple threads.</p> <p>If you are using the <code>PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING</code> flag, remember to also set the <code>PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA</code> flag. See Sequence Data in Multi-Frame rendering for more information.</p> <p>Note</p> <p>This flag should only be set on plugins that have been tested to be thread-safe with multi-frame rendering enabled in AE.</p> <p>For more information on how to use this flag, please see Multi-Frame Rendering in AE under Effect Details.</p> <p><code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code></p> <p>Available in After Effects Beta builds starting March 2021, After Effects 2022.</p> <p>Indicates the effect needs sequence_data replicated for each render thread, thus allowing each render to have sequence_data which can be written to. Note that changes to sequence_data will be discarded regularly, currently after each span of frames is rendered such as single RAM Preview or Render Queue export.</p> <p>Note</p> <p>This flag should only be set on plugins that have been tested to be thread-safe with multi-frame rendering enabled in AE.</p> <p>For more information on how to use this flag, please see Multi-Frame Rendering in AE under Effect Details.</p>"},{"location":"effect-basics/PF_ParamDef/","title":"PF_ParamDef","text":"<p>After Effects passes effects an array of PF_ParamDefs with each selector, describing the plug-in's parameters at the current time. The values in the params array are only valid during some selectors (this is noted in the selector descriptions).</p>"},{"location":"effect-basics/PF_ParamDef/#param-zero","title":"Param Zero","text":"<p>The first parameter, params[0], is the input image (a PF_EffectWorld / PF_LayerDef) to which the effect should be applied.</p>"},{"location":"effect-basics/PF_ParamDef/#the-rest-of-the-parameters","title":"The Rest Of The Parameters","text":"<p>All parameter types are represented by a PF_ParamDef. Unions are used, so that only the pertinent parts of the PF_ParamDef need be (or should be) populated.</p>"},{"location":"effect-basics/PF_ParamDef/#pf_paramdef-members","title":"PF_ParamDef Members","text":"<p>Data Type</p> <p>Name</p> <p>Description</p> <p><code>A_long</code></p> <p><code>id</code></p> <p>The ID of this parameter. You can re-order parameters in future versions of your plug-in and not cause users to re-apply your effect, if you maintain the parameter's ID across versions.</p> <p><code>PF_ChangeFlags</code></p> <p><code>change_flags</code></p> <p>Set if you've changed a parameter value. Only valid during drag (not click!) events, PF_Cmd_USER_CHANGED_PARAM or PF_Cmd_UPDATE_PARAMS_UI.</p> <p>PF_ParamUIFlags</p> <p><code>ui_flags</code></p> <p>Specify a parameter's UI behavior before adding; only <code>PF_PUI_DISABLED</code> may be set during event handling.</p> <p><code>A_short</code></p> <p><code>ui_width</code></p> <p>Width of the parameter's user interface (for non-standard parameters only).</p> <p><code>A_short</code></p> <p><code>ui_height</code></p> <p>Height of the parameter's user interface (for non-standard parameters only).</p> <p>PF_ParamType</p> <p><code>param_type</code></p> <p>Type of parameter.</p> <p><code>A_char[32]</code></p> <p><code>name</code></p> <p>Name of parameter. Can be changed during event handling.</p> <p>Yes, longer parameter names have been requested since After Effects 1.0.</p> <p>Think of adequately describing your world-altering effect in 31 mere characters as a language challenge, like haiku.</p> <p>PF_ParamFlags</p> <p><code>flags</code></p> <p>Specify a parameter's UI behavior before adding; only <code>PF_ParamFlag_COLLAPSE_TWIRLY</code> may be set during event handling.</p> <p><code>PF_ParamDefUnion</code></p> <p><code>u</code></p> <p>A union of all possible Parameter Types.</p> <p>Only the type specified by <code>param_type</code> contains meaningful data.</p>"},{"location":"effect-basics/PF_ParamDef/#parameter-ui-flags","title":"Parameter UI Flags","text":"<p>Control a parameter's user interface with these flags.</p> <p>Don't confuse UI flags with behavior flags; they reside in different fields within your parameter's definition, and will cause unpredictable behavior if misapplied.</p> <p>Flag</p> <p>Description</p> <p><code>PF_PUI_TOPIC</code></p> <p>Set this flag if you handle <code>PF_Cmd_EVENTs</code> for the \"topic\" of the parameter.</p> <p>The \"topic\" is the portion of the param UI in the Effect Controls Window (ECW) that is still visible when the twirly-arrow is twirled up for that param.</p> <p>If you set this flag, you must also set <code>PF_OutFlag_CUSTOM_UI</code> at PF_Cmd_GLOBAL_SETUP time.</p> <p><code>PF_PUI_CONTROL</code></p> <p>Set this flag if you handle <code>PF_Cmd_EVENTs</code> for the control area (area that becomes invisible when you twirl up a parameter's spinner) in the ECP.</p> <p>If you set this flag, you must also set <code>PF_OutFlag_CUSTOM_UI</code> at <code>PF_Cmd_GLOBAL_SETUP</code> time.</p> <p>See Effect UI &amp; Events for more details.</p> <p><code>PF_PUI_STD_CONTROL_ONLY</code></p> <p>Set this flag if you want the standard control only - No data stream will be associated with this parameter, and thus no keyframes will be available in the Timeline panel.</p> <p>You might want to do this to control something in your sequence data with a standard control.</p> <p>Or in your arb data, or custom UI in the comp window, or to group-set multiple other controls.</p> <p>This flag cannot be used with:</p> <ul> <li><code>PF_Param_CUSTOM</code></li> <li><code>PF_Param_NO_DATA</code></li> <li><code>PF_Param_LAYER</code></li> <li><code>PF_Param_ARBITRARY_DATA</code></li> <li><code>PF_Param_PATH</code></li> </ul> <p>If you set this flag, you must also set <code>PF_ParamFlag_SUPERVISE</code> (otherwise you would never find out about value changes, and the setting would never be used for anything).</p> <p>This flag does not require that the PF_OutFlag_CUSTOM_UI flag be set.</p> <p>If you want a standard control for <code>PF_Param_ARBITRARY_DATA</code>, just add one (or more) using <code>PF_PUI_STD_CONTROL_ONLY</code> with the supported param types, and then when handling PF_Cmd_USER_CHANGED_PARAM you can modify your arb data.</p> <p><code>PF_PUI_NO_ECW_UI</code></p> <p>Set this flag if you want no UI to appear in the Effect Controls Window.</p> <p>Presumably, you are setting the value of the parameter through some other method (e.g. custom UI in the comp window, or while handling <code>PF_Cmd_USER_CHANGED_PARAM</code> for a different param with <code>PF_ParamFlag_SUPERVISE</code> set).</p> <p>In AE, this doesn't affect keyframe visibility in the timeline. In PPro it does remove the entire row, so you won't see keyframes.</p> <p><code>PF_PUI_ECW_SEPARATOR</code></p> <p>Not used in After Effects, but used in Premiere. Set this flag if you'd like a thick line above this parameter in the effect control window.</p> <p>This is provided so that parameters can be grouped visually, if needed (without adding groups). This flag can be changed at runtime through the <code>PF_UpdateParamUI()</code> method.</p> <p><code>PF_PUI_DISABLED</code></p> <p>Disables (grays out) the parameter, usually in response to PF_Cmd_USER_CHANGED_PARAM.</p> <p><code>PF_PUI_DONT_ERASE_TOPIC</code></p> <p>After Effects won't erase parameter's topic.</p> <p><code>PF_PUI_DONT_ERASE_CONTROL</code></p> <p>After Effects won't erase parameter's control.</p> <p><code>PF_PUI_RADIO_BUTTON</code></p> <p>Not used in After Effects, but used in Premiere. Display parameter as a radio-button group. Only valid for <code>PF_Param_POPUP</code>.</p> <p><code>PF_PUI_INVISIBLE</code></p> <p>First supported in Premiere, and now supported in After Effects CS6 and later. This hides the parameter UI in both the Effect Controls and Timeline.</p> <p>Premiere only: The flag is dynamic and parameter visibility can be toggled during the PF_UpdateParamUI callback.</p> <p>In addition to these flags, an effect parameter may be hidden or shown by using AEGP_GetDynamicStreamFlags.</p>"},{"location":"effect-basics/PF_ParamDef/#parameter-flags","title":"Parameter Flags","text":"<p>Behavior flags and UI flags describe different qualities of a parameter. Set them before adding the parameter during PF_Cmd_PARAM_SETUP. Flags which may be set during events are noted.</p> <p>Flag</p> <p>Meaning</p> <p><code>PF_ParamFlag_CANNOT_TIME_VARY</code></p> <p>Parameter does not vary with time; no keyframe control will be provided in the Timeline panel.</p> <p><code>PF_ParamFlag_CANNOT_INTERP</code></p> <p>Values are not algebraically interpolated.</p> <p>You can still use discontinuous (hold) interpolation. Useful for parameters which are either on or off. Accelerates rendering.</p> <p><code>PF_ParamFlag_COLLAPSE_TWIRLY</code></p> <p>Set this flag during PF_Cmd_USER_CHANGED_PARAM.</p> <p>This bit can now be set &amp; cleared when handling PF_Cmd_UPDATE_PARAMS_UI and PF_Cmd_USER_CHANGED_PARAM messages, so as to twirl your parameters and groups up and down at will.</p> <p><code>PF_ParamFlag_SUPERVISE</code></p> <p>Set to receive PF_Cmd_USER_CHANGED_PARAM messages for this parameter.</p> <p>See Parameter Supervision for more information.</p> <p><code>PF_ParamFlag_START_COLLAPSED</code></p> <p>Controls the twirl-state of a topic spinner.</p> <p>Can be changed during parameter supervision, not just during PF_Cmd_PARAM_SETUP.</p> <p>This flag will not be honored unless PF_OutFlag2_PARAM_GROUP_START_COLLAPSED is set.</p> <p><code>PF_ParamFlag_USE_VALUE_FOR_OLD_PROJECTS</code></p> <p>This only affects the loading of projects saved with an older version of the effect which lacks parameters added later.</p> <p>When set, the <code>PF_ParamDef.value</code> field set in <code>PF_ADD_PARAM()</code> will be used to initialize the missing parameter, but the dephault field will still be used for initial value of the parameter when the effect is newly applied or reset.</p> <p>This is useful for when you want a parameter to default to one value but need it set to something else to preserve rendering behavior for older projects.</p> <p><code>PF_ParamFlag_LAYER_PARAM_IS_TRACKMATTE</code></p> <p>Premiere Pro only: Only valid for layer parameters. Indicates that a layer param is used as a track-matte with applied filters.</p> <p>Ignored in After Effects.</p> <p><code>PF_ParamFlag_EXCLUDE_FROM_HAVE_INPUTS_CHANGED</code></p> <p>Only relevant if the effect sets PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT and will call PF_AreStatesIdentical or PF_HaveInputsChangedOverTimeSpan</p> <p><code>PF_ParamFlag_SKIP_REVEAL_WHEN_UNHIDDEN</code></p> <p>New in CS6. If this parameter is unhidden, then this flag tells After Effects to not twirl open any parents and to not scroll the parameter into view in the Effect Controls panel and the Timeline panel.</p> <p>After Effects uses this behavior internally when paint strokes are made, so as not to distract the user by revealing the parameter.</p> <p>However, in another case, when turning on Time Remapping, that parameter is revealed.</p> <p>So we provide you the same control over parameters in your own effects.</p>"},{"location":"effect-basics/PF_ParamDef/#pf_valuedisplayflags","title":"PF_ValueDisplayFlags","text":"<p>Within PF_ParamDefUnion, PF_FloatSliderDef and PF_FixedSliderDef both have a member variable, PF_ValueDisplayFlags, which allows them to respond to the user's pixel value display preference (which they set in the info palette). If this is set, the parameter's value will be displayed as 0-1, 0-255, 0-32768, or 0.0 to 1.0, depending on the preference. You can also set the first bit (PF_ValueDisplayFlag_PERCENT) to append a percent sign to the parameter's displayed value.</p> <p>We know you'd never do anything like this, but if you create a parameter which displays as a percentage, don't confuse the user by allowing any range other than 0 to 100. Please. Percent means 'out of one hundred'.</p>"},{"location":"effect-basics/command-selectors/","title":"Command Selectors","text":"<p>Commands are, simply, what After Effects wants your effect to do.</p> <p>Responses to some selectors are required; most are optional, though recall that we did add them for a reason...</p> <p>With each command selector sent, effects receive information from After Effects in PF_InData, input and parameter values in PF_ParamDef[] (an array of parameter descriptions including the input layer), and access to callbacks and function suites.</p> <p>They send information back to After Effects in PF_OutData, and (when appropriate) render output to a PF_LayerDef, also called a PF_EffectWorld.</p> <p>During events, they receive event-specific information in PF_EventExtra.</p>"},{"location":"effect-basics/command-selectors/#calling-sequence","title":"Calling Sequence","text":"<p>Only the first few command selectors are predictable; the rest of the calling sequence is dictated by user action.</p> <p>When first applied, a plug-in receives <code>PF_Cmd_GLOBAL_SETUP</code>, then <code>PF_Cmd_PARAM_SETUP</code>. Each time the user adds the effect to a layer, <code>PF_Cmd_SEQUENCE_SETUP</code> is sent.</p> <p>For each frame rendered by a basic non-SmartFX effect, After Effects sends <code>PF_Cmd_FRAME_SETUP</code>, then <code>PF_Cmd_RENDER</code>, then <code>PF_Cmd_FRAME_SETDOWN</code>.</p> <p>All effect plug-ins must respond to <code>PF_Cmd_RENDER</code></p> <p>For SmartFX, <code>PF_Cmd_SMART_PRE_RENDER</code> may be sent any number of times, before a single <code>PF_Cmd_SMART_RENDER</code> is sent.</p> <p><code>PF_Cmd_SEQUENCE_SETDOWN</code> is sent on exit, when the user removes an effect or closes the project. <code>PF_Cmd_SEQUENCE_RESETUP</code> is sent when a project is loaded or when the layer to which it's applied changes. <code>PF_Cmd_SEQUENCE_FLATTEN</code> is sent when the After Effects project is written out to disk.</p> <p><code>PF_Cmd_ABOUT</code> is sent when the user chooses About... from the Effect Controls Window (ECW).</p> <p><code>PF_Cmd_GLOBAL_SETDOWN</code> is sent when After Effects closes, or when the last instance of the effect is removed. Do not rely on this message to determine when your plug-in is being removed from memory; use OS-specific entry points.</p>"},{"location":"effect-basics/command-selectors/#command-selectors-table","title":"Command Selectors Table","text":""},{"location":"effect-basics/command-selectors/#global-selectors","title":"Global Selectors","text":"<p>All plug-ins must respond to these selectors.</p> <p>Selector</p> <p>Response</p> <p><code>PF_Cmd_ABOUT</code></p> <p>Display a dialog describing the plug-in. Populate out_data&gt;return_msg and After Effects will display it in a simple modal dialog.</p> <p>Include your plug- in's version information in the dialog. On macOS, the current resource file will be set to your effects module during this selector.</p> <p><code>PF_Cmd_GLOBAL_SETUP</code></p> <p>Set any required flags and <code>PF_OutData</code> fields (including out_data&gt;my_version) to describe your plug-in's behavior.</p> <p><code>PF_Cmd_GLOBAL_SETDOWN</code></p> <p>Free all global data (only required if you allocated some).</p> <p><code>PF_Cmd_PARAM_SETUP</code></p> <p>Describe your parameters and register them using PF_ADD_PARAM.</p> <p>Also, register custom user interface elements.</p> <p>Set PF_OutData&gt;num_params to match your parameter count.</p>"},{"location":"effect-basics/command-selectors/#sequence-selectors","title":"Sequence Selectors","text":"<p>These control sequence data handling.</p> <p>Selector</p> <p>Response</p> <p><code>PF_Cmd_SEQUENCE_SETUP</code></p> <p>Allocate and initialize any sequence-specific data. Sent when the effect is first applied. PF_InData is initialized at this time.</p> <p><code>PF_Cmd_SEQUENCE_RESETUP</code></p> <p>Re-create (usually unflatten) sequence data. Sent after sequence data is read from disk, during pre-composition, or when the effect is copied;</p> <p>After Effects flattens sequence data before duplication. During duplication, <code>PF_Cmd_SEQUENCE_RESETUP</code> is sent for both the old and new sequences.</p> <p>Don't expect a <code>PF_Cmd_SEQUENCE_FLATTEN</code> between <code>PF_Cmd_SEQUENCE_RESETUPs</code>.</p> <p><code>PF_Cmd_SEQUENCE_FLATTEN</code></p> <p>Sent when saving and when duplicating the sequence. Flatten sequence data containing pointers or handles so it can be written to disk.</p> <p>This will saved with the project file. Free the unflat data and set the <code>out_data&gt;sequence_data</code> to point to the new flattened data. Flat data must be correctly byte-ordered for file storage.</p> <p>As of 6.0, if an effect's sequence data has recently been flattened, the effect may be deleted without receiving an additional <code>PF_Cmd_SEQUENCE_SETDOWN</code>.</p> <p>In this case, After Effects will dispose of your flat sequence data.</p> <p><code>PF_Cmd_SEQUENCE_SETDOWN</code></p> <p>Free all sequence data.</p>"},{"location":"effect-basics/command-selectors/#frame-selectors","title":"Frame Selectors","text":"<p>Passed for each frame (or set of audio samples) to be rendered by your plug-in.</p> <p>Selector</p> <p>Response</p> <p><code>PF_Cmd_FRAME_SETUP</code></p> <p>Allocate any frame-specific data. This is sent immediately before each frame is rendered, to allow for frame-specific setup data.</p> <p>If your effect changes the size of its output buffer, specify the new output height, width, and relative origin. All parameters except the input layer are valid.</p> <p>If you set width and height to 0, After Effects ignores your response to the following <code>PF_Cmd_RENDER</code>.</p> <p>NOTE: If PF_Outflag_I_EXPAND_BUFFER is set, you will receive this selector (and <code>PF_Cmd_FRAME_SETDOWN</code>) twice, once without <code>PF_Cmd_RENDER</code> between them.</p> <p>This is so we know whether or not the given layer will be visible.</p> <p>Frame data dates from the days when machines might have 8MB of RAM. Given the calling sequence (above), it's much more efficient to just allocate during <code>PF_Cmd_RENDER</code>.</p> <p><code>PF_Cmd_RENDER</code></p> <p>Render the effect into the output, based on the input frame and any parameters.</p> <p>This render call can only support 8-bit or 16-bit per channel rendering. 32-bit per channel rendering must be handled in <code>PF_Cmd_SMART_RENDER</code>.</p> <p>All fields in <code>PF_InData</code> are valid.</p> <p>If your response to this selector is interrupted (your calls to <code>PF_ABORT</code> or <code>PF_PROGRESS</code> returns an error code), your results will not be used.</p> <p>You cannot delete <code>frame_data</code> during this selector; you must wait until <code>PF_Cmd_FRAME_SETDOWN</code>.</p> <p><code>PF_Cmd_FRAME_SETDOWN</code></p> <p>Free any frame data allocated during <code>PF_Cmd_FRAME_SETUP</code>.</p> <p><code>PF_Cmd_AUDIO_SETUP</code></p> <p>Sent before every audio render. Request a time span of input audio. Allocate and initialize any sequence-specific data.</p> <p>If your effect requires input from a time span other than the output time span, update the <code>startsampL</code> and <code>endsampL</code> field in <code>PF_OutData</code>.</p> <p><code>PF_Cmd_AUDIO_RENDER</code></p> <p>Populate PF_OutData.dest_snd with effect-ed audio. All fields in <code>PF_InData</code> are valid.</p> <p>If your response to this selector is interrupted (your calls to <code>PF_ABORT</code> or <code>PF_PROGRESS</code> returns an error code), your results will not be used.</p> <p><code>PF_Cmd_AUDIO_SETDOWN</code></p> <p>Free memory allocated during <code>PF_Cmd_AUDIO_SETUP</code>.</p> <p><code>PF_Cmd_SMART_PRE_RENDER</code></p> <p>SmartFX only. Identify the area(s) of input the effect will need to produce its output, based on whatever criteria the effect implements.</p> <p>May be sent up to twice when MediaCore is hosting. The first will come during GetFrameDependencies to collect the inputs.</p> <p>The source checkouts can return full frame dimensions here. Once the sources are rendered, if they are different in size than the first call then this selector will be emitted a second time with the actual source sizes in order to get a correct output size.</p> <p>Note that MediaCore wants all of the output, so <code>PF_PreRenderOutput::max_result_rect</code> will be used.</p> <p>New in 16.0</p> <p>Set <code>PF_RenderOutputFlag_GPU_RENDER_POSSIBLE</code> in <code>PF_PreRenderOutput</code> to render on the GPU.</p> <p>If this flag is not set the requested render is not possible with the requested GPU, because of parameters or render settings.</p> <p>The host may re-call PreRender with another what_gpu option (or PF_GPU_Framework_None).</p> <p><pre><code>typedef struct {\n  PF_RenderRequest  output_request; // what the effect is being asked to render\n  short             bitdepth;       // bitdepth the effect is being driven in (in bpc)\n  const             void *gpu_data; // (new AE 16.0)\n  PF_GPU_Framework  what_gpu;       // (new AE 16.0)\n  A_u_long          device_index;   // (new AE 16.0) For use in conjunction with PrSDKGPUDeviceSuite\n} PF_PreRenderInput;\n</code></pre></p> <p><code>PF_Cmd_SMART_RENDER</code></p> <p>SmartFX only. Perform rendering and provide output for the area(s) the effect was asked to render.</p>"},{"location":"effect-basics/command-selectors/#messaging","title":"Messaging","text":"<p>The communication channel between After Effects and your plug-in.</p> <p>Selector</p> <p>Response</p> <p><code>PF_Cmd_EVENT</code></p> <p>This selector makes use of the extra parameter; the type of event to be handled is indicated by the e_type field, a member of the structure pointed to by extra.</p> <p>See Effect UI &amp; Events.</p> <p><code>PF_Cmd_USER_CHANGED_PARAM</code></p> <p>The user changed a parameter value. You will receive this command only if you've set the <code>PF_ParamFlag_SUPERVISE</code> flag.</p> <p>You modify the parameter to control values, or make one parameter's value affect others. A parameter can be modified by different actions.</p> <p><code>in_data.current_time</code> is set to the time of the frame that the user is looking at in the UI (internally, the current time of the comp converted into layer time) while they are changing the param that triggered the <code>PF_Cmd_USER_CHANGED_PARAM</code>.</p> <p>It's also the time of a keyframe that is added automatically (if there isn't one already, and the stopwatch is enabled).</p> <p>This is usually the same as the value passed for the PF_Cmd_RENDER that follows immediately after (unless caps lock is down), but not necessarily - there could be other comp windows open that cause a render at a different time in response to the changed param.</p> <p><code>PF_Cmd_UPDATE_PARAMS_UI</code></p> <p>The effect controls palette (ECP) needs to be updated. This might occur after opening the ECP or moving to a new time within the composition.</p> <p>You can modify parameter characteristics (enabling or disabling them, for example) by calling <code>PF_UpdateParamUI()</code>.</p> <p>Only cosmetic changes may be made in response to this command. Don't change parameter values while responding to <code>PF_Cmd_UPDATE_PARAMS_UI</code>; do so during <code>PF_Cmd_USER_CHANGED_PARAM</code> instead.</p> <p>This command will only be sent regularly if <code>PF_OutFlag_SEND_UPDATE_PARAMS_UI</code> was set in the PiPL, and during <code>PF_Cmd_GLOBAL_SETUP</code>.</p> <p>Note</p> <p>Never check out parameters during this selector. Recursive badness is almost guaranteed to result.</p> <p><code>PF_Cmd_DO_DIALOG</code></p> <p>Display an options dialog. this is sent when the Options button is clicked (or a menu command has been selected).</p> <p>This selector will only be sent if the effect has previously indicated that it has a dialog (by setting the global <code>PF_OutFlag_I_DO_DIALOG</code> flag in response to <code>PF_Cmd_GLOBAL_SETUP</code>).</p> <p>In version 3.x, the params passed with <code>PF_Cmd_DO_DIALOG</code> were invalid.</p> <p>This is no longer the case; plug-ins can access non-layer parameters, check out parameters at other times, and perform UI updates during <code>PF_Cmd_DO_DIALOG</code>.</p> <p>They still may not change the parameter's values.</p> <p><code>PF_Cmd_ARBITRARY_CALLBACK</code></p> <p>Manage your arbitrary data type. You'll only receive this if you've registered a custom data type parameter.</p> <p>The extra parameter indicates which handler function is being called.</p> <p>Custom data types are discussed further in Implementing Arbitrary Data.</p> <p><code>PF_Cmd_GET_EXTERNAL_DEPENDENCIES</code></p> <p>Only sent if <code>PF_OutFlag_I_HAVE_EXTERNAL_DEPENDENCIES</code> was set during <code>PF_Cmd_GLOBAL_SETUP</code>.</p> <p>Populate a string handle (in the PF_ExtDependenciesExtra pointed to by extra) with a description of your plug-in's dependencies, making sure to allocate space for the terminating NULL character.</p> <p>Return just a <code>NULL</code> pointer for the string handle if there are no dependencies to report.</p> <p>If the check type is <code>PF_DepCheckType_ALL_DEPENDENCIES</code>, report everything that might be required for your plug-in to render.</p> <p>Report only missing items (or a null string if nothing's missing) if the check type is <code>PF_DepCheckType_MISSING_DEPENDENCIES</code>.</p> <p><code>PF_Cmd_COMPLETELY_GENERAL</code></p> <p>Respond to an AEGP. The extra parameter points to whatever parameter the AEGP sent.</p> <p>AEGPs can only communicate with effects which respond to this selector.</p> <p><code>PF_Cmd_QUERY_DYNAMIC_FLAGS</code></p> <p>Sent only to plug-ins which have specified <code>PF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS</code> in <code>PF_OutFlags2</code>, in their PiPL and during <code>PF_Cmd_GLOBAL_SETUP</code>.</p> <p>With all of the dynamic flags, if you will ever change them during this command, you must have set the flag on during <code>PF_Cmd_GLOBAL_SETUP</code>.</p> <p>This selector will be sent at arbitrary times.</p> <p>In response, the effect should access its (non-layer) parameters using <code>PF_CHECKOUT_PARAM</code>, and decide whether any of the flags that support <code>PF_Cmd_QUERY_DYNAMIC_FLAGS</code> should be set, such as:</p> <ul> <li><code>PF_OutFlag_WIDE_TIME_INPUT</code></li> <li><code>PF_OutFlag_NON_PARAM_VARY</code></li> <li><code>PF_OutFlag_PIX_INDEPENDENT</code></li> <li><code>PF_OutFlag_I_USE_SHUTTER_ANGLE</code></li> <li><code>PF_OutFlag2_I_USE_3D_CAMERA</code></li> <li><code>PF_OutFlag2_I_USE_3D_LIGHTS</code></li> <li><code>PF_OutFlag2_DOESNT_NEED_EMPTY_PIXELS</code></li> <li><code>PF_OutFlag2_REVEALS_ZERO_ALPHA</code></li> <li><code>PF_OutFlag2_DEPENDS_ON_UNREFERENCED_MASKS</code></li> <li><code>PF_OutFlag2_OUTPUT_IS_WATERMARKED</code></li> </ul> <p>After Effects uses this information for caching and optimization purposes, so try to respond as quickly as possible.</p> <p><code>PF_Cmd_GPU_DEVICE_SETUP</code></p> <p>This selector can be called at any time by the host. It will be called not more than once for each GPU device.</p> <p>Multiple GPU devices may be in the setup state at one time.</p> <p>It will be called after GlobalSetup and before SequenceSetup.</p> <p>The intent is for the effect to do GPU initialization if necessary and to give the effect an opportunity to opt out of a GPU device based solely on the properties of that device, and not any render context (frame size, etc).</p> <p>If the effect rejects the GPU device it will get called for CPU render.</p> <p><code>PF_InData::what_gpu != PF_GPU_Framework_None</code> is expected.</p> <p>Effect is expected to set one or both of the <code>PF_OutFlag2_SUPPORTS_GPU_RENDER_Fxx</code> flags in <code>PF_OutData::out_flags2</code> if the device and framework in what_gpu is supported.</p> <p>Note that only <code>PF_OutFlag2_SUPPORTS_GPU_RENDER_F32</code> will be in AE 16.0.</p> <p>Effects that do not set flags here will NOT be considered to support GPU rendering for any of these devices.</p> <p><code>PF_GPUDeviceSetupOutput::gpu_data</code> is a plug-in owned pointer that must be released with a the <code>PF_Cmd_GPU_DEVICE_SETDOWN</code> selector.</p> <p>This pointer is also available at render time.</p> <p><code>PF_Cmd_GPU_DEVICE_SETDOWN</code></p> <p>Release any resources associated with gpu_data. In AE this will be called just before GPU device release.</p> <p><pre><code>typedef struct {\n  void              *gpu_data;  // effect must dispose.\n  PF_GPU_Framework  what_gpu;\n  A_u_long          device_index; // For use in conjunction with PrSDKGPUDeviceSuite\n} PF_GPUDeviceSetdownInput;\n\ntypedef struct {\n  PF_GPUDeviceSetdownInput  input;\n} PF_GPUDeviceSetdownExtra;\n</code></pre></p> <p><code>PF_Cmd_GPU_SMART_RENDER_GPU</code></p> <p>GPU equivalent to the existing <code>PF_Cmd_SMART_RENDER</code> selector.</p> <p>At render time, either the <code>PF_Cmd_SMART_RENDER</code> or the <code>PF_Cmd_SMART_RENDER_GPU</code> selector will be called, depending on whether the effect is expected to produce a CPU or GPU frame as output.</p> <p><code>PF_Cmd_SMART_RENDER_GPU</code> will only be called when <code>what_gpu != PF_GPU_Framework_None</code>, and has effects on any input / output <code>PF_LayerDef</code>'s.</p> <p>All frame check-ins and check-outs will operate on GPU frames when this selector is in progress. Note <code>PF_Cmd_SMART_RENDER</code> shares the <code>Extra</code> structs.</p> <p><pre><code>typedef struct {\n  PF_RenderRequest  output_request;   // what the effect is being asked to render\n  short             bitdepth;         // bitdepth the effect is being driven in (in bpc)\n  void              *pre_render_data; // passed back from value placed in extra-&amp;gt;output-&amp;gt;pre_render_data during PF_Cmd_PRE_RENDER\n  const void        *gpu_data;        // (new AE 16.0)\n  PF_GPU_Framework  what_gpu;         // (new AE 16.0)\n  A_u_long          device_index;     // (new AE 16.0)\n} PF_SmartRenderInput;\n\ntypedef struct {\n  PF_SmartRenderInput *input;\n  PF_SmartRenderCallbacks *cb;\n} PF_SmartRenderExtra;\n</code></pre></p> <p>The <code>what_gpu</code> and <code>device_index</code> fields are in the extra input for GPU-related selectors indicates to the plug-in the GPU framework to be used for rendering.</p> <p>Input and output buffers will be prepared on this framework and device.</p> <p>The device, context, command queue, and other associated GPU state can be queried with <code>PrSDKGPUDeviceSuite::GetDeviceInfo</code>.</p> <p><code>what_gpu</code> will be the same between <code>PF_Cmd_SMART_PRE_RENDER</code> and <code>PF_Cmd_SMART_RENDER_GPU</code> selector calls.</p>"},{"location":"effect-basics/command-selectors/#whats-the-difference","title":"What's The Difference?","text":"<p>There is a subtle difference between <code>PF_Cmd_USER_CHANGED_PARAM</code> and <code>PF_Cmd_UPDATE_PARAMS_UI</code>.</p> <p>Effects need to distinguish between the user actually changing a parameter value (<code>PF_Cmd_USER_CHANGED_PARAM</code>), and just scrubbing around the timeline (<code>PF_Cmd_UPDATE_PARAMS_UI</code>), which is also sent when the plug-in is first loaded).</p> <p>Only the first few command selectors are predictable; the rest of the calling sequence is dictated by user action.</p> <p>When first applied, a plug-in receives <code>PF_Cmd_GLOBAL_SETUP</code>, then <code>PF_Cmd_PARAM_SETUP</code>. Each time the user adds the effect to a layer, <code>PF_Cmd_SEQUENCE_SETUP</code> is sent.</p> <p>For each frame rendered by a basic non-SmartFX effect, After Effects sends <code>PF_Cmd_FRAME_SETUP</code>, then <code>PF_Cmd_RENDER</code>, then <code>PF_Cmd_FRAME_SETDOWN</code>. All effect plug-ins must respond to <code>PF_Cmd_RENDER</code> .</p> <p>For SmartFX, <code>PF_Cmd_SMART_PRE_RENDER</code> may be sent any number of times, before a single <code>PF_Cmd_SMART_RENDER</code> is sent.</p> <p><code>PF_Cmd_SEQUENCE_SETDOWN</code> is sent on exit, when the user removes an effect or closes the project. <code>PF_Cmd_SEQUENCE_RESETUP</code> is sent when a project is loaded or when the layer to which it's applied changes. <code>PF_Cmd_SEQUENCE_FLATTEN</code> is sent when the After Effects project is written out to disk.</p> <p><code>PF_Cmd_ABOUT</code> is sent when the user chooses About... from the Effect Controls Window (ECW).</p> <p><code>PF_Cmd_GLOBAL_SETDOWN</code> is sent when After Effects closes, or when the last instance of the effect is removed. Do not rely on this message to determine when your plug-in is being removed from memory; use OS-specific entry points.</p>"},{"location":"effect-basics/effect-basics/","title":"Effect Basics","text":"<p>This chapter will provide all the information you need to know to understand how a basic effect plug-in works.</p> <p>These details are fundamental to every effect plug-in.</p> <p>By the time you finish this chapter, you'll be ready for the fun stuff; modifying pixels!</p>"},{"location":"effect-basics/entry-point/","title":"Entry Point","text":"<p>All communication between After Effects and an effect plug-in is initiated by After Effects, and it all happens by the host (After Effects) calling a single entry point function.</p> <p>For all effect plug-ins, the entry point function must have the following signature:</p> <pre><code>PF_Err main (\n    PF_Cmd       cmd,\n    PF_InData    *in_data,\n    PF_OutData   *out_data,\n    PF_ParamDef  *params[],\n    PF_LayerDef  *output,\n    void         *extra)\n</code></pre> <p>The name of the entry point function above is \"main\", but it can be whatever is specified in PiPL Resources.</p> <p>Before each call to the entry point function, After Effects updates PF_InData and the plug- in's parameter array PF_ParamDef[] (except as noted).</p> <p>After the plug-in returns from its call, After Effects checks PF_OutData for changes and, when appropriate, uses the PF_LayerDef the effect has rendered.</p>"},{"location":"effect-basics/entry-point/#entry-point-function-parameters","title":"Entry Point Function Parameters","text":"<p>Argument</p> <p>Purpose</p> <p>cmd</p> <p>After Effects sets the Command Selectors to tell the plug-in what to do.</p> <p>in_data</p> <p>Information about the application's state and the data the plug-in is being told to act upon.</p> <p>Pointers to numerous interface and image manipulation functions are also provided.</p> <p>out_data</p> <p>Pass back information to After Effects by setting fields within out_data.</p> <p>params</p> <p>An array of the plug-in's parameters at the time provided in in_data&gt; current_time.</p> <p><code>params[0]</code> is the input image (a PF_EffectWorld / PF_LayerDef) to which the effect should be applied.</p> <p>These values are only valid during certain selectors (this is noted in the selector descriptions).</p> <p>Parameters are discussed at length here: PF_ParamDef.</p> <p>output</p> <p>The output image, to be rendered by the effect plug-in and passed back to After Effects.</p> <p>Only valid during certain selectors.</p> <p>extra</p> <p>The extra parameter varies with the command sent or (in the case of PF_Cmd_EVENT, the event type).</p> <p>Used primarily for event management and Parameter Supervision.</p>"},{"location":"effect-basics/errors/","title":"Errors","text":"<p>Always, always, always (always!) return a <code>PF_Err</code> from <code>main()</code>. Plug-ins must pass all errors back to After Effects.</p> <p>It is vitally important that you pass any errors (returned to you by callbacks and PICA suites) to After Effects, unless you've handled them.</p> <p>Be vigilant about returning the right error code, and disposing of any memory you've allocated.</p> <p>Really. We're serious.</p>"},{"location":"effect-basics/errors/#error-codes","title":"Error Codes","text":"<p>Error</p> <p>Meaning</p> <p><code>PF_Err_NONE</code></p> <p>Success.</p> <p><code>PF_Err_OUT_OF_MEMORY</code></p> <p>Memory allocation failed.</p> <p>Note that RAM preview will cause this condition, so After Effects will be expecting to receive this error from your plug-in.</p> <p><code>PF_Err_INTERNAL_STRUCT_DAMAGED</code></p> <p>Problems using a data structure.</p> <p><code>PF_Err_INVALID_INDEX</code></p> <p>Problems finding/using array member.</p> <p><code>PF_Err_UNRECOGNIZED_PARAM_TYPE</code></p> <p>Problem with parameter data.</p> <p><code>PF_Err_INVALID_CALLBACK</code></p> <p>Problems accessing function through pointer.</p> <p><code>PF_Err_BAD_CALLBACK_PARAM</code></p> <p>Problems using a parameter passed to a callback.</p> <p><code>PF_Interrupt_CANCEL</code></p> <p>Both effect and AEGP callbacks can return this to effects, if a user action aborts a render.</p> <p>If the effect gets this error from a callback, it should stop processing the frame and return the error to the host.</p> <p>Failure to pass the error back may result in misrendered frames being cached.</p> <p><code>PF_Err_CANNOT_PARSE_KEYFRAME_TEXT</code></p> <p>Return this from <code>PF_Arbitrary_SCAN_FUNC</code> when problems occur parsing the clipboard into keyframe data.</p>"},{"location":"effect-basics/errors/#error-reporting-policy","title":"Error Reporting Policy","text":"<p>After Effects has a consistent policy for error handling; follow it.</p> <p>If you encounter an error in your plug-in's code, report it to the user immediately, before returning from your plug-in to After Effects.</p> <p>After Effects considers errors from the operating system, encountered during your plug-in's execution, to be yours.</p> <p>If you get an error code back from one of our callback functions, pass it back to After Effects; we've already reported it.</p> <p>Out-of-memory errors are never reported by After Effects. Error reporting is always suppressed during RAM preview, and when After Effects is running in - noui mode.</p> <p>To report an error from within a plug-in, set <code>PF_OutFlag_DISPLAY_ERROR_MESSAGE</code>, and describe the error in PF_OutData&gt;return_msg.</p> <p>Doing so will enter your error into the render log, and prevent system hangs in renders driven by a render engine or scripting.</p>"},{"location":"effect-basics/errors/#dig-in","title":"Dig In!","text":"<p>Now you have a basic understanding of effect plug-ins, and are ready to start experimenting with some real code. Go ahead and get started!</p> <p>After getting the basics of your plug-in setup, you may have some questions about reuseable code, advanced functionality, and how to optimize your code to make it faster.</p> <p>To this end, After Effects exposes a tremendous amount of its internal functionality via function suites.</p> <p>By relying on After Effects code for utility functions, you should be able to get your image processing algorithms implemented quickly.</p> <p>This will discussed in Effect Details.</p>"},{"location":"effect-basics/parameters/","title":"Parameters","text":"<p>Parameters are streams of values that vary with time; the source image, sliders, angles, points, colors, paths, and any arbitrary data types the user can manipulate.</p> <p>They are passed to the plug-in as an array of PF_ParamDefs, though the values in the array are only valid during certain selectors.</p> <p>One of the best aspects of the After Effects effect API is the parameter interpolation and management.</p> <p>How much does the shutter angle change during one-fourth of a 29.97 fps frame? Not your problem; leave it to After Effects.</p> <p>Describe your plug-in's parameters during PF_Cmd_PARAM_SETUP, using PF_ADD_PARAM.</p> <p>You may have up to (approximately) 38 kajillion parameters, or as many as your users are willing to sift through before demanding a refund. Choose wisely.</p> <p>Avoid countless problems by clearing PF_ParamDefs with AEFX_CLR_STRUCT (defined in AE_Macros.h) before registering them.</p>"},{"location":"effect-basics/parameters/#parameter-types","title":"Parameter Types","text":"<p>Parameter Type</p> <p>Parameter Type</p> <p>PF_ParamDefUnion Member</p> <p>Param Value Data Type</p> <p>Description</p> <p><code>PF_Param_LAYER</code></p> <p>PF_LayerDef</p> <p><code>ld</code></p> <p><code>A_long</code></p> <p>Image and audio layers in the composition. All effects automatically have at least 1 layer parameter, param[0], the layer to which they are applied.</p> <p>When used as effect parameters, these appear as a pull-down menu with which the user selects a layer within the current composition.</p> <p>The pull-down menu contents are generated by After Effects.</p> <p>NOTE: This is a reference to a layer which contains pixels and audio samples, not actual pixels and audio samples.</p> <p><code>PF_Param_SLIDER</code></p> <p><code>PF_SliderDef</code></p> <p><code>sd</code></p> <p><code>long</code></p> <p>No longer used.</p> <p><code>PF_Param_FIX_SLIDER</code></p> <p><code>PF_FixedSliderDef</code></p> <p><code>fd</code></p> <p><code>PF_Fixed</code></p> <p>Deprecated. For many years, we promoted fixed sliders. We now recommend <code>PF_Param_FLOAT_SLIDERs</code>.</p> <p>The additional precision helps in many situations, and isn't as expensive as it once was. Plus, we're just tired of low byte / high byte silliness.</p> <p><code>FIX_SLIDERs</code> provide higher precision than <code>PF_Param_SLIDER</code>. Specify the UI decimal places independently.</p> <p>Ignore the low word of the <code>PF_Fixed</code> to get integral results.</p> <p><code>PF_Param_FLOAT_SLIDER</code></p> <p><code>PF_FloatSliderDef</code></p> <p><code>fs_d</code></p> <p><code>PF_FPLong</code></p> <p>Sliders represent numerical values. <code>FLOAT_SLIDERs</code> contain values for phase, precision, and curve tolerance for use by audio filters.</p> <p>Specify a minimum and maximum value, and the user can move a slider or types a number to specify the setting.</p> <p><code>PF_Param_FLOAT_SLIDERs</code> also respond to slider flags discussed in Audio Filters.</p> <p><code>PF_Param_ANGLE</code></p> <p><code>PF_AngleDef</code></p> <p><code>ad</code></p> <p><code>PF_Fixed</code></p> <p>Angles in (fixed point) degrees, accurate to small fractions of a degree.</p> <p>Users can specify multiple revolutions, resulting in values greater than 360.</p> <p><code>PF_Param_CHECKBOX</code></p> <p><code>PF_CheckBoxDef</code></p> <p><code>bd</code></p> <p><code>PF_Boolean</code></p> <p><code>PF_ParamFlag_CANNOT_INTERP</code> is forced on for all checkboxes.</p> <p><code>PF_Param_COLOR</code></p> <p><code>PF_ColorDef</code></p> <p><code>cd</code></p> <p><code>PF_Pixel</code></p> <p>RGB value (alpha is not used) that the user can choose either with the standard color picker or with an eye dropper tool.</p> <p>For floating point accuracy, use PF_ColorParamSuite1 to retrieve the values.</p> <p><code>PF_Param_POINT</code></p> <p><code>PF_PointDef</code></p> <p><code>td</code></p> <p><code>PF_Fixed</code></p> <p>A two-dimensional point. The point provides x and y values in destination layer space.</p> <p>The origin of the layer is the upper-left hand corner, with x increasing to the right, y increasing down.</p> <p>Starting in CS5.5, for floating point accuracy, use PF_PointParamSuite1 to retrieve the values.</p> <p>Dusty history lesson to follow: Prior to API specification version 12.1 (After Effects 4.0), the default value for the point was between 0 and 100 in fixed point with the radix point at bit 16 (i.e. standard fixed point).</p> <p>Specifying (50,50) in fixed point yields the center of the image. The value you are returned for a point control is in absolute pixels with some number of bits of fixed point accuracy.</p> <p>Thus, if you gave (50,50) as the default position and the user applied the effect to a 640 by 480 layer, the default value you would be sent would be (320, 240) in Fixed point.</p> <p>Plug-ins which specify API versions before 12.1 will still get the old behavior.</p> <p><code>PF_Param_POPUP</code></p> <p><code>PF_PopupDef</code></p> <p><code>pd</code></p> <p><code>A_long</code></p> <p>List of choices. Build a string in namesptr containing a list of (read-only) pop-up entries (\"Entry1 / Entry2 / Entry3\").</p> <p>After Effects copies the data and creates a pop-up menu.</p> <p>These entries cannot be modified once the parameter is added.</p> <p>An entry of \"(-\" will result in a separator being drawn between previous and subsequent entries.</p> <p><code>PF_Param_ARBITRARY_DATA</code></p> <p><code>PF_ArbitraryDef</code></p> <p><code>arb_d</code></p> <p><code>???</code></p> <p>Custom data type.</p> <p>Arbitrary Data Parameters contain an ID (you can use more than one custom data type in a given effect), a default value (so After Effects knows what your data type should start as), and a handle to your actual parameter.</p> <p>In AE, must specify either <code>PF_PUI_TOPIC</code> / <code>PF_PUI_CONTROL</code> or <code>PF_PUI_NO_ECW</code>.</p> <p>In PPro 8.0 and later, it's okay to set none of those flags, which allows you to see the parameter's keyframe track on the right side of Effect Controls without creating a custom control.</p> <p><code>PF_Param_PATH</code></p> <p><code>PF_PathDef</code></p> <p><code>path_d</code></p> <p><code>PF_PathID</code></p> <p>Path parameters are references to masks applied to the same layer as the effect.</p> <p>Path parameter data cannot be accessed directly; use PF_PathQuerySuite1 and PF_PathDataSuite to manage and inquire about paths.</p> <p><code>PF_PathDef.path_id</code> contains the index of the mask selected by the user.</p> <p>A corresponding <code>AEGP_MaskRefH</code> can be obtained using <code>AEGP_GetLayerMaskByIndex</code> from AEGP_MaskSuite6.</p> <p><code>PF_Param_GROUP_START</code></p> <p><code>PF_Param_GROUP_END</code></p> <p>(none)</p> <p>(none)</p> <p>Parameter groups (topics) organize parameters into sets.</p> <p>Each group receives its own twirly and will be indented in the ECP relative to the neighboring parameters or groups.</p> <p>One group can be nested within another.</p> <p>Each twirly can be spun open or closed by the user, or programatically by the effect.</p> <p>The effect may choose to have certain groups initialized with the twirly spun open, and others with the twirly spun closed.</p> <p><code>PF_Param_BUTTON</code></p> <p><code>PF_Button</code></p> <p><code>button_d</code></p> <p>(no value)</p> <p>A simple push button. Use Parameter Supervision to detect when the button is pressed.</p> <p>New in CS5.5 to After Effects.</p> <p><code>PF_Param_POINT_3D</code></p> <p><code>PF_Point3D</code></p> <p><code>point3d_d</code></p> <p><code>PF_FpLong (3)</code></p> <p>A three-dimensional point.</p> <p>New in CS5.5. Unsupported in Premiere Pro.</p>"},{"location":"effect-basics/parameters/#slider-range-issues","title":"Slider Range Issues?","text":"<p>If your slider seems disabled but not grayed out, check the valid_min, slider_min, valid_max and slider_max fields. Is the param a <code>PF_Param_FIX_SLIDER</code>? If so, did you convert your mins and maxs to reasonable fixed values? If you're using the macros provided in AE_Macros.h, they're expecting to receive ints; passing fixed point values won't work.</p>"},{"location":"effect-basics/parameters/#point-parameter-origin","title":"Point Parameter Origin","text":"<p>After Effects modifies any point parameter to account for origin offset, introduced by \"upstream\" effects that modify the output dimensions. Even if the ECP UI indicates the value of the point parameter is (0,0), the offset has already been factored in.</p>"},{"location":"effect-details/accessing-camera-light-information/","title":"Accessing Camera &amp; Light Information","text":"<p>Using functions provided in the AEGP_PFInterfaceSuite, effects can access camera and lighting information for the layer to which they're applied; see the Resizer sample.</p> <p>You can also use many of the other functions from AE_GeneralPlug.h; the possibilities are vast.</p>"},{"location":"effect-details/accessing-function-suites/","title":"Accessing the After Effects Function Suites","text":"<p>If you are writing C++ code, accessing the suites should be done using the AEFX_SuiteScoper which automatically acquires the suite when needed and disposes of it when done.</p> <p>Here is an example using AEFX_SuiteScope to access the PF_GPUDeviceSuite1 suite:</p> <pre><code>AEFX_SuiteScoper&lt;PF_GPUDeviceSuite1&gt; gpu_suite = AEFX_SuiteScoper&lt;PF_GPUDeviceSuite1&gt;(\n    in_dataP,\n    kPFGPUDeviceSuite,\n    kPFGPUDeviceSuiteVersion1,\n    out_dataP);\n</code></pre> <p>Note</p> <p>AEFX_SuiteScoper will throw an Exception, <code>A_Err_MISSING_SUITE</code>, if the requested suite cannot be acquired and the optional second template argument, <code>ALLOW_NO_SUITE</code>, is set to false.</p> <p>If you set <code>ALLOW_NO_SUITE</code> to <code>false</code>, please ensure you wrap the <code>AEFX_SuiteScoper&lt;&gt;</code> call with a try/catch wrapper.</p> <p>If <code>ALLOW_NO_SUITE</code> is set to <code>true</code>, then you should check the returned pointer is not NULL before using it.</p> <p>Once you have the suite you may make calls to any function in the suite list so:</p> <pre><code>gpu_suite-&gt;GetDeviceInfo(in_dataP-&gt;effect_ref, extraP-&gt;input-&gt;device_index, &amp;device_info);\n</code></pre> <p>If you must use C code, then acquire and release the suites manually using the <code>PF_Suite_Helper</code> utility files, as demonstrated in the Checkout sample project.</p> <p>Behind the scenes, both of these methods acquire PICA function suites using <code>AcquireSuite</code>, a member function of the <code>SPBasicSuite</code> pointed to in <code>PF_InData</code>.</p>"},{"location":"effect-details/accessing-function-suites/#suite-versions","title":"Suite Versions","text":"<p>WhizBangSuite1 may provide a Foobar() function which takes two arguments, and WhizBangSuite2&gt;Foobar() may take three. Though each new version of a suite supercedes the old one, feel free to acquire multiple versions of the same suite; we never remove or alter previously shipped suites.</p> <p>When unsure of the capabilities of the plug-in host (no third party host besides Premiere supports PICA), attempt to acquire the latest version, and \"fall back\" to previous versions. If functionality you require isn't available, warn the user, and return an error (or fall back on other behavior when running in more \"primitive\" plug-in hosts). Note that support for these suites in other hosts of After Effects plug-ins is a maze of twisty caves and passages, all alike.</p>"},{"location":"effect-details/accessing-function-suites/#threading","title":"Threading","text":"<p>Unless documented otherwise, assume that any function provided by our suites is not thread-safe. For example, only your plug-in's main thread should do anything that modifies the user interface.</p>"},{"location":"effect-details/arbitrary-data-parameters/","title":"Arbitrary Data Parameters","text":"<p>Some values are not adequately represented by After Effects existing parameter types. You can create and register any data for interpolation by After Effects, by creating parameters of arbitrary data type, or \"arb data\". You can rely on our interpolation engine and parameter management, without having to force your data into a pre-defined parameter type.</p> <p>We've created a new messaging structure for custom data types, which are easily conceptualized as member (and friend) functions of a C++ class. You must respond to all selectors detailed here if you use arb data.</p> <p>These functions deal with custom data structure management. Your arb data will be unloaded and reloaded at the user's whim; provide disk-safe flatten and unflatten functions.</p>"},{"location":"effect-details/arbitrary-data-parameters/#arbitrary-data-selectors","title":"Arbitrary Data Selectors","text":"<p>Selector</p> <p>Response</p> <p><code>PF_Arbitrary_NEW_FUNC</code></p> <p>Allocate, populate, and return a handle to a new instance of your arb data.</p> <p><code>PF_Arbitrary_DISPOSE_FUNC</code></p> <p>Free and destroy an instance of your arbitrary data type.</p> <p><code>PF_Arbitrary_COPY_FUNC</code></p> <p>Make a copy of an existing instance. You will be passed two handles, but only the source handle contains a valid instance. You must create a new instance, copy the values from the source, and put it in the destination handle. If you are passed a NULL handle, create a default instance of your arb data.</p> <p><code>PF_Arbitrary_FLAT_SIZE_FUNC</code></p> <p>You'll be passed a handle to an instance of your data type, and a variable in which you return the size of a flattened version of that instance.</p> <p><code>PF_Arbitrary_FLATTEN_FUNC</code></p> <p>Flatten the instance you're passed, and place it in the supplied buffer. The buffer will be the size you reported in response to <code>PF_Arbitrary_FLAT_SIZE_FUNC</code>.</p> <p><code>PF_Arbitrary_UNFLATTEN_FUNC</code></p> <p>Unpack the buffer into an instance of your arbitrary data type, and put in the handle which you've been passed.</p> <p><code>PF_Arbitrary_INTERP_FUNC</code></p> <p>Your interpolation function is passed three handles to instances of your arbitrary data type; one containing initial values (0), one final values (1), and a third to hold your interpolated data (somewhere between 0 and 1). You are also passed a float indicating where, between 0 and 1, your interpreted value should be.</p> <p>Allocate an instance and fill it with interpolated data. Then put the interpolated instance into the handle you've been passed. The velocity curves have already been accounted for when the normalized time value was calculated.</p> <p>Note</p> <p>Never check out parameters if the in_data&gt;effect_ref is NULL.</p> <p><code>PF_Arbitrary_COMPARE_FUNC</code></p> <p>You are passed two instances of your arbitrary data, and a pointer to a comparison result. Populate the result with one of the values for <code>PF_ArbCompareResult</code> (see <code>AE_Effect.h</code>) to indicate whether the first was equal to, less than, more than, or simply not equal to the second.</p> <p><code>PF_Arbitrary_PRINT_SIZE_FUNC</code></p> <p>Indicate the buffer size you require for printing your parameter's current values by setting <code>print_sizePLu</code> (member of <code>print_size_func_params</code>, part of the <code>PF_ArbParamsExtra</code> structure).</p> <p><code>PF_Arbitrary_PRINT_FUNC</code></p> <p>Format your arbitrary data for text-based export, and copy the result to the buffer. This can be as elaborate as you would like.</p> <p>Your plug-in should emulate the cut-and-paste behavior for pasting text representations of parameter settings (into a Microsoft Excel spreadsheet, for example) displayed by the plug-ins shipped with After Effects.</p> <p>You have a great deal of flexibility in how you format your output.</p> <p><code>PF_Arbitrary_SCAN_FUNC</code></p> <p>Given a buffer of text data (often from the system clipboard), parse it into your arbitrary data format.</p>"},{"location":"effect-details/arbitrary-data-parameters/#implementing-arbitrary-data","title":"Implementing Arbitrary Data","text":"<p>In addition to the normal command and event selector, arb data requires another set of host interaction. This is transparent for other parameter types, as After Effects manages their representing data. Writing an arb data plug-in will give you insight into the vast amount of parameter management After Effects performs, and the sequence in which those managing actions occur. It may even cause you to rethink your implementation, and use the parameter types After Effects manages for you.</p> <p>Instantiate your arb data (using After Effects' memory allocation functions, of course) and point ParamDef.u.arb_d.dephault at it. Populate it with appropriate default values. No value variable is required to set up the parameter; zero it out for safety's sake.</p> <p>In your plug-in's entry function, include a case for handling PF_Cmd_ARBITRARY_CALLBACK.</p> <p>Invoke a secondary event handler, <code>HandleArbitrary</code>. It receives a <code>PF_ArbParamsExtra</code> in extra, which in turn contains a <code>PF_FunctionSelector</code> identifying the command sent.</p> <p>Perhaps After Effects has sent <code>PF_Cmd_ARBITRARY_CALLBACK</code> and the <code>PF_FunctionSelector</code> is <code>PF_Arbitrary_COPY_FUNC</code>. Pointers to a source and destination Arb are provided in <code>PF_ArbParamsExtra.copy_func_params</code>. Allocate a new Arb, and point <code>dest_arbPH</code> at it. If <code>src_arbH</code> is NULL, create a default Arb for <code>dest_arbPH</code>.</p> <p>The user may select the arb's keyframe data in the Timeline panel, copy it, then switch to another application. You will be sent a <code>PF_Arbitrary_PRINT_SIZE_FUNC</code>; set the size of your output buffer by setting <code>print_sizePLu</code> in the <code>PF_ArbParamsExtra</code>. You'll then receive <code>PF_Arbitrary_PRINT_FUNC</code>; populate the <code>print_bufferPC</code> output buffer with a textual representation of the Arb(s) in question.</p> <p>Users may paste keyframe data into your Arb's timeline. You will receive <code>PF_Arbitrary_SCAN_FUNC</code>. Create an Arb based on the contents of the character buffer handed to you (its size is indicated in <code>print_sizeLu</code>).</p>"},{"location":"effect-details/arbitrary-data-parameters/#arbitrary-data-re-entrancy","title":"Arbitrary Data? Re-Entrancy!","text":"<p>Your plug-in code must be recursively re-entrant to support custom data types, since it could be called by After Effects for numerous reasons. Your plug-in could check out a layer that, in turn, depends on another instance of your effect. Your plug-in's arbitrary data handling code will be triggered by your attempt to check out a (seemingly) unrelated layer. Watch out for calls to C run-time libraries that rely on static values accessed through global variables. If you're not prepared for this eventuality, you'll hang After Effects, and users will curse and punch their monitors.</p>"},{"location":"effect-details/arbitrary-data-parameters/#when-not-to-access-arbitrary-parameters","title":"When Not To Access Arbitrary Parameters","text":"<p>If <code>in_data&gt;effect_ref</code> is <code>NULL</code>, do not check out arbitrary parameters.</p>"},{"location":"effect-details/arbitrary-data-parameters/#changes-during-dialogs","title":"Changes During Dialogs","text":"<p>After Effects ignores any changes made to arbitrary data parameters during <code>PF_Cmd_DO_DIALOG</code>.</p> <p>This is by design; changes made during the display of the options dialog affect the entire effect stream, not just the arbitrary parameter at a given time.</p> <p>If you must alter your arb's behavior based on these changes, save that information in sequence data and apply it later, often during <code>PF_Cmd_USER_CHANGED_PARAM</code>.</p>"},{"location":"effect-details/changing-parameter-orders/","title":"Changing Parameter Orders, the Nice Way","text":"<p>It is possible to add or remove parameters from a plug-in, without forcing users to re-apply all instances of that plug-in to use the updated version. However, some advance planning on your part is necessary to allow for such changes. Your users (and technical support staff) will appreciate the effort.</p> <p>You must first create a parameter array index. During PF_Cmd_PARAM_SETUP, assign index values to each parameter as you add them, using a simple enumeration. The order of enumeration corresponds to the order in which the parameters are registered during PF_Cmd_PARAM_SETUP, which in turn determines the order in which they appear in the Effect Control and Timeline panels.</p> <p>Create another enumeration for disk IDs. The order of this enumeration must not be changed, though you may add to the end of this list. Note that the order of this list need not correspond with that of the parameter array index. Parameter disk IDs should range from 1 to 9999. Why not zero? Long story...</p> <p>In the early \"wild west\" days of After Effects plug-in programming, it was fairly common for developers not to bother with setting IDs. After Effects, realizing this, checked the ID of the first parameter added by that effect; if it was zero, it was assumed that the programmer hadn't bothered to ID params; After Effects then assigned each its own ID. This assumption works fine if you never set param IDs, but not so well if you start numbering your IDs from NULL. That's why.</p> <p>Before calling PF_ADD_PARAM(), specify the disk ID in the PF_ParamDef.uu.id field. If no value is specified, After Effects makes parameters sequential starting with 1. The parameter's information is tagged with this ID when saved. In this way, After Effects can still understand that, although your \"Foobarocity\" slider is now the fourth parameter passed, it's the same parameter as when it was second.</p> <p>To delete a parameter without forcing re-application, remove the code which creates it and its entry in the parameter array index list. However, do not remove its entry in the disk ID list. To add a new parameter, add an entry in the appropriate location in the parameter array indices list, add the parameter creation code, and append the disk ID to the end of the disk ID enumeration. To re-order, change the parameter array index list and reorder the parameter creation code appropriately.</p>"},{"location":"effect-details/changing-parameter-orders/#change-defaults-change-ids","title":"Change defaults? Change IDs","text":"<p>If you don't, if someone saves a project with the old default and then reads it in with the new effect installed, that parameter will change to the new default value.</p> <p>Presto! Instant support call.</p> <p>This is another prime use case for <code>PF_ParamFlag_USE_VALUE_FOR_OLD_PROJECTS</code> from Parameter Flags.</p>"},{"location":"effect-details/color-space-conversion/","title":"Color Space Conversion","text":"<p>Different pixel formats are useful for different operations. After Effects exposes its internal functions through PF_ColorCallbacksSuite. Here are the supported formats.</p>"},{"location":"effect-details/color-space-conversion/#pixel-types-for-different-color-spaces","title":"Pixel Types For Different Color Spaces","text":"Pixel Type Data Structure 8 bpc ARGB <pre><code>typedef struct {\n  A_u_char alpha, red, green, blue;\n} PF_Pixel8;\n</code></pre> 16 bpc ARGB <pre><code>typedef struct {\n  A_u_short alpha, red, green, blue;\n} PF_Pixel16;\n</code></pre> 32 bpc ARGB <pre><code>typedef struct {\n  PF_FpShort alpha, red, green, blue;\n} PF_PixelFloat, PF_Pixel32;\n</code></pre> HLS (Hue, Lightness, Saturation) <pre><code>typedef PF_Fixed PF_HLS_PIXEL[3]\n</code></pre> YIQ (luminance, in-phase chrominance, quadrature chrominance) <pre><code>typedef PF_Fixed PF_YIQ_PIXEL[3]\n</code></pre> <p>Plug-ins can draw on image processing algorithms written for nearly any color space by using the following callback functions.</p>"},{"location":"effect-details/color-space-conversion/#color-space-conversion-callbacks","title":"Color Space Conversion Callbacks","text":"Function Purpose Replaces RGBtoHLS Given an RGB pixel, returns an HLS (hue, lightness, saturation) pixel. HLS values are scaled from 0 to 1 in fixed point. <code>PF_RGB_TO_HLS</code> HLStoRGB Given an HLS pixel, returns an RGB pixel. <code>PF_HLS_TO_RGB</code> RGBtoYIQ Given an RGB pixel, returns a YIQ (luminance, inphase chrominance, quadrature chrominance) pixel. Y is 0 to 1 in fixed point, I is -0.5959 to 0.5959 in fixed point, and Q is -0.5227 to 0.5227 in fixed point. <code>PF_RGB_TO_YIQ</code> YIQtoRGB Given a YIQ pixel, returns an RGB pixel. <code>PF_YIQ_TO_RGB</code> Luminance Given an RGB pixel, returns 100 times its luminance value (0 to 25500). <code>PF_LUMINANCE</code> Hue Given an RGB pixel, eturns its hue angle mapped from 0 to 255, where 0 is 0 degrees and 255 is 360 degrees. <code>PF_HUE</code> Lightness Given an RGB pixel, returns its lightness value (0 to 255). <code>PF_LIGHTNESS</code> Saturation Given an RGB pixel, returns its saturation value (0 to 255). <code>PF_SATURATION</code>"},{"location":"effect-details/compute-cache-api/","title":"Compute Cache API","text":"<p>The Compute Cache API provides a thread-safe cache as a replacement or supplement to Sequence Data where effects can compute, store and read data before or during Render. It should be used to cache data that is time consuming to compute. For Multi-Frame Rendering effects it can have a large benefit by eliminating redundant computation across threads. The cache is unified with other caches in After Effects thus memory usage is balanced across other caches. The model also supports the user doing A/B testing with parameters and the cache state persisting for both A and B states thus speeding up workflow. These last two design characteristics benefit both single- and multi-frame rendering effects.</p> <p>The Compute Cache is implemented in the AEGP_ComputeCache suite and is accessible via <code>AEGP_ComputeCacheSuite1</code> and <code>AEGP_ComputeCacheCallbacks</code>.</p>"},{"location":"effect-details/compute-cache-api/#aegp_computecachesuite1","title":"AEGP_ComputeCacheSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>AEGP_ClassRegister</code></p> <p>Registers the cache type using a globally unique identifier for the compute class, such as \"adobe.ae.effect.test_effect.cache_v_1\".</p> <p>An object of type <code>AEGP_ComputeCacheCallbacks</code> should be setup with function pointers to the callback methods required by <code>AEGP_ComputeCacheSuite1</code>.</p> <p>This function will typically be called during <code>PF_Cmd_GLOBAL_SETUP</code>, but can be called any time.</p> <p><pre><code>A_Err (*AEGP_ClassRegister)(\n  AEGP_CCComputeClassIdP  compute_classP,\n  const AEGP_ComputeCacheCallbacks  *callbacksP);\n</code></pre></p> <p><code>AEGP_ClassUnRegister</code></p> <p>Unregister a previously registered cache type using the globally unique identifier for the compute class.</p> <p>All cached values will be purged at this time through calls to delete_compute_value.</p> <p>This function will typically be called during <code>PF_Cmd_GLOBAL_SETDOWN</code>, but can be called any time.</p> <p><pre><code>A_Err (*AEGP_ClassUnregister)(\n  AEGP_CCComputeClassIdP    compute_classP);\n</code></pre></p> <p><code>AEGP_ComputeIfNeededAndCheckout</code></p> <p>This is the main checkout call that is used to compute and/or return an <code>AEGP_CCCheckoutReceiptP</code> receipt pointer to the cache entry.</p> <p>Pass in the <code>AEGP_CCComputeClassIdP</code> that was used in the <code>AEGP_RegisterClass</code> method.</p> <p>The <code>AEGP_CCComputeOptionsRefconP</code> object will be passed through to the <code>AEGP_ComputeCacheCallbacks</code>, <code>generate_key</code> and <code>compute</code> method as needed. This objects type is opaque to <code>AEGP_ComputeCacheSuite1</code> and will need to be casted appropriately by the effects implementation of <code>generate_key</code> and <code>compute</code>.</p> <p>The <code>wait_for_other_threadB bool</code> is used when the cache value needs to be computed. When set to <code>true</code>, the method will always execute the compute step or return a completed receipt to the cache. When set to <code>false</code>, this method will complete the compute step unless another thread is already computing the cache entry, in which case <code>A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING</code> will be returned.</p> <p>See Impact of wait_for_other_threadB on AEGP_ComputeIfNeededAndCheckout for more information on this parameter.</p> <p>The <code>CCCheckoutReceiptP</code> is an opaque pointer that can then be passed into <code>AEGP_GetReceiptComputeValue</code> to get a pointer to the computed value from the cache.</p> <p><pre><code>A_Err (*AEGP_ComputeIfNeededAndCheckout)(\n  AEGP_CCComputeClassIdP    compute_classP,\n  AEGP_CCComputeOptionsRefconP  opaque_optionsP,\n  bool  wait_for_other_threadB,\n  AEGP_CCCheckoutReceiptP   *compute_receiptPP);\n</code></pre></p> <p><code>AEGP_CheckoutCached</code></p> <p>Use this method to check if the cache value has already been computed, returning the <code>AEGP_CCCheckoutReceiptP</code> receipt if available.</p> <p>If the cache has not been computed, <code>A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING</code> will be returned.</p> <p><pre><code>A_Err (*AEGP_CheckoutCached)(\n  AEGP_CCComputeClassIdP    compute_classP,\n  AEGP_CCComputeOptionsRefconP    opaque_optionsP,\n  AEGP_CCCheckoutReceiptP   *compute_receiptPP);\n</code></pre></p> <p><code>AEGP_GetReceiptComputeValue</code></p> <p>Use this method to retrieve the cache value from the compute method.</p> <p>Pass in the receipt received from <code>AEGP_ComputeIfNeededAndCheckout</code> or <code>AEGP_CheckoutCached</code>.</p> <p>The returned <code>CCComputeValueRefconP</code> should be casted to the correct object type that was used in the <code>compute</code> method.</p> <p><pre><code>A_Err (*AEGP_GetReceiptComputeValue)(\n  const AEGP_CCCheckoutReceiptP   compute_receiptP,\n  AEGP_CCComputeValueRefconP    *compute_valuePP);\n</code></pre></p> <p><code>AEGP_CheckinComputeReceipt</code></p> <p>Call this method after the effect code is done using a checked-out, computed cache value, before returning to the host, passing in the receipt returned from <code>AEGP_ComputeIfNeededAndCheckout</code> or <code>AEGP_CheckoutCached</code>.</p> <p>If the receipt being passed in is invalid, error <code>A_Err_STRUCT</code> will be returned. A pop-up error dialog will also be shown with this message, \"Trying to check in invalid receipt. Please make sure you are not double checking in or checking in invalid receipts.\"</p> <p><pre><code>A_Err (*AEGP_CheckinComputeReceipt)(\n  AEGP_CCCheckoutReceiptP   compute_receiptP );\n</code></pre></p>"},{"location":"effect-details/compute-cache-api/#aegp_computecachecallbacks","title":"AEGP_ComputeCacheCallbacks","text":"<p>The effect must provide implementations for these callbacks.</p> <p>Function</p> <p>Purpose</p> <p><code>generate_key</code></p> <p>Called when creating a cache entry and when doing a cache lookup. Should be fast to compute. All of the inputs needed to uniquely address the cache entry must be hashed into the key. If a layer checkout is needed to calculate the cache value, such as with a histogram, then the hash of that input must be included</p> <p>See <code>PF_ParamUtilsSuite::PF_GetCurrentState</code> to get the hash for a layer param. Note this is the hash of the inputs needed to generate the frame, not a hash the pixels in the frame, thus a render is not triggered when making this call.</p> <p>The <code>AEGP_CCComputeOptionsRefconP</code> will contain the data passed into the <code>AEGP_ComputeIfNeededAndCheckout</code> or <code>AEGP_CheckoutCached</code> methods.</p> <p>The <code>AEGP_CComputeKeyP</code> <code>out_keyP</code> returns the hashed key value, see the <code>AEGP_CCComputeKey</code> definition in the <code>AE_ComputeCacheSuite.h</code> for type definition.</p> <p>Note</p> <p>The <code>AEGP_CCComputeOptionsRefconP</code> parameter passed into <code>generate_key</code> and <code>compute</code> must contain all inputs to calculate the hash key for a cache value / to compute the cache value itself.</p> <p>This will frequently include many or all of the effect parameters and any layer parameters needed to calculate the cache value. See the Real-world Integration Example for more details.</p> <p><pre><code>A_Err (*generate_key)(\n  AEGP_CCComputeOptionsRefconP   optionsP,\n  AEGP_CCComputeKeyP   out_keyP);\n</code></pre></p> <p><code>compute</code></p> <p>Called by <code>AEGP_ComputeIfNeededAndCheckout</code> when a cache value needs to be computed.</p> <p>The <code>AEGP_CCComputeOptionsRefconP</code> will contain the data passed into the <code>AEGP_ComputeIfNeededAndCheckout</code> method.</p> <p>Set <code>out_valuePP</code> to point to the result of the computed cache value, casted to the <code>AEGP_CCComputeValueRefconP</code> type.</p> <p>For example:</p> <p><pre><code>*out_valuePP = reinterpret_cast&lt;AEGP_CCComputeValueRefconP&gt;(myComputedResultP);\n</code></pre></p> <p><pre><code>A_Err (*compute)(\n  AEGP_CCComputeOptionsRefconP   optionsP,\n  AEGP_CCComputeValueRefconP   *out_valuePP);\n</code></pre></p> <p><code>approx_size_value</code></p> <p>Called by the cache system to determine the total footprint of memory being used by the computed cache value. The computed value is not required to be a flat structure.</p> <p>The size is an input to the cache purging heuristic.</p> <p>The <code>AEGP_CCComputeValueRefconP</code> is the computed cache value that can be used to generate the size value to return.</p> <p><pre><code>size_t (*approx_size_value)(\n  AEGP_CCComputeValueRefconP   valueP);\n</code></pre></p> <p><code>delete_compute_value</code></p> <p>This is called to free the value when the cache entry needs to be purged. All resources owned by the cache value must be freed here.</p> <p><pre><code>void (*delete_compute_value)(\n  AEGP_CCComputeValueRefconP   valueP);\n</code></pre></p>"},{"location":"effect-details/compute-cache-api/#generating-a-key","title":"Generating a Key","text":"<p>The <code>generate_key</code> callback must return a unique key within the Registered Class to be used as the cache key for an entry in the cache but for future-proofing, we'd strongly suggest the key is globally unique across all registered classes. The AE SDK provides the <code>AEGP_HashSuite1</code> suite to assist in generating a GUID that can be used as the key.</p> <p>The result of <code>generate_key</code> must be provided as a <code>AEGP_CCComputeKey</code> object which is type defined from the following struct:</p> <pre><code>typedef struct AEGP_GUID {\n    A_long bytes[4];\n} AEGP_GUID;\n</code></pre>"},{"location":"effect-details/compute-cache-api/#aegp_hashsuite1","title":"AEGP_HashSuite1","text":"<p>The <code>AEGP_HashSuite1</code> can be used to generate a unique key for use within the <code>AEGP_ComputeCacheCallbacks</code> <code>generate_key()</code> callback method.</p> <p>After the suite is acquired, call the <code>AEGP_CreateHashFromPtr()</code> method with a buffer; we suggest a character array with a recognizable string so you can easily recall what's being stored in the cache entry. Then call <code>AEGP_HashMixInPtr()</code> with any effect parameters, layer checkout hash results, etc., that should result in a different cache key and entry.</p> <p>Function</p> <p>Purpose</p> <p><code>AEGP_CreateHashFromPtr</code></p> <p>Call this to begin creating the hash which will be returned in <code>hashP</code> that can be used for returning from <code>generate_key</code>.</p> <p><pre><code>A_Err (*AEGP_CreateHashFromPtr)(\n  const A_u_longlong buf_sizeLu,\n  const void *bufPV,\n  AEGP_GUID *hashP);\n</code></pre></p> <p><code>AEGP_HashMixInPtr</code></p> <p>Call this for each effect parameter, layer checkout hash or other data that would be used in calculating a cache entry.</p> <p><pre><code>A_Err(*AEGP_HashMixInPtr)(\n  const A_u_longlong buf_sizeLu,\n  const void *bufPV,\n  AEGP_GUID *hashP);\n</code></pre></p> <p>Here's an example of using the <code>AEGP_HashSuite1</code> where Levels2Histo_generate_key_cb() is a callback called for <code>generate_key()</code>:</p> <pre><code>A_Err Levels2Histo_generate_key_cb(AEGP_CCComputeOptionsRefconP opaque_optionsP, AEGP_CCComputeKeyP out_keyP)\n{\n    try\n    {\n        const Levels2Histo_options&amp;  histo_op( *reinterpret_cast&lt;Levels2Histo_options*&gt;(opaque_optionsP));\n        A_Err err = Err_NONE;\n\n        AEFX_SuiteScoper&lt;AEGP_HashSuite1&gt; hash_suite = AEFX_SuiteScoper&lt;AEGP_HashSuite1&gt;(\n            in_dataP,\n            kAEGPHashSuite,\n            kAEGPHashSuiteVersion1,\n            out_dataP);\n\n        // define a simple buffer that is easy to recognize as a starting hash\n        const char* hash_buffer = \"Level2Histo\";\n        err = hash_suite-&gt;AEGP_CreateHashFromPtr(sizeof(hash_buffer), hash_buffer, out_keyP);\n\n        // Mix in effect parameters that would create a different compute result and should generate a different cache entry and key.\n        if (!err) {\n            err = hash_suite-&gt;AEGP_HashMixInPtr(sizeof(histo_op.depthL), &amp;histo_op.depthL, out_keyP);\n        }\n\n        if (!err) {\n            err = hash_suite-&gt;AEGP_HashMixInPtr(sizeof(histo_op.bB), &amp;histo_op.bB, out_keyP);\n        }\n\n        // mix in any other effect parameters that should affect the cache key\n        // ...\n\n        // out_keyP is returned as the generated key for use as the cache key.\n    }\n    catch (...)\n    {\n        /* return most appropriate PF_Err */\n    }\n}\n</code></pre>"},{"location":"effect-details/compute-cache-api/#compute-or-checkout-the-cache-value","title":"Compute or Checkout the Cache Value","text":"<p>When adding cache support one of the first questions to answer is if a single render call needs to checkout more than one cache value. If more than one cache value is needed to complete a render, then the multi-checkout pattern can be applied to concurrently calculate the caches across multiple render calls and thus avoid serialization of the compute.</p>"},{"location":"effect-details/compute-cache-api/#single-cache-value","title":"Single Cache Value","text":"<p>If a render call only needs one cache value for rendering a frame, then set the <code>wait_for_other_threadB</code> parameter in <code>AEGP_ComputeIfNeededAndCheckout</code> to <code>true</code>. The checkout call will return a receipt, possibly calling the compute callback to populate the cache; or waiting on another thread that had already started the needed computation.</p>"},{"location":"effect-details/compute-cache-api/#multi-checkout-cache-values","title":"Multi-Checkout Cache Values","text":"<p>If a render call needs multiple cache values, then the multi-checkout pattern can be used to keep the render threads utilized and thus avoid serializing the compute.</p> <p>The concept of using multi-checkout is to have one render (e.g. rendering frame 3) thread take advantage of any other render threads (e.g. frame 1, 2) that are computing needed cache values concurrently with the thread (e.g. frame 3 needs data from frames 1 and 2). If no other threads are computing the requested cached value, then the render thread (frame 3) will execute the compute. Once all the cache value checkout calls have been made, the render thread (frame 3) can then wait for any other threads (frame 1, 2) to finish their compute before executing the pixel rendering. Once the pixel rendering is complete, make sure to check-in any cache values that were checked out (frame 1, 2 and 3).</p> <p>Below is example pseudo-code to illustrate this approach.</p> <pre><code>Render()\n{\n    // Make a request for each cache value that is needed to complete the render\n    bool first_err = AEGP_ComputeIfNeededAndCheckout(first_options, do_not_wait, first_cache_receipt);\n    bool second_err = AEGP_ComputeIfNeededAndCheckout(second_options, do_not_wait, second_cache_receipt);\n    // Add as many additional do_not_wait checkout calls here as needed.\n\n    // Once all the requests have been made, check to see if any of the Checkouts did not return\n    // a valid checkout receipt.\n    if(first_err == A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING) {\n        AEGP_ComputeIfNeededAndCheckout(wait, first_cache_receipt);\n    }\n    if(second_err == A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING) {\n        AEGP_ComputeIfNeededAndCheckout(wait, second_cache_receipt);\n    }\n    // Add as many additional waiting checkout calls here as needed\n\n    // All cache values are now available via AEGP_GetReceiptComputeValue for use in the Render\n\n    // ... complete the render steps\n\n    // Check in all cache values now\n    AEGP_CheckinComputeReceipt(first_cache_receipt);\n    AEGP_CheckinComputeReceipt(second_cache_receipt);\n}\n</code></pre>"},{"location":"effect-details/compute-cache-api/#impact-of-wait_for_other_threadb-on-aegp_computeifneededandcheckout","title":"Impact of wait_for_other_threadB on AEGP_ComputeIfNeededAndCheckout","text":"<p>Calls to <code>AEGP_ComputeIfNeededAndCheckout</code> will return a checkout receipt for the cache value in nearly every permutation of the parameters, except when <code>wait_for_other_threadB</code> is set to <code>false</code> and another thread is already rendering the requested cache value.</p> <p>Cache State</p> <p><code>wait_for_other_threadB</code> set to <code>False</code></p> <p><code>wait_for_other_threadB</code> set to <code>True</code></p> <p>No cache for key</p> <p>Compute and checkout receipt returned</p> <p>Compute and checkout receipt returned</p> <p>Being computed by another thread</p> <p>Returns A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING</p> <p>Note that After Effects will not report this error to the user, it is only for the effect to respond to.</p> <p>Wait for another thread and return checkout receipt upon completion</p> <p>Cached</p> <p>Checkout receipt returned</p> <p>Checkout receipt returned</p>"},{"location":"effect-details/compute-cache-api/#checking-cache-state","title":"Checking Cache State","text":"<ul> <li>There may be scenarios where an effect needs to check if a cache value has been computed but doesn't want to actually execute or block while waiting on another thread to complete the compute. This can be achieved through the <code>AEGP_CheckoutCached()</code> method.</li> <li>This call could be used to implement a polling pattern where another piece of code is expected to populate the cache. For example, a UI thread could poll the cache for a histogram that is generated on a render thread.</li> <li>If the cache value is available, the <code>AEGP_CCCheckoutReceiptP</code> parameter will return a checkout receipt that can be passed to <code>AEGP_GetReceiptComputeValue()</code> to retrieve the cache value. If the cache value is not available, the method will return a <code>A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING</code> error code.</li> </ul>"},{"location":"effect-details/compute-cache-api/#persistence-of-cache","title":"Persistence of Cache","text":"<ul> <li>Unlike flattened sequence data, the contents of the Compute Cache are not stored with the project and anything computed will need to be recomputed when the project is reopened.</li> <li>Entries in the cache will automatically purge if memory is needed for other operations by After Effects. Code relying on the cache value being available should be written assuming the compute step will need to be completed each time.</li> <li>The <code>approx_size_value</code> callback should return quickly but provide a reasonably accurate measurement of the data being held by the cache entry. This will allow After Effects to make better decisions on what to purge and when.</li> <li>Unregistering the cache class will remove all data of that class from the cache. It will cause a <code>delete_compute_value</code> callback to be made for each entry in the cache associated with the cache class.</li> <li>The <code>delete_compute_value</code> callback should free any resources related to the cache entry. The Compute Cache only contains a void * pointer to the resources and cannot free the resources on behalf of the effect.</li> </ul>"},{"location":"effect-details/compute-cache-api/#real-world-integration-example","title":"Real-world Integration Example","text":"<p>The Auto Color plugin that ships with After Effects is an effect that now utilizes the Compute Cache and the <code>HashSuite1</code> suite to cache histogram and level data used when the effect parameter, Temporal Smoothing, is set to a value greater than 0.</p> <p>The initial steps in integrating the Cache and Hash suites were to identify what data was being computed by Auto Color's Temporal Smoothing, what portions of that computation are time-consuming, and then what effect parameters would cause a re-compute to be needed.</p> <p>Note</p> <p>Each effect will need to compute and cache different data, so you'll need to do this review uniquely for your effect.</p> <p>For Auto Color's Temporal Smoothing, the frame being rendered needs both histogram and level data from the frames surrounding it. The number of surrounding frames that are needed is based on the temporal smoothing parameters value. Both the histogram and levels data can be expensive to calculate but in general can be calculated once for each frame, cached, and then reused as needed.</p> <p>However, in the Auto Color effect are a number of other parameters that are used to calculate the cache values including the Black Clip, White Clip, Mid Tones and the Auto Color mode. Accordingly, these parameters need to be included in the <code>generate_key</code> and <code>compute</code> methods.</p> <p>With that information in hand, we began the integration of the Compute Cache:</p> <ol> <li>Define the class registration id and add calls to register and unregister the checkout cache class and callbacks<ul> <li>The call to AEGP_ClassRegister is executed during <code>PF_Cmd_GLOBAL_SETUP</code>.</li> <li>The call to AEGP_ClassUnregister is executed during <code>PF_Cmd_GLOBAL_SETDOWN</code>.</li> </ul> </li> <li>Implement the callback functions for <code>generate_key</code>, <code>compute</code>, <code>approx_size_value</code> and <code>delete_compute_value</code>.<ul> <li><code>generate_key</code> utilizes the <code>AEGP_HashSuite1</code> to generate a unique key mixing in the black clip, white clip, mid tones and auto levels mode. It also mixes in the frame time and time step to ensure the cache is unique for the specific frame being computed.</li> <li><code>compute</code> calculates the histogram and levels and stores those two data structures into a single struct that is set as the <code>out_valuePP</code> parameter from the compute callback.</li> <li><code>approx_size_value</code> adds the <code>sizeof()</code> the histogram and level data structures that are in the cached value to return the size of the memory being used by the cache entry.</li> <li><code>delete_compute_value</code> clears the memory held by the histogram and level data structures for the cache entry.</li> </ul> </li> <li>Integrate the compute/checkout call into Temporal Smoothing<ul> <li>The Temporal Smoothing code was updated to include calls to <code>AEGP_ComputeIfNeededAndCheckout</code>. The calls are made for each frame time / time step needed for the Temporal Smoothing algorithm, utilizing the results from other rendering threads computing surrounding frame histogram and levels data.</li> </ul> </li> <li>Integrate the cache check-out and check-in<ul> <li>Once all the required cache values were computed for a frame, the effect code checks out the cache values needed using <code>AEGP_GetReceiptComputeValue</code>.</li> <li>The cache values are then used as part of the temporal smoothing algorithm to make the adjustments to the color of the frame.</li> <li>Once the cache values are no longer needed by the current frame, a call to <code>AEGP_CheckinComputeReceipt</code> is made for each cache value receipt.</li> <li>Auto Color does not use <code>AEGP_CheckoutCached</code> at this time.</li> </ul> </li> <li>Testing sequence_data versus Compute Cache implementations<ul> <li>Auto Color was using sequence data to store the histogram and levels data, and prior to using the Compute Cache, it would have a unique copy of sequence_data on each rendering thread. This meant that every histogram and level required for a frame would need to be rendered on every thread.</li> <li>With the change to use the Compute Cache, each frame being rendered gained the performance benefits of other render threads computing the histogram and levels data and storing it for future use.</li> <li>The improvement in rendering the Auto Color effect over a piece of footage with the Compute Cache has resulted in at least 3x faster renders than the sequence_data version.</li> </ul> </li> </ol>"},{"location":"effect-details/effect-details/","title":"Effect Details","text":"<p>Now that we've covered the basics of effect plug-ins, we'll cover some of the finer points to polish off your effect. Not every section will be relevant to every plug-in, so feel free to use the PDF document bookmarks to skip to the sections pertinent to your current project.</p>"},{"location":"effect-details/effect-details/#free-code-good","title":"Free Code == Good","text":"<p>After Effects provides effect plug-ins with as much information and supporting code as possible. Use our function suites and callbacks to obtain the value of parameters (including source footage) at different times. Use our memory allocation suite to avoid competing with the host for resources. Use our image processing suites to copy, fill, blend and convolve images, and convert between color spaces. Obtain information about the masks applied to a layer. ANSI emulation and math utility suites are also provided, as well as information about the application, user, serial number, and current drawing context.</p> <p>Previous versions of After Effects have provided functions for many common tasks. As we moved to support deeper color, these were moved to function suites. Use the newer function suites whenever possible; things will just be better.</p> <p>Using our function suites keeps your plug-in compact; you write and test less code. The functions are tested, optimized, and used by our own plug-ins. The functions are distributed to multiple processors and take advantage of available hardware acceleration.</p> <p>No, really, use the provided functions. Seriously.</p>"},{"location":"effect-details/global-sequence-frame-data/","title":"Global, Sequence, &amp; Frame Data","text":"<p>After Effects allows plug-ins to store data at three scopes: global, sequence, and frame. Consider carefully where you store information; choosing poorly can impact performance, or make your plug-in confusing to the user.</p> <p>Use global data for information common to all instances of the effect: static variables and data, bitmaps, pointers to other DLLs or external applications. If your effect supports Multi-Frame Rendering, any static or global variables must be free of race conditions (see What does it mean for an effect to be thread-safe? for more information).</p> <p>Store anything specific to this instance of your plug-in (UI settings, text strings, and any custom data not stored in parameters) in Sequence Data or in the new Compute Cache For Multi-Frame Rendering.</p> <p>Frame data is used for information specific to rendering a given frame. This has fallen into disuse, as most machines are capable of loading an entire frame into memory at a time. Of course, your IMAX-generating users will still appreciate any optimizations you can make.</p>"},{"location":"effect-details/global-sequence-frame-data/#persistence","title":"Persistence","text":"<p>After Effects saves sequence data in the project file, but not global or frame data. Pointers within sequence data which point to external data are, in all likelihood, invalid upon reopening the project, and must be re-connected. We call this process \"flattening\" and \"unflattening\" the sequence data.</p> <p>Note</p> <p>The Compute Cache does not store its contents to the project file. The data stored in the cache must be recreated during render.</p>"},{"location":"effect-details/global-sequence-frame-data/#validating-sequence-data","title":"Validating Sequence Data","text":"<p>Careful sequence data validation is important for effects that do simulation across time, where frame N is dependent on frame N-1, and you use a cache of calculated data in your sequence data. If a parameter is changed, certain calculated data may no longer be valid, but it would also be wasteful to blindly recalculate everything after every change.</p> <p>When asked to render frame N, assuming you have your cached data calculated up to frame N-1, call <code>PF_GetCurrentState()</code> / <code>PF_AreStatesIdentical()</code> from PF_ParamUtilSuite3 to see if the cache of calculated data is still valid given the current parameter settings.</p> <p>The state of all parameters (except those with PF_ParamFlag_EXCLUDE_FROM_HAVE_INPUTS_CHANGED set), including layer parameters (including param[0]) are checked over the passed time span.</p> <p>This is done efficiently, as the change tracking is done with timestamps.</p> <p>If the inputs have not changed, you can safely use your cache, AND the internal caching system will assume that you have a temporal dependency on the passed range. So if something changes upstream, the host's caches will be properly invalidated automatically.</p> <p>To test that it is working, apply your effect with one parameter keyframed on every frame. RAM Preview to fill the cache, then change one of the keyframes. The related frame and all dependent frames (e.g. later frames, in the case of a simulation) should lose their cache marks and require re-rendering. Similarly, upstream changes to sources of layer parameters should cause time-selective invalidation of the cache.</p>"},{"location":"effect-details/global-sequence-frame-data/#flattened-and-unflattened-sequence-data","title":"Flattened And Unflattened Sequence Data","text":"<p>If your sequence data references external memory (in pointers or handles), you must flatten and unflatten your data for disk-safe storage. This is analogous to creating your own miniature file format.</p> <p>Upon receiving PF_Cmd_SEQUENCE_FLATTEN, put data referenced by pointers into one contiguous block from which you can later recover the old structure.</p> <p>If your sequence data contains a pointer to a long, allocate 4 bytes in which to store the flattened data. You must handle platform-specific byte ordering.</p> <p>Remember, your users (the ones who bought two copies of your plug-in, anyway) may want the same project to work on macOS and Windows.</p> <p>After Effects sends PF_Cmd_SEQUENCE_RESETUP when the data is reloaded, for either flat or unflat data.</p> <p>Use a flag at a common offset within both structures to indicate the data's state.</p> <pre><code>typedef struct {\n    A_char*    messageZ;\n    PF_FpLong  big_numF;\n    void*      temp_storage;\n} non_flat_data;\n\ntypedef struct {\n    char       message[256];\n    PF_FpLong  big_numF;\n    A_Boolean  big_endianB;\n} flat_data;\n</code></pre>"},{"location":"effect-details/global-sequence-frame-data/#resizing-sequence-data","title":"Resizing Sequence Data","text":"<p>During PF_Cmd_SEQUENCE_SETUP, allocate a handle for data specific to this instance of your effect.</p> <p>You may modify the contents, but not the size, of the sequence data during any selector.</p> <p>You may resize the sequence data handle only during the following selectors:</p> <ul> <li><code>PF_Cmd_AUDIO_SETUP</code></li> <li><code>PF_Cmd_AUDIO_SETDOWN</code></li> <li><code>PF_Cmd_FRAME_SETUP</code></li> <li><code>PF_Cmd_FRAME_SETDOWN</code></li> <li><code>PF_Cmd_AUDIO_RENDER</code></li> <li><code>PF_Cmd_RENDER</code></li> <li><code>PF_Cmd_SEQUENCE_SETUP</code></li> <li><code>PF_Cmd_SEQUENCE_SETDOWN</code></li> <li><code>PF_Cmd_SEQUENCE_FLATTEN</code></li> <li><code>PF_Cmd_SEQUENCE_RESETUP</code></li> <li><code>PF_Cmd_DO_DIALOG</code></li> </ul>"},{"location":"effect-details/global-sequence-frame-data/#accessing-sequence_data-at-render-time-with-multi-frame-rendering","title":"Accessing sequence_data at Render Time with Multi-Frame Rendering","text":"<p>When enabling Multi-Frame Rendering on an effect, the <code>sequence_data</code> object will be read-only/const during Render and accessible on each render thread via the <code>PF_EffectSequenceDataSuite1</code> suite.</p>"},{"location":"effect-details/global-sequence-frame-data/#pf_effectsequencedatasuite1","title":"PF_EffectSequenceDataSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_GetConstSequenceData</code></p> <p>Retrieves the read-only const sequence_data object for a rendering thread when Multi-Frame Rendering is enabled for an effect.</p> <p><pre><code>PF_Err(*PF_GetConstSequenceData)(\n  PF_ProgPtr effect_ref,\n  PF_ConstHandle *sequence_data);\n</code></pre></p> <pre><code>static PF_Err Render(\n    PF_InData   *in_dataP,\n    PF_OutData  *out_dataP,\n    PF_ParamDef *params[],\n    PF_LayerDef *output )\n{\n    PF_ConstHandle seq_handle;\n\n    AEFX_SuiteScoper&lt;PF_EffectSequenceDataSuite1&gt; seqdata_suite =\n        AEFX_SuiteScoper&lt;PF_EffectSequenceDataSuite1&gt;(\n            in_dataP,\n            kPFEffectSequenceDataSuite,\n            kPFEffectSequenceDataSuiteVersion1,\n            out_dataP);\n\n    PF_ConstHandle const_seq;\n    seqdata_suite-&gt;PF_GetConstSequenceData(in_data-&gt;effect_ref, &amp;const_seq);\n\n    // cast const_seq to the type used when storing to sequence_data\n\n    // rest of render function code...\n}\n</code></pre>"},{"location":"effect-details/graphics-utility-suites/","title":"Graphics Utility Suites","text":"<p>After Effects exposes its internal transform and graphic utility routines through the following function suites.</p>"},{"location":"effect-details/graphics-utility-suites/#transform-worlds","title":"Transform Worlds","text":"<p>These functions combine <code>PF_EffectWorlds</code> in interesting ways. When you use these, you're using the same code After Effects does internally.</p>"},{"location":"effect-details/graphics-utility-suites/#pf_worldtransformsuite1","title":"PF_WorldTransformSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>composite_rect</code></p> <p>Composite a rectangle from one <code>PF_EffectWorld</code> into another, using one of After Effects' transfer modes.</p> <p><pre><code>PF_Err composite_rect (\n  PF_ProgPtr      effect_ref,\n  PF_Rect         *src_rect,\n  A_long          src_opacity,\n  PF_EffectWorld  *src_world,\n  A_long          dst_x,\n  A_long          dst_y,\n  PF_Field        field_rdr,\n  PF_XferMode     xfer_mode,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>field_rdr</code> can be upper, lower or both.</p> <p><code>xfer_mode</code> is one of the following:</p> <ul> <li><code>PF_Xfer_COPY</code></li> <li><code>PF_Xfer_BEHIND</code></li> <li><code>PF_Xfer_IN_FRONT</code></li> </ul> <p><code>blend</code></p> <p>Blends two images, alpha-weighted. Does not deal with different-sized sources, though the destination may be either <code>PF_EffectWorld</code>.</p> <p><pre><code>PF_Err blend (\n  PF_ProgPtr            effect_ref,\n  const PF_EffectWorld  *src1,\n  const PF_EffectWorld  *src2,\n  PF_Fixed              ratio,\n  PF_EffectWorld        *dst);\n</code></pre></p> <p><code>convolve</code></p> <p>Convolve an image with an arbitrary size kernel on each of the a, r, g, and b channels separately.</p> <p>You can specify a rectangle to convolve (for instance, the <code>extent_hint</code> from PF_EffectWorld Structure), or pass 0 to convolve the entire image.</p> <p>Do not use if the source is the destination.</p> <p>Describe the convolution using Kernel Flags.</p> <p><pre><code>PF_Err convolve(\n  PF_EffectWorld  *src,\n  const PF_Rect   *area,\n  PF_KernelFlags  flags,\n  A_long          kernel_size,\n  void            *a_kernel,\n  void            *r_kernel,\n  void            *g_kernel,\n  void            *b_kernel,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>copy</code></p> <p>Copies a region from one <code>PF_EffectWorld</code> to another, preserving alpha (unlike the macOS CopyBits).</p> <p><pre><code>PF_Err copy (\n  PF_EffectWorld  *src,\n  PF_EffectWorld  *dst,\n  PF_Rect         *src_r,\n  PF_Rect         *dst_r);\n</code></pre></p> <p><code>copy_hq</code></p> <p>A higher fidelity version of the above (using the same parameters).</p> <p><code>transfer_rect</code></p> <p>Blends using a transfer mode, with an optional mask.</p> <p><pre><code>PF_Err transfer_rect (\n  PF_ProgPtr              effect_ref,\n  PF_Quality              quality,\n  PF_ModeFlags            m_flags,\n  PF_Field                field,\n  const PF_Rect           *src_rec,\n  const PF_EffectWorld    *src_world,\n  const PF_CompositeMode  *comp_mode,\n  const PF_MaskWorld      *mask_world0,\n  A_long                  dest_x,\n  A_long                  dest_y,\n  PF_EffectWorld          *dst_world);\n</code></pre></p> <p><code>transform_world</code></p> <p>Given a <code>PF_EffectWorld</code> and a matrix (or array of matrices), transforms and blends using an After Effects transfer mode, with an optional mask.</p> <p>The matrices pointer points to a matrix array used for motion-blur.</p> <p>When is a transform not a transform? A Z-scale transform is not a transform, unless the transformed layer is a parent of other layers that do not all lie in the z=0 plane.</p> <p><pre><code>PF_Err transform_world (\n  PF_InData               *in_data,\n  PF_Quality              quality,\n  PF_ModeFlags            m_flags,\n  PF_Field                field,\n  const PF_EffectWorld    *src_world,\n  const PF_CompositeMode  *comp_mode,\n  const PF_MaskWorld      *mask_world0,\n  const PF_FloatMatrix    *matrices,\n  A_long                  num_matrices,\n  Boolean                 src2dst_matrix,\n  const PF_Rect           *dest_rect,\n  PF_EffectWorld          *dst_world);\n</code></pre></p>"},{"location":"effect-details/graphics-utility-suites/#kernel-flags","title":"Kernel Flags","text":"<p>Functions such as <code>convolve</code> or gaussian kernel work with kernels, or matrices of filter weight values. These matrices can be in any format. The kernel flags describe how the matrices should be created and used. OR together any flags you need.</p> <p>The flags relevant to given routines are documented along with the routine prototype.The first entry in the left column is always the default and has value 0.</p> <p>Kernel Flags</p> <p>Indicates</p> <p><code>PF_KernelFlag_2D</code></p> <p><code>PF_KernelFlag_1D</code></p> <p>Specifies a one or two dimensional kernel.</p> <p><code>PF_KernelFlag_UNNORMALIZED</code></p> <p><code>PF_KernelFlag_NORMALIZED</code></p> <p><code>NORMALIZED</code> equalizes the kernel; the volume under the kernel surface is the same as the volume under the covered area of pixels.</p> <p><code>PF_KernelFlag_CLAMP</code></p> <p><code>PF_KernelFlag_NO_CLAMP</code></p> <p><code>CLAMP</code> restricts values to the valid range for their data type.</p> <p><code>PF_KernelFlag_USE_LONG</code></p> <p><code>PF_KernelFlag_USE_CHAR</code></p> <p><code>PF_KernelFlag_USE_FIXED</code></p> <p><code>PF_KernelFlag_USE_UNDEFINED</code></p> <p><code>USE_LONG</code> defines the kernel as an array of longs valued from 0 to 255. <code>USE_LONG</code> is the only implemented flag.</p> <p><code>USE_CHAR</code> defines the kernel as an array of unsigned chars from 0 to 255.</p> <p><code>USE_FIXED</code> defines the kernel as an array of fixeds from 0 to 1.</p> <p><code>PF_KernelFlag_HORIZONTAL</code></p> <p><code>PF_KernelFlag_VERTICAL</code></p> <p>Specifies the direction of the convolution.</p> <p><code>PF_KernelFlag_TRANSPARENT_BORDERS</code></p> <p><code>PF_KernelFlag_REPLICATE_BORDERS</code></p> <p>Use <code>TRANSPARENT_BORDERS</code> to treat pixels off the edge as alpha zero (black).</p> <p>Use <code>REPLICATE_BORDERS</code> to replicate border pixels when sampling off the edge.</p> <p><code>REPLICATE_BORDERS</code> is not implemented and will be ignored.</p> <p><code>PF_KernelFlag_STRAIGHT_CONVOLVE</code></p> <p><code>PF_KernelFlag_ALPHA_WEIGHT_CONVOLVE</code> </p> <p>Use <code>STRAIGHT_CONVOLVE</code> to indicate straight convolution.</p> <p>Use <code>ALPHA_WEIGHT_CONVOLVE</code> to tell the convolution code to alpha-weight the contributions of pixels to the resulting convolved output. <code>ALPHA_WEIGHT_CONVOLVE</code> is not implemented and will be ignored.</p>"},{"location":"effect-details/graphics-utility-suites/#fill-em-up","title":"Fill 'Em Up!","text":"<p>The FillMatteSuite can be used to fill a <code>PF_EffectWorld</code>, either with a specific color or premultiplied with an alpha value.</p>"},{"location":"effect-details/graphics-utility-suites/#pf_fillmattesuite2","title":"PF_FillMatteSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>fill</code></p> <p>Fills a rect with a color (or, if the color pointer is null, fills with black and alpha zero).</p> <p>If the rect is null, it fills the entire image.</p> <p><pre><code>PF_Err fill (\n  PF_ProgPtr      effect_ref,\n  const PF_Pixel  *color,\n  const PF_Rect   *dst_rect,\n  PF_EffectWorld  *world);\n</code></pre></p> <p><code>fill16</code></p> <p>Same as fill, but takes a pointer to a <code>PF_Pixel16</code> color.</p> <p><code>fill_float</code></p> <p>Takes a pointer to a <code>PF_PixelFloat</code> color.</p> <p><code>premultiply</code></p> <p>Converts to (and from) r, g, and b color values pre-multiplied with black to represent the alpha channel.</p> <p>Quality independent.</p> <ul> <li><code>forward</code> is used as a boolean</li> <li><code>true</code> means convert non-premultiplied to pre-multiplied</li> <li><code>false</code> mean un-pre-multiply.</li> </ul> <p><pre><code>PF_Err premultiply (\n  A_long          forward,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>premultiply_color</code></p> <p>Converts to (and from) having r, g, and b color values premultiplied with any color to represent the alpha channel.</p> <p><pre><code>PF_Err premultiply_color (\n  PF_ProgPtr      effect_ref,\n  PF_EffectWorld  *src,\n  PF_Pixel        *color,\n  A_long          forward,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>premultiply_color16</code></p> <p>Same as above, but takes a pointer to a <code>PF_Pixel16</code> color.</p> <p><code>premultiply_color_float</code></p> <p>Takes a pointer to a <code>PF_PixelFloat</code> color.</p>"},{"location":"effect-details/graphics-utility-suites/#sampling-images","title":"Sampling Images","text":"<p>Note: areas outside the bounds of the image being sampled are treated as zero alpha. For convenience, the functions from <code>PF_Sampling8Suite1</code>, <code>PF_Sampling16Suite1</code>, and <code>PF_SamplingFloatSuite1</code> are all listed in this table.</p>"},{"location":"effect-details/graphics-utility-suites/#pf_samplingsuite-functions-multiple-suites","title":"PF_SamplingSuite Functions (Multiple Suites)","text":"<p>Function</p> <p>Purpose</p> <p><code>nn_sample</code></p> <p>Performs nearest neighbor sampling.</p> <p><pre><code>PF_Err nn_sample (\n  PF_ProgPtr       effect_ref,\n  PF_Fixed         x,\n  PF_Fixed         y,\n  const PF_SampPB  *params,\n  PF_Pixel         *dst_pixel );\n</code></pre></p> <p><code>nn_sample16</code></p> <p>Same as above, but takes a pointer to a <code>PF_Pixel16</code> <code>dst_pixel</code>.</p> <p><code>nn_sample_float</code></p> <p>Takes a pointer to a <code>PF_PixelFloat</code> <code>dst_pixel</code>.</p> <p><code>subpixel_sample</code></p> <p>Queries the appropriate alpha-weighted interpolation of colors at a non-integral point in a source image, in high quality. Nearest neighbor sampling is used in low quality.</p> <p>Because the sampling routine, if used, will typically be called many times, it is convenient to copy the function pointer out to the callbacks structure and into a register or onto the stack to speed up your inner loop.</p> <p>See the sample code for an example.</p> <p>Note</p> <p>The sampling assumes that 0,0 is the center of the top left pixel.</p> <p><pre><code>PF_Err subpixel_sample (\n  PF_ProgPtr       effect_ref,\n  PF_Fixed         x,\n  PF_Fixed         y,\n  const PF_SampPB  *params,\n  PF_Pixel         *dst_pixel);\n</code></pre></p> <p><code>subpixel_sample16</code></p> <p>Same as above, but takes a pointer to a <code>PF_Pixel16*</code> <code>dst_pixel</code>.</p> <p><code>subpixel_sample_float</code></p> <p>Takes a pointer to a <code>PF_PixelFloat*</code> <code>dst_pixel</code>.</p> <p><code>area_sample</code></p> <p>Use this to calculate the appropriate alpha weighted average of an axis-aligned non-integral rectangle of color in a source image, in high quality.</p> <p>Nearest neighbor sampling is used in low quality. Because of overflow issues, this can only average a maximum of a 256 x 256 pixel area (i.e. x and y radius &lt; 128 pixels).</p> <p>Note</p> <p>The sampling radius must be at least one in both x and y.</p> <p><pre><code>PF_Err area_sample (\n  PF_ProgPtr       effect_ref,\n  PF_Fixed         x,\n  PF_Fixed         y,\n  const PF_SampPB  *params,\n  PF_Pixel         *dst_pixel);\n</code></pre></p> <p>Note</p> <p>Areas outside the boundaries of the layer are considered the same as zero alpha, for sampling purposes.</p> <p><code>area_sample16</code></p> <p>Same as above, but takes a <code>PF_Pixel16*</code> <code>dst_pixel</code>.</p>"},{"location":"effect-details/graphics-utility-suites/#pf_batchsamplingsuite1-functions","title":"PF_BatchSamplingSuite1 Functions","text":"<p>Function</p> <p>Purpose</p> <p><code>begin_sampling</code></p> <p>Your effect is going to perform some batch sampling; After Effects will perform setup tasks to optimize your sampling.</p> <p><pre><code>PF_Err (*begin_sampling)(\n  PF_ProgPtr    effect_ref,\n  PF_Quality    qual,\n  PF_ModeFlags  mf,\n  PF_SampPB     *params);\n</code></pre></p> <p><code>end_sampling</code></p> <p>Tells After Effects you're done sampling.</p> <p><pre><code>PF_Err (*end_sampling)(\n  PF_ProgPtr    effect_ref,\n  PF_Quality    qual,\n  PF_ModeFlags  mf,\n  PF_SampPB     *params);\n</code></pre></p> <p><code>get_batch_func</code></p> <p>Obtains a pointer to After Effects' batch sampling function (highly optimized).</p> <p><pre><code>PF_Err (*get_batch_func)(\n  PF_ProgPtr          effect_ref,\n  PF_Quality          quality,\n  PF_ModeFlags        mode_flags,\n  const PF_SampPB     *params,\n  PF_BatchSampleFunc  *batch);\n</code></pre></p> <p><code>get_batch_func16</code></p> <p>Obtains a pointer to After Effects' 16-bpc batch sampling function (also highly optimized).</p> <p><pre><code>PF_Err (*get_batch_func16)(\n  PF_ProgPtr            effect_ref,\n  PF_Quality            quality,\n  PF_ModeFlags          mode_flags,\n  const PF_SampPB       *params,\n  PF_BatchSample16Func  *batch);\n</code></pre></p>"},{"location":"effect-details/graphics-utility-suites/#do-the-math-for-me","title":"Do The Math For Me","text":"<p>Along with the variety of graphics utilities, we also provide a block of ANSI standard routines so that plug-ins will not need to include other libraries to use standard functions.</p> <p>We give function pointers to a large number of math functions (trig functions, square root, logs, etc.).</p> <p>Using our suite functions provides for some (application level) error handling, and prevents problems with including different versions of multiple \"standard\" libraries.</p> <p>All functions return a double. All angles are expressed in radians, use <code>PF_RAD_PER_DEGREE</code> (a constant from AE_EffectCB.h) to convert from degrees to radians if necessary.</p>"},{"location":"effect-details/graphics-utility-suites/#pf_ansicallbacksuite1","title":"PF_ANSICallbackSuite1","text":"Function Purpose Replaces <code>acos</code> Returns the arc cosine of x. <code>PF_ACOS</code> <code>asin</code> Returns the arc sine of x. <code>PF_ASIN</code> <code>atan</code> Returns the arc tangent of x. <code>PF_ATAN</code> <code>atan2</code> Returns atan(y/x). <code>PF_ATAN2</code> <code>ceil</code> Returns the next integer above x. <code>PF_CEIL</code> <code>cos</code> Returns the cosine of x. <code>PF_COS</code> <code>exp</code> Returns e to the power of x. <code>PF_EXP</code> <code>fabs</code> Returns the absolute value of x. <code>PF_FABS</code> <code>floor</code> Returns the closest integer below x. <code>PF_FLOOR</code> <code>fmod</code> Returns x modulus y. <code>PF_FMOD</code> <code>hypot</code> Returns the hypotenuse of x and y, which is sqrt(x*x + y*y). <code>PF_HYPOT</code> <code>log</code> Returns the natural log (ln) of x. <code>PF_LOG</code> <code>log10</code> Returns the log (base 10) of x. <code>PF_LOG10</code> <code>pow</code> Returns x to the power of y. <code>PF_POW</code> <code>sin</code> Returns the sine of x. <code>PF_SIN</code> <code>sqrt</code> Returns the square root of x. <code>PF_SQRT</code> <code>tan</code> Returns the tangent of x. <code>PF_TAN</code> (while not strictly math functions, these emulate ANSI functionality) <code>sprintf</code> Emulates the C sprintf function. <code>PF_SPRINTF</code> <code>strcpy</code> Emulates the C strcpy function. <code>PF_STRCPY</code>"},{"location":"effect-details/image-buffer-management-functions/","title":"Image Buffer Management Functions","text":"<p>Use these functions to create and destroy PF_EffectWorld / PF_LayerDef, and to find out their bit-depth.</p>"},{"location":"effect-details/image-buffer-management-functions/#pf_worldsuite2","title":"PF_WorldSuite2","text":"<p>Function</p> <p>Description</p> <p><code>PF_NewWorld</code></p> <p>Creates a new <code>PF_EffectWorld</code>.</p> <p><pre><code>PF_Err PF_NewWorld(\n  PF_ProgPtr      effect_ref,\n  A_long          widthL,\n  A_long          heightL,\n  PF_Boolean      clear_pixB,\n  PF_PixelFormat  pixel_format,\n  PF_EffectWorld  *worldP);\n</code></pre></p> <p><code>PF_DisposeWorld</code></p> <p>Disposes of a <code>PF_EffectWorld</code>.</p> <p><pre><code>PF_Err PF_DisposeWorld(\n  PF_ProgPtr      effect_ref,\n  PF_EffectWorld  *worldP);\n</code></pre></p> <p><code>PF_GetPixelFormat</code></p> <p>Get the pixel format for a given <code>PF_EffectWorld</code>.</p> <p><pre><code>PF_Err PF_GetPixelFormat(\n  const PF_EffectWorld  *worldP,\n  PF_PixelFormat        *pixel_formatP);\n</code></pre></p> <p><code>pixel_formatP</code> can be:</p> <ul> <li><code>PF_PixelFormat_ARGB32</code> - standard 8-bit RGB</li> <li><code>PF_PixelFormat_ARGB64</code> - 16-bit RGB</li> <li><code>PF_PixelFormat_ARGB128</code> - 32-bit floating point RGB</li> </ul>"},{"location":"effect-details/interaction-callback-functions/","title":"Interaction Callback Functions","text":"<p>While the un-macro'd function pointers are provided in PF_InData, use the provided macros to access them. See how stringent we are about deprecating macro usage? Let's let this be our little secret.</p>"},{"location":"effect-details/interaction-callback-functions/#interaction-callbacks","title":"Interaction Callbacks","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_ADD_PARAM</code></p> <p>Enumerate your plug-in's parameters to After Effects during PF_Cmd_PARAM_SETUP, using multiple calls to this function.</p> <p>Note</p> <p>Failing to completely clear out a PF_ParamDef prior to PF_ADD_PARAM() can cause many problems.  Always use <code>AEFX_CLR_STRUCT</code> before adding parameters.</p> <p><pre><code>PF_Err PF_ADD_PARAM (\n  PF_InData       *in_data,\n  PF_ParamIndex   index,\n  PF_ParamDefPtr  def);\n</code></pre></p> <p>We provide convenience macros for specific parameter types, in Utils/ Param_Utils.h:</p> <ul> <li><code>PF_ADD_COLOR</code></li> <li><code>PF_ADD_ARBITRARY</code></li> <li><code>PF_ADD_SLIDER</code></li> <li><code>PF_ADD_FIXED</code></li> <li><code>PF_ADD_FLOAT_SLIDERX</code></li> <li><code>PF_ADD_CHECKBOXX</code></li> <li><code>PF_ADD_BUTTON</code></li> <li><code>PF_ADD_ANGLE</code></li> <li><code>PF_ADD_NULL</code></li> <li><code>PF_ADD_LAYER</code></li> <li><code>PF_ADD_255_SLIDER</code></li> <li><code>PF_ADD_PERCENT</code></li> <li><code>PF_ADD_POINT</code></li> <li><code>PF_ADD_POINT_3D</code></li> <li><code>PF_ADD_TOPICX</code></li> <li><code>PF_END_TOPIC</code></li> <li><code>PF_ADD_POPUPX</code></li> <li><code>PF_ADD_FLOAT_SLIDERX_DISABLED</code> </li> </ul> <p><code>PF_ABORT</code></p> <p>Returns non-zero if the user has cancelled; return that value to After Effects.</p> <p>Wrap your render routine in a \"while abort has not been requested\" while loop.</p> <p><pre><code>PF_Err PF_ABORT (PF_InData *in_data);\n</code></pre></p> <p><code>PF_PROGRESS</code></p> <p>Displays a progress bar during processing; current and total describe the percentage complete.</p> <p>Returns non-zero if you should suspend or abort your current processing; return that value to After Effects.</p> <p>Call once per scanline, unless your effect is very slow.</p> <p>If total is <code>0</code>, <code>PF_ABORT</code> is used instead (presenting the user with different choices).</p> <p><pre><code>PF_Err PF_PROGRESS (\n  PF_InData  *in_data,\n  A_long     current,\n  A_long     total );\n</code></pre></p> <p><code>PF_CHECKOUT_PARAM</code></p> <p>Obtains parameter values, or the source video layer, at a specified time. After Effects makes caching decisions based on the checkout state of parameters.</p> <p>Allocate a new PF_ParamDef to hold the result; those passed to the plug-in are read-only.</p> <p>If you check out a layer parameter that's set to <code>&lt;none&gt;</code>, the layer returned will be filled with zeros.</p> <p>Masks are not included with checked-out layers.</p> <p>Do not check out layer parameters during UI event handling.</p> <p><pre><code>PF_Err PF_CHECKOUT_PARAM (\n  PF_InData      *in_data,\n  PF_ParamIndex  index,\n  A_long         what_time,\n  A_long         step,\n  A_long         time_scale,\n  PF_ParamDef    *param);\n</code></pre></p> <p>If checking out the source layer, a deinterlaced frame will be returned. If you ask for the time that references the upper field, you will receive back the upper field with a filter used to generate the extra scanlines.</p> <p>For example, assuming line 0 and 2 are upper fields, and line 1 is a lower field, if you check out the upper fields, line 0 and 2 will be passed back directly from the source footage, and line 1 will be calculated by averaging lines 0 and 2.</p> <p>If you want to reassemble a full resolution source frame with both fields present, you can call <code>PF_CHECKOUT_PARAM</code> twice to get both fields, and reinterlace the footage.</p> <p>What happens when checking out a layer at a time that is not frame-aligned? All items have essentially infinite time resolution, so when asking for a time at any value, AE renders the item at that time.</p> <p>For a composition, that involves interpolating all of the keyframes values to the subframe time.</p> <p>For footage, AE returns a full image that corresponds to the time asked, which is the nearest-to-left frame.</p> <p>If the user has frame-blending on that layer, an interpolated frame is generated.</p> <p><code>PF_CHECKIN_PARAM</code></p> <p>Balance every <code>PF_CHECKOUT_PARAM</code>, with a <code>PF_CHECKIN_PARAM</code>.</p> <p>Not doing so causes dismal performance and leaks memory. Once checked in, the fields in the PF_ParamDef will no longer be valid.</p> <p><pre><code>PF_Err PF_CHECKIN_PARAM (\n  PF_InData    *in_data,\n  PF_ParamDef  *param );\n</code></pre></p> <p><code>PF_REGISTER_UI</code></p> <p>Register a custom user interface element. See Effect UI &amp; Events. Note: The PF_UIAlignment flags are not honored.</p> <p><pre><code>PF_Err PF_REGISTER_UI (\n  PF_InData        *in_data,\n  PF_CustomUIInfo  *cust_info );\n</code></pre></p> <p><code>PF_CHECKOUT_LAYER_AUDIO</code></p> <p>Given an index, start_time, duration, time_scale, rate, bytes_per_sample, num_channels, and fmt_signed, After Effects will return a corresponding PF_LayerAudio.</p> <p>After Effects will perform any necessary resampling.</p> <p><pre><code>PF_Err PF_CHECKOUT_LAYER_AUDIO (\n  PF_InData      *in_data,\n  PF_ParamIndex  index,\n  A_long         start_time,\n  A_long         duration,\n  A_u_long       time_scale,\n  PF_UFixed      rate,\n  A_long         bytes_per_sample,\n  A_long         num_channels,\n  A_long         fmt_signed,\n  PF_LayerAudio  *audio);\n</code></pre></p> <p><code>PF_CHECKIN_LAYER_AUDIO</code></p> <p>Balance all calls to PF_CHECKOUT_LAYER_AUDIO, regardless of error conditions, with matching calls to <code>PF_CHECKIN_LAYER_AUDIO</code>.</p> <p><pre><code>PF_Err PF_CHECKIN_LAYER_AUDIO (\n  PF_InData      *in_data,\n  PF_LayerAudio  audio );\n</code></pre></p> <p><code>PF_GET_AUDIO_DATA</code></p> <p>Returns information about the PF_LayerAudio.</p> <p>All the parameters after audio are optional; pass 0 for any value in which you aren't interested. rate0 is unsigned, and fmt_signed0 should be non-zero for signed, zero for unsigned.</p> <p>This callback is for visual effects that read audio information. To alter audio, write an audio filter.</p> <p><pre><code>PF_Err PF_GET_AUDIO_DATA (\n  PF_InData        *in_data,\n  PF_LayerAudio    audio,\n  PF_SndSamplePtr  *data0,\n  A_long           *num_samples0,\n  PF_UFixed        *rate0,\n  A_long           *bytes_per_sample0,\n  A_long           *num_channels0,\n  A_long           *fmt_signed0);\n</code></pre></p>"},{"location":"effect-details/interaction-callback-functions/#parameter-checkout-vs-param-zero","title":"Parameter Checkout vs. Param Zero","text":"<p>Effects are applied to an image in order from 0 to n within the Effect Control (and Composition) panel.</p> <p>The output from effect[n-1] is the input (param[0]) of effect[n].</p> <p>On the other hand, when a normal effect checks out a layer using <code>PF_CHECKOUT_PARAM</code>, it receives the raw (un-effected) source layer, regardless of its order.</p> <p>However, when a SmartFX effect checks out its input parameter (params[0]), previous effects are applied.</p>"},{"location":"effect-details/interaction-callback-functions/#parameter-checkout-behavior","title":"Parameter Checkout Behavior","text":"<p>Regardless of whether the layer in and out point have been trimmed, you will get valid frames from the start of the source footage to the end, and then transparent before and after that.</p> <p>Layer params with a lower frame rate than the composition in which they're checked out are only refreshed as often as necessitated by the lower frame rate.</p> <p>A 10fps layer checked out in a 30fps composition will only need to be refreshed every third frame. if your effect wants to change it's output every frame despite the static input layer, you'd need to set PF_Outflag_NON_PARAM_VARY.</p> <p>When an effect checks out a continuously-rasterized Adobe Illustrator layer, After Effects renders the Illustrator layer with geometrics applied, in a composition-sized buffer.</p>"},{"location":"effect-details/interaction-callback-functions/#parameter-checkout-and-re-entrancy","title":"Parameter Checkout And Re-Entrancy","text":"<p>Plug-ins that check out layers at different times can generate re-entrant behavior. Consider an instance where the Checkout sample plug-in is applied to a layer in composition B, and B is pre-composed into composition A where Checkout is applied to it as well.</p> <p>When composition A is rendered, Checkout[A] will be sent PF_Cmd_RENDER, during which it checks out a layer (composition B) from a time other than the current time.</p> <p>In order to provide that checked-out layer, After Effects sends PF_Cmd_RENDER to <code>Checkout[B]</code>.</p> <p>Presto, recursion!</p> <p>If you're going to check out parameters, your effects must handle re-entrant render requests appropriately.</p> <p>Don't use globals, or read or write static variables...but you weren't going to anyway, right?</p>"},{"location":"effect-details/interaction-callback-functions/#progress-during-iteration","title":"Progress During Iteration","text":"<p>After Effects strives to be as responsive as possible to user interaction, even while rendering. Do the same through appropriate use of PF_ITERATE(). For example, perhaps you're using a PF_ITERATE'd function three times during your response to <code>PF_Cmd_RENDER</code>.</p> <p>In this case, you'd start off with:</p> <pre><code>lines_per_iterateL = in_data&gt;extent_hint.top - in_data&gt;extent_hint.bottom;\ntotal_linesL = 3 * lines_per_iterateL;\nlines_so_farL = 0;\n</code></pre> <p>After each iteration, you'd add the already-completed lines to the current position:</p> <pre><code>suites.iterate8suite()&gt;iterate( lines_so_farL,\n                                total_linesL,\n                                input_worldP,\n                                &amp;output&gt;extent_hint,\n                                refcon,\n                                WhizBangPreProcessFun,\n                                output_worldP);\n\nlines_so_farL += lines_per_iterateL;\n\nERR(PF_PROGRESS(lines_so_farL, total_linesL));\n\nsuites.iterate8suite()&gt;iterate( lines_so_farL,\n                                total_linesL,\n                                input_worldP,\n                                &amp;output&gt;extent_hint,\n                                refcon,\n                                WhizBangRenderFunc,\n                                output_worldP);\n\nlines_so_far += lines_per_iterateL;\n\nERR(PF_PROGRESS(lines_so_farL, total_linesL));\n\nsuites.iterate8suite()&gt;iterate( lines_so_farL,\n                                total_linesL,\n                                input_worldP,\n                                &amp;output&gt;extent_hint,\n                                refcon,\n                                WhizBangPostProcessFunc,\n                                output_worldP);\n\nERR(PF_PROGRESS(lines_so_farL, total_linesL));\n</code></pre>"},{"location":"effect-details/iteration-suites/","title":"Iteration Suites","text":"<p>Effects often iterate over all pixels in an image, filtering each one. By taking advantage of After Effects' iteration suites, you make it possible for After Effects to sub-allocate your task to as many processors are present, taking advantage of hardware-specific acceleration.</p> <p>After Effects will also manage progress reporting and user cancellation automatically.</p> <p>Use these suites! Make sure the pixel processing functions you pass to these iterator callbacks are re-entrant.</p> <p>Note</p> <p>The October 2021 SDK update increases the number of concurrent iterate threads up to the available system CPU cores instead of the previous hard-coded limit of 32.</p>"},{"location":"effect-details/iteration-suites/#pf_iterate8suite1-pf_iterate16suite1-pf_iteratefloatsuite1","title":"PF_Iterate8Suite1, PF_Iterate16Suite1, PF_IterateFloatSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>iterate</code></p> <p>Iterates across pixels from a source image, alters them, and populates a destination image.</p> <p>You may specify a rectangular region of pixels across which to iterate; if you don't, After Effects will iterate over every overlapping pixel.</p> <p>You give a refcon, and the function is invoked with that refcon, plus the x and y coordinates of the current pixel, plus pointers to that pixel in the source and destination images.</p> <p>If you pass a NULL source, it will iterate over the dst. This function is quality independent.</p> <p>Don't depend upon the pixels being traversed in any particular order.</p> <p>The image may be subset to different CPUs, so consider all the parameters (except dst) to be read-only while After Effects is processing.</p> <p>This callback automatically includes progress and abort checking, so don't do so in your pixel function.</p> <p><pre><code>iterate(\n  PF_InData       *in_data,\n  A_long          progress_base,\n  A_long          progress_final,\n  PF_EffectWorld  *src,\n  const PF_Rect   *area,\n  void            *refcon,\n  PF_Err (*pix_fn)(\n    void      *refcon,\n    A_long    x,\n    A_long    y,\n    PF_Pixel  *in,\n    PF_Pixel  *out),\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>iterate_origin</code></p> <p>Lets you specify an offset from the input into the output.</p> <p>For example, if your output buffer is smaller than your input buffer, pass <code>(in_- data&gt;output_origin_x, in_data&gt;output_origin_y)</code> as the origin, and NULL for area, and this function will offset the src pixel pointer appropriately for your pixel function.</p> <p><pre><code>iterate_origin(\n  PF_InData       *in_data,\n  A_long          progress_base,\n  A_long          progress_final,\n  PF_EffectWorld  *src,\n  const PF_Rect   *area,\n  const PF_Point  *origin,\n  void            *refcon,\n  PF_Err (*pix_fn)(\n    void      *refcon,\n    A_long    x,\n    A_long    y,\n    PF_Pixel  *in,\n    PF_Pixel  *out),\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>iterate_lut</code></p> <p><code>PF_Iterate8Suite</code> only. Allows a Look-Up Table (LUT) to be passed for iteration; you can pass the same or different LUTs for each color channel.</p> <p>If no LUT is passed, an identity LUT is used.</p> <p><pre><code>iterate_lut(\n  PF_InData       *in_data,\n  A_long          prog_base,\n  A_long          prog_final,\n  PF_EffectWorld  *src,\n  const PF_Rect   *area,\n  A_u_char        *a_lut0,\n  A_u_char        *r_lut0,\n  A_u_char        *g_lut0,\n  A_u_char        *b_lut0,\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>iterate_origin_non_clip_src</code></p> <p>Allows for iteration across pixels outside the intersection of the source and destination layers. For these pixels, you will be passed a <code>PF_Pixel</code> with values {0,0,0,0}.</p> <p><pre><code>iterate_origin_non_clip_src(\n  PF_InData       *in_data,\n  A_long          progress_base,\n  A_long          progress_final,\n  PF_EffectWorld  *src,\n  const PF_Rect   *area,\n  const PF_Point  *origin,\n  void            *refcon,\n  PF_Err (*pix_fn)(\n    void      *refcon,\n    A_long    x,\n    A_long    y,\n    PF_Pixel  *in,\n    PF_Pixel  *out),\n  PF_EffectWorld  *dst);\n</code></pre></p> <p><code>iterate_generic</code></p> <p><code>PF_Iterate8Suite</code> only. If you want to do something once per available CPU, this is the function to use (pass <code>PF_Iterations_ONCE_PER_PROCESSOR</code> for <code>iterationsL</code>).</p> <p>Only call abort and progress functions from thread index 0.</p> <p>Note</p> <p>You can iterate over more than pixels. Internally, we use it for row-based image processing, and for once-per-entity updates of complex sequence data.</p> <p><pre><code>iterate_generic(\n  A_long iterationsL,\n  void   *refconPV,\n  PF_Err (*fn_func)(\n    void    *refconPV,\n    A_long  thread_idxL,\n    A_long  i,\n    A_long  itrtL));\n</code></pre></p>"},{"location":"effect-details/memory-allocation/","title":"Memory Allocation","text":"<p>Use After Effects for any memory allocations of significant size. For small allocations, you can use new and delete, but this is the exception, not the rule. In low-memory conditions (such as during RAM preview), it's very important that plug-ins deal gracefully with out-of-memory conditions, and not compete with After Effects for OS memory. By using our memory allocation functions, After Effects can know when to free cached images, to avoid memory swapping. Failing to use our functions for sizable allocations can cause lock-ups, crashes, and tech support calls. Don't do that.</p> <p>If you're wrapping existing C++ classes, create a base class that implements new and delete for that class and derive from it. To overload the STL, we don't recommend you overload global new and delete. Instead provide an allocator as part of the template definition.</p> <p>Handles passed to you by After Effects are locked for you before you're called, and unlocked once you return.</p>"},{"location":"effect-details/memory-allocation/#pf_handlesuite1","title":"PF_HandleSuite1","text":"<p>Function</p> <p>Purpose</p> <p>Replaces</p> <p><code>host_new_handle</code></p> <p>Allocates a new handle.</p> <p><pre><code>PF_Handle (*host_new_handle)(\n  A_HandleSize size);\n</code></pre></p> <p><code>PF_NEW_HANDLE</code></p> <p><code>host_lock_handle</code></p> <p>Locks a handle.</p> <p><pre><code>void (*host_lock_handle)(\n  PF_Handle pf_handle);\n</code></pre></p> <p><code>PF_LOCK_HANDLE</code></p> <p><code>host_unlock_handle</code></p> <p>Unlocks a handle.</p> <p><pre><code>void (*host_unlock_handle)(\n  PF_Handle pf_handle);\n</code></pre></p> <p><code>PF_UNLOCK_HANDLE</code></p> <p><code>host_dispose_handle</code></p> <p>Frees a handle.</p> <p><pre><code>void (*host_dispose_handle)(\n  PF_Handle pf_handle);\n</code></pre></p> <p><code>PF_DISPOSE_HANDLE</code></p> <p><code>host_get_handle_size</code></p> <p>Returns the size, in bytes, of the reallocatable block whose handle is passed in.</p> <p><pre><code>A_HandleSize (*host_get_handle_size)(\n  PF_Handle pf_handle);\n</code></pre></p> <p><code>PF_GET_HANDLE_SIZE</code></p> <p><code>host_resize_handle</code></p> <p>Resizes a handle.</p> <p><pre><code>PF_Err (*host_resize_handle)(\n  A_HandleSize new_sizeL, PF_Handle *handlePH);\n</code></pre></p> <p><code>PF_RESIZE_HANDLE</code></p>"},{"location":"effect-details/motion-blur/","title":"Motion Blur","text":"<p>Effects handle their own motion blur, using PF_InData&gt;shutter_angle along with PF_InData&gt;shutter_phase.</p> <p>The plug-in must set PF_OutFlag_I_USE_SHUTTER_ANGLE so After Effects knows it needs this information.</p> <p>They must check out their own parameters at other times to examine their change over the shutter interval.</p> <p>If the plug-in checks out parameters outside this interval, set PF_OutFlag_WIDE_TIME_INPUT.</p> <p>Doing so allows After Effects to compare the parameters within the sampling interval, and determine if they've changed.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/","title":"Multi-Frame Rendering in AE","text":"<p>In order to take advantage of modern hardware with more CPU cores and threads, After Effects 2022 and above now supports Multi-Frame Rendering. Multi-Frame rendering (MFR) allows multiple frames to be rendered concurrently thereby speeding up rendering and export of AE compositions.</p> <p>Third-party effects can enable support of Multi-Frame Rendering through the AE Effects SDK by setting the following PF_OutFlag:</p> <pre><code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING\n</code></pre> <p>This flag indicates the effect supports rendering on multiple threads concurrently. Single or multiple applications of this effect on a layer can be called to render at the same time on multiple threads. Effects must be thread-safe before this flag is set. Please see the What does it mean for an effect to be thread-safe? section below for more information.</p> <p>Note</p> <p>When After Effects uses Multi-Frame Rendering, an effect that is not thread-safe and does not set this flag will force each render thread to enter and exit the effect code one thread at a time. This will significantly reduce the performance improvements that MFR provides and as such a warning icon will be shown in the Effects Control Window alongside the effect to warn the user of the performance impact.</p> <p>For effects that require writing to sequence_data during Render, a flag is available for backwards compatibility:</p> <pre><code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER\n</code></pre> <p>Each rendering thread will have its own instance of sequence_data that is not shared nor synchronized with other rendering threads. If the data stored in sequence_data is time-consuming to compute, the new Compute Cache For Multi-Frame Rendering should be utilized.</p> <p>Note</p> <p>Use of the <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> flag requires compiling against the March 2021 SDK or later.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#multi-frame-rendering-effect-updates-with-march-2021-sdk","title":"Multi-Frame Rendering Effect Updates with March 2021 SDK","text":"<p>The March 2021 SDK introduces new <code>sequence_data</code> behavior that is enabled starting with AE beta builds 22.0x6 (released on June 29th 2021). Any effects compiled with the June 2020 SDK must be recompiled with the March 2021 SDK to support Multi-Frame Rendering. The effects must also report to AE that they were compiled with at least version 13.25 though it is recommended to use the SDK constants PF_AE_PLUG_IN_VERSION and PF_AE_PLUG_IN_SUBVERS to automatically set the associated SDK.</p> <p>The table below outlines the changes an effect will need to make to support the new behavior:</p> <p>MFR &amp; Sequence Data Usage</p> <p>Changes Needed with March 2021 SDK</p> <p>Plugin does not set PF_OutFlag2_SUPPORTS_THREADED_RENDERING</p> <p>No changes needed. Effect and sequence_data will continue to work as it did in the past.</p> <p>Plugin sets PF_OutFlag2_SUPPORTS_THREADED_RENDERING but neither reads nor writes to sequence_data during Render</p> <p>Recompile the plugin with the March 2021 SDK, no other code changes are required.</p> <p>If the plugin is not compiled with the March 2021 SDK, the plugin will stop utilizing MFR starting with AE 22.0x6.</p> <p>Plugin sets PF_OutFlag2_SUPPORTS_THREADED_RENDERING but only reads sequence_data during Render</p> <p>Recompile the plugin with the March 2021 SDK, update reading sequence_data via <code>PF_EffectSequenceDataSuite1</code> for thread-safe access. See Accessing sequence_data at Render Time with Multi-Frame Rendering for more information.</p> <p>Plugin sets PF_OutFlag2_SUPPORTS_THREADED_RENDERING and reads and writes to sequence_data during Render</p> <p>Recompile the plugin with the March 2021 SDK and modify the plugin to:</p> <ol> <li>Utilize the Compute Cache API for thread-safe cache access instead of reading/writing to sequence_data directly.  See Compute Cache For Multi-Frame Rendering for more information. AND / OR</li> <li>Add the <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> to the effect to restore direct read/write access to sequence_data.</li> </ol> <p>Note</p> <p>Effects compiled with the March 2021 SDK and using the PF_OutFlag2_SUPPORTS_THREADED_RENDERING flag and, optionally, the PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER flag will work with After Effects beta builds starting with 18.0 when the <code>PF_EffectSequeceDataSuite1</code> was introduced. Check for the presence of this suite if you need to support both sequence_data behaviors.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#implications-to-command-selectors-with-multi-frame-rendering","title":"Implications to Command Selectors with Multi-Frame Rendering","text":"<p>UI selectors are still sent on the main thread, however <code>PF_Cmd_SEQUENCE_SETUP</code>, <code>PF_Cmd_SEQUENCE_RESETUP</code>, <code>PF_Cmd_SEQUENCE_SETDOWN</code>, <code>PF_Cmd_SMART_PRE_RENDER</code>, <code>PF_Cmd_RENDER</code> and <code>PF_Cmd_SMART_RENDER</code> may be sent on multiple threads at the same time as the UI selectors are being handled so all of these selectors must be thread safe.</p> <p><code>PF_Cmd_GLOBAL_SETUP</code> and <code>PF_Cmd_GLOBAL_SETDOWN</code> selectors will only be sent on the main thread and will not be sent at the same time as any other selectors.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#sequence-data-in-multi-frame-rendering","title":"Sequence Data in Multi-Frame rendering","text":"<p>The <code>sequence_data</code> object and related Sequence Selectors have been used over the years to provide a way to store data during the effect's lifetime. Multi-Frame Rendering introduces some changes to be aware of:</p> <p>Changes as of June 2020</p> <ul> <li>Multi-Frame rendering requires that After Effects marshal <code>sequence_data</code> to the render threads. In order to make this efficient for effects with <code>sequence_data</code> that require flattening with the <code>PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING</code> flag, these effects must now also set the <code>PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA</code> flag.</li> </ul> <p>Note</p> <p>In a future version of After Effects, the requirement to set the <code>PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA</code> flag and handle the associated selector in the plugin will be enforced. A warning dialog will be added on load of any effect that does not meet this requirement.</p> <p>Changes as of March 2021</p> <ul> <li>The <code>sequence_data</code> object is now const when read at Render time and should be accessed through the <code>PF_EffectSequenceDataSuite</code> interface.</li> <li>Writing to <code>seqeunce_data</code> at render time is disabled by default and results will be undefined if <code>sequence_data</code> is attempted to be written to at render time.</li> <li>If an effect must write to sequence_data at render time, it must set the <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> flag which will tell After Effects to allow writes to <code>sequence_data</code> but it will be at the expense of performance. The <code>sequence_data</code> object will be duplicated to each render thread when the render begins, and each render thread will have its own independent copy of <code>sequence_data</code> to manage for the lifetime of the render. For performance reasons, it is preferred that the Compute Cache For Multi-Frame Rendering is utilized for writing any data required by the effect.</li> </ul>"},{"location":"effect-details/multi-frame-rendering-in-ae/#compute-cache-for-multi-frame-rendering","title":"Compute Cache For Multi-Frame Rendering","text":"<p>The Compute Cache provides a thread-safe cache as a replacement or supplement to Sequence Data where effects can compute, store and read data before or during Render.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#when-would-you-use-the-compute-cache","title":"When would you use the Compute Cache?","text":"<ul> <li>You should use the Compute Cache if your effect uses <code>sequence_data</code> and needs to write to or update <code>sequence_data</code> during Render, especially if the computation of needed data is time-consuming to calculate.</li> <li>Without the Compute Cache, the effect will need to add the <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> flag which will create unique copies of sequence_data per render thread. Each render thread may then need to perform the time-consuming calculations independently and won't be able to share the results between the render threads.</li> <li>By using the Compute Cache, render threads can share the task of computing the data and reap the benefits of already computed data.</li> <li>The Compute Cache API supports both single and multi-checkout computation tasks depending upon the needs of the effect. See the Compute Cache API documentation for more information.</li> </ul>"},{"location":"effect-details/multi-frame-rendering-in-ae/#how-do-i-enable-the-compute-cache","title":"How do I enable the Compute Cache?","text":"<p>The Compute Cache API is available starting in the March 2021 SDK and the suite is enabled by default in After Effects 2022 and above builds.</p> <p>See the Compute Cache API documentation for implementation details and sample code.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#what-does-it-mean-for-an-effect-to-be-thread-safe","title":"What does it mean for an effect to be thread-safe?","text":"<p>An effect is thread-safe when the implementation and shared data is guaranteed to be free of race conditions and is always in a correct state when accessed concurrently.</p> <p>To be more specific, the effect:</p> <ol> <li>Has no static or global variables OR, has static or global variables that are free of race conditions.</li> <li>Does not write to <code>in_data-&gt;global_data</code> at render time. Reading can be done. Write in <code>PF_Cmd_GLOBAL_SETUP</code> and <code>PF_Cmd_GLOBAL_SETDOWN</code> only.</li> <li>Does not write to <code>in_data-&gt;sequence_data</code> at render time or during <code>PF_Cmd_UPDATE_PARAMS_UI</code> event. Reading can be done via the PF_EffectSequenceDataSuite interface.</li> </ol> <p>Note</p> <p>If an effect uses any blocking synchronization mechanisms, such as mutexes or gates, these must not be held when calling back into the host. Common calls would be when using a suite or making a checkout call. Failing to do so will very likely result in deadlocks.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#how-to-locate-the-static-and-global-variables-in-your-effects","title":"How to locate the static and global variables in your effects","text":"<p>To help you locate the static and global variables in your effect, we've developed a Static Analyzer tool for you to use. You can find the tool in this Git Repo: https://github.com/adobe/ae-plugin-thread-safety</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#on-macos","title":"On MacOS","text":"<ol> <li>Clone/Download the Git Repo at the URL provided above</li> <li>Find the bash script <code>check_symbols_for_thread_safety.sh</code> in the Mac folder</li> <li>Navigate inside the package content of a plugin or effect and locate the binary files. (For example, the Curves.plugin has its binary file here: <code>/Applications/Adobe After Effects [your AE version]/Plug-ins/Effects/Curves.plugin/Contents/MacOS/Curves</code>)</li> <li>To analyze the binary, run:     <pre><code>check_symbols_for_thread_safety.sh [Binary location]\nFor example, check_symbols_for_thread_safety.sh /Applications/Adobe After Effects [your AE version]/Plug-ins/Effects/Curves.plugin/Contents/MacOS/Curves)\n</code></pre></li> <li>You will see output from the tool in this format:     <pre><code>[symbol type]; [symbol name]\n</code></pre></li> <li><code>[symbol type]</code> is an one case-sensitive letter that indicates the type of the variable. You can find all the type information here: https://linux.die.net/man/1/nm</li> <li>Here is an example of the output:     <pre><code>b; Deform::FindSilEdges()::new_kInfinite\n</code></pre><ul> <li><code>b</code> shows this symbol is in the uninitialized data section, which indicates it might be a static variable.</li> <li><code>Deform::FindSilEdges()::new_kInfinite</code> is the symbol name where <code>Deform</code> is name of the namespace that the variable is located at.</li> <li><code>FindSilEdges()</code> is the function name the variable is in.</li> <li><code>new_kInfinite</code> is the actual variable name. Namespace and function names might not be shown based on where the variable is.</li> </ul> </li> <li>Search for each symbol in your code, fix it (see here on how) and repeat for every binary file in your solution</li> </ol>"},{"location":"effect-details/multi-frame-rendering-in-ae/#on-windows","title":"On Windows","text":""},{"location":"effect-details/multi-frame-rendering-in-ae/#preparation","title":"Preparation","text":"<ol> <li>In order to run this tool, you need a working installation of Visual Studio</li> <li>Clone/Download the Git Repo at the URL provided above</li> <li>Find the <code>register_msdia.cmd</code> script in the Win folder</li> <li>Search for \"x64 Native Tools Command Prompt for VS....\" from the Start Menu</li> <li>Right click -&gt; Run as an Administrator</li> <li>In the terminal, <code>cd</code> to the directory where your <code>register_msdia.cmd</code> is located at</li> <li>Run <code>.\\register_msdia.cmd</code></li> <li>This script will register the DIA SDK and some other required dependencies for you</li> <li>The Static Analyzer should be ready to work</li> </ol>"},{"location":"effect-details/multi-frame-rendering-in-ae/#using-the-windows-static-analyzer","title":"Using the Windows Static Analyzer","text":"<ol> <li>Find the executable <code>CheckThreadSafeSymbols.exe</code> in the Win folder</li> <li>Compile your effect in Debug mode and find its .pdb file</li> <li>You should also find some .obj files in the same build directory if you haven't modified your project build settings</li> <li>You have two options on what to scan through: binaries or source files, using <code>-objfile</code> or <code>-source</code> flag.<ul> <li>Note: You can get the same symbols out of either option.<ul> <li>Use the <code>-source</code> option if you don't know exactly what binaries your source code is ending up in, or if you'd like to keep track of thread safety on a per-source-file basis.</li> <li>Use the <code>-objfile</code> option if you want more fine-grained control over what parts of your project you're scanning.</li> </ul> </li> </ul> </li> <li>To analyze the symbols in an object file, run:     <pre><code>CheckThreadSafeSymbols.exe -objfile [absolute path to the binary you want analyzed] [absolute path to .pdb]\n</code></pre></li> <li>To analyze the symbols in a source file, run:     <pre><code>CheckThreadSafeSymbols.exe -source [absolute path to the source file you want analyzed] [absolute path to .pdb]\n</code></pre></li> <li>Global variables aren't limited to the scope of one file or binary in pdbs, so you'll have to check over the list of all project globals without filtering. Use the -g output to get a list of all of them:     <pre><code>CheckThreadSafeSymbols.exe -g [absolute path to .pdb]\n</code></pre></li> <li>If you're unsure of what binaries your effect is outputting, the tool can also output a (noisy) list of binaries, along with the source files each pulls data from. Files you've changed are likely to be near the top. To see the list, run:     <pre><code>CheckThreadSafeSymbols.exe -sf [absolute path to .pdb]\n</code></pre></li> <li>Output symbols will take the form:     <pre><code>[Symbol name], [Symbol type], [Datakind], ([Section type of data location], [Binary Address][Binary Address Offset])\n</code></pre></li> <li>Here is an example of the output:     <pre><code>menuBuf, Type: char[0x1000], File Static, (static, [0008FCD0][0003:00001CD0])\n</code></pre><ul> <li><code>menuBuf</code> is the actual variable name.</li> <li><code>Type: char[0x1000]</code> shows what type of the variable it is. The data here is a <code>char</code>.</li> <li><code>File Static</code> shows what kind of that data it is. The data here is a File-scoped static variable. You can find all the data kinds and what they mean on this page https://docs.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/datakind?view=vs-2019</li> <li><code>static</code> shows that the data is in the static section of the memory.</li> <li><code>[0008FCD0][0003:00001CD0]</code> shows the Binary Address and the Binary Address offset of the data.</li> </ul> </li> <li>Search for each symbol in your code, fix it (see here on how) and repeat for every binary/source file in your solution</li> </ol>"},{"location":"effect-details/multi-frame-rendering-in-ae/#what-to-do-if-you-have-static-and-globals-in-your-effects","title":"What to do if you have static and globals in your effects","text":"<p>When you see a static or global variable, it would be the best to make it a local variable if possible. But what if that variable has to be static or global?</p> <p>Here are some standard approaches for treating statics or globals:</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#could-the-data-be-easily-passed-between-functions-instead-without-a-change-in-behavior","title":"Could the data be easily passed between functions instead without a change in behavior?","text":"<pre><code>// Example of a non Thread-Safe code\nstatic int should_just_be_local;\n\nvoid UseState() {\n    DoComputation(should_just_be_local);\n}\n\nvoid SetAndUseState() {\n    should_just_be_local = DoComputation();\n    UseState();\n}\n</code></pre> <p>Either add it to a struct or expand function arguments to include it:</p> <pre><code>// We can fix the above code by passing the should_just_be_local variable through function arguments\n\nvoid UseState(int should_just_be_local) {\n    DoComputation(should_just_be_local);\n}\n\nvoid SetAndUseState() {\n    int should_just_be_local = DoComputation();\n    UseState(should_just_be_local);\n}\n</code></pre>"},{"location":"effect-details/multi-frame-rendering-in-ae/#could-the-data-be-initialized-before-you-execute-your-code-eg-a-lookup-table-a-const-variable","title":"Could the data be initialized before you execute your code (e.g. a lookup table, a const variable)?","text":"<pre><code>// Example of a non Thread-Safe code\n\n// Many places in the code need to read this table but won't be writing to it\nstatic int state_with_initializer[64];\nstatic bool state_was_initialized = false;\n\nvoid InitializeState() {\n    for (int i = 0; i &lt; 64; ++i) {\n        state_with_initializer[i] = i * i;\n    }\n    state_was_initialized = true;\n}\n\nvoid Main() {\n    if (!state_was_initialized) {\n        InitializeState();\n    }\n    DoComputation(state_with_initializer);\n}\n</code></pre> <p>Make it <code>const</code> or replace it with a macro:</p> <pre><code>std::array&lt;int, 64&gt; InitializeState() {\n    std::array&lt;int, 64&gt; temp;\n\n    for (int i = 0; i &lt; 64; ++i) {\n        temp[i] = i * i;\n    }\n    return temp;\n}\n\n// We can fix the above code by making this table a const and initialize it before using it\nstatic const std::array&lt;int, 64&gt; state_with_initializer = InitializeState();\n\nvoid Main() {\n    DoComputation(state_with_initializer);\n}\n</code></pre>"},{"location":"effect-details/multi-frame-rendering-in-ae/#is-the-data-initialized-once-at-runtime-based-on-data-that-doesnt-change-on-subsequent-renders","title":"Is the data initialized once at runtime based on data that doesn't change on subsequent renders?","text":"<pre><code>// Example of a non Thread-Safe code\nstatic int depends_on_unchanging_runtime_state;\n\nvoid UseState() {\n    DoComputation(depends_on_unchanging_runtime_state);\n}\n\nvoid SetAndUseState() {\n    depends_on_unchanging_runtime_state = DoComputationThatNeedsStateOnlyOnce();\n    UseState();\n}\n</code></pre> <p>Double-check that this state isn't known before your code executes (case 2), but if you have to initialize at runtime use a const static local. (Note that thread-safe initialization of static local objects is part of the C++ spec):</p> <pre><code>void UseState(int depends_on_unchanging_runtime_state) {\n    DoComputation(depends_on_unchanging_runtime_state);\n}\n\nvoid SetAndUseState() {\n    // We can fix the above code by making the variable a const static local\n    static const int depends_on_unchanging_runtime_state = DoComputationThatNeedsStateOnlyOnce();\n\n    UseState(depends_on_unchanging_runtime_state);\n}\n</code></pre>"},{"location":"effect-details/multi-frame-rendering-in-ae/#the-data-has-to-stay-staticglobal-not-being-a-const-but-each-render-thread-can-have-its-own-copy-of-the-data","title":"The data has to stay static/global not being a const. But each render thread can have its own copy of the data.","text":"<pre><code>// This variable has to be static and not a const\nstatic int this_thread_needs_access;\n\nvoid SetState(int new_state) {\n    this_thread_needs_access = new_state;\n}\n\nvoid UseState() {\n    DoComputation(this_thread_needs_access);\n}\n</code></pre> <p>Just make the variable thread_local:</p> <pre><code>// Make this variable a thread_local variable\nthread_local static int this_thread_needs_access;\n\nvoid SetState(int new_state) {\n    this_thread_needs_access = new_state;\n}\n\nvoid UseState() {\n    DoComputation(this_thread_needs_access);\n}\n</code></pre>"},{"location":"effect-details/multi-frame-rendering-in-ae/#the-data-has-to-stay-staticglobal-not-being-a-const-and-each-thread-needs-to-read-and-write-from-the-most-up-to-date-state-rare","title":"The data has to stay static/global not being a const and each thread needs to read and write from the most up-to-date state. (rare)","text":"<pre><code>// This variable has to be static and not a const\n// It also needs to be shared across several threads\nstatic int every_thread_needs_latest_state;\n\nvoid SetState(int new_state) {\n    every_thread_needs_latest_state = new_state;\n}\n\nvoid UseState() {\n    DoComputation(every_thread_needs_latest_state);\n}\n</code></pre> <p>In this case, protect access with a mutex:</p> <pre><code>// Add a mutex (lock)\nstatic std::mutex ex_lock;\n\nstatic int every_thread_needs_latest_state;\n\nvoid SetState(int new_state) {\n    {\n        // Protect the access with the mutex (lock)\n        std::lock_guard&lt;std::mutex&gt; lock(ex_lock);\n        every_thread_needs_latest_state = new_state;\n    }\n}\n\nvoid UseState() {\n    int state_capture;\n    {\n        // Protect the access with the mutex (lock)\n        std::lock_guard&lt;std::mutex&gt; lock(ex_lock);\n        state_capture = every_thread_needs_latest_state;\n    }\n    DoComputation(state_capture);\n}\n</code></pre> <p>Note</p> <p>The above examples are the common cases we've seen in our effects. You can always come up other methods to treat your statics and globals that best suits your needs.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#setting-an-effect-as-thread-safe","title":"Setting an Effect as Thread-safe","text":"<ul> <li>Set the <code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING</code> flag in GlobalSetup to tell After Effects that your effect is Thread-Safe and supports Multi-Frame Rendering.</li> <li>If required, add the <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> to allow sequence_data to be written at the Render stage.</li> <li>Update the <code>AE_Effect_Global_OutFlags_2</code> magic number. Launch AE with your effect without changing the magic number for the first time, apply your effect and AE will give you the correct number to put in.</li> <li>If you are using the <code>PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING</code> flag, remember to also set the <code>PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA</code> flag.</li> </ul>"},{"location":"effect-details/multi-frame-rendering-in-ae/#how-to-test-whether-an-effect-is-thread-safe","title":"How to test whether an effect is Thread-Safe","text":"<p>Once you have completed the above steps to make your effect Thread-Safe, you should now be ready to do some testing.</p>"},{"location":"effect-details/multi-frame-rendering-in-ae/#enable-multi-frame-rendering","title":"Enable Multi-Frame Rendering","text":"<ul> <li>Multi-Frame Rendering is enabled by default in After Effects 2022.</li> <li>To toggle MFR on and off, navigate to Preferences &gt; Memory &amp; Performance &gt; Performance and toggle the Multi-Frame Rendering checkbox.</li> </ul>"},{"location":"effect-details/multi-frame-rendering-in-ae/#test-your-effect","title":"Test your effect","text":"<p>Once you have completed the above preparation steps, test your effect thoroughly. You should be able to test simple and complex compositions and see performance improvements as the effect utilizes multi-frame rendering.</p> <ul> <li>Go through all your existing manual and automated testing plans.</li> <li>Test all the effect parameters and make sure they are working properly.</li> <li>Add in some of the AE effects that have already been made thread-safe as appropriate. See the Thread-Safe First Party Effects section.</li> <li>Make sure there are no crashes, hangs, render differences or other unexpected changes when rendering with multi-frame rendering enabled.</li> </ul>"},{"location":"effect-details/multi-frame-rendering-in-ae/#thread-safe-first-party-effects","title":"Thread-Safe First Party Effects","text":"<p>Visit https://helpx.adobe.com/after-effects/user-guide.html/after-effects/using/effect-list.ug.html for a full list of MFR supported effects. More are being added every week.</p>"},{"location":"effect-details/parameter-supervision/","title":"Parameter Supervision","text":"<p>Supervision means dynamically changing the values of some parameters based on the values of others. To supervise a parameter, set PF_ParamFlag_SUPERVISE before adding it during PF_Cmd_PARAM_SETUP. Whenever it is changed, you will receive PF_Cmd_USER_CHANGED_PARAM. The index (into the plug-in's parameter array) of the changed parameter is sent in the PF_UserChangedParamExtra (extra) param. During PF_Cmd_USER_CHANGED_PARAM, you may change the values and appearance of any of your parameters.</p>"},{"location":"effect-details/parameter-supervision/#updating-parameter-ui","title":"Updating Parameter UI","text":"<p>If you set <code>PF_ParamFlag_SUPERVISE</code> on any parameter, After Effects will send you PF_Cmd_UPDATE_PARAMS_UI, just as if you had set PF_OutFlag_SEND_UPDATE_PARAMS_UI.</p> <p>During PF_Cmd_UPDATE_PARAMS_UI, you may only change the appearance and enable state of parameters. Use <code>PF_UpdateParamUI()</code> from PF_ParamUtilSuite3 to update the UI, passing it a copy of the parameter you wish to modify. Do not attempt to modify the original. It is not necessary to set <code>PF_OutFlag_REFRESH_UI</code>; <code>PF_UpdateParamUI()</code> handles that for you.</p> <p>Note</p> <p>This is the only way to update the UI of <code>PF_PUI_STD_CONTROL_ONLY</code> parameters.</p>"},{"location":"effect-details/parameter-supervision/#updating-parameter-values","title":"Updating Parameter Values","text":"<p>A parameter's value (not just UI) can be modified during PF_Cmd_USER_CHANGED_PARAM and during PF_Cmd_EVENT (PF_Event_DO_CLICK, PF_Event_DRAG, &amp; PF_Event_KEYDOWN). After Effects will not honor changes made at other times.</p> <p>When changing parameter values (and not just the UI), modify the original parameter, and set <code>PF_Paramdef.uu.change_flags</code> to <code>PF_ChangeFlag_CHANGED_VALUE</code>.</p> <p>This change will be also update the UI, and will be undoable by the user. Note that <code>PF_ChangeFlag_CHANGED_VALUE</code> isn't supported for layer parameters.</p> <p>This suite is provided to give effect plug-ins some access to their parameter streams, without requiring AEGP suite usage. At least some of these functions are provided by several third-party hosts. These functions are especially handy for effects with supervised parameters.</p>"},{"location":"effect-details/parameter-supervision/#pf_paramutilsuite3","title":"PF_ParamUtilSuite3","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_UpdateParamUI</code></p> <p><pre><code>PF_UpdateParamUI(\n  PF_ProgPtr         effect_ref,\n  PF_ParamIndex      param_index,\n  const PF_ParamDef  *defP);\n</code></pre></p> <p>Force After Effects to refresh the parameter's UI, in the effect controls palette.</p> <p>Starting in CC 2014, After Effects will now honor a change to a custom UI height. Simply change the ui_height of your custom UI PF_ParamDef and then call PF_UpdateParamUI.</p> <p>The effect's custom UI height will be updated in the Effect Control Window.</p> <p>Starting in CS6, when a plug-in disables a parameter, we now save that state in the UI flags so that the plug-in can check that flag in the future to see if it is disabled.</p> <p>Danger</p> <p>Never pass param[0] to this function.</p> <p><code>PF_GetCurrentState</code></p> <p><pre><code>PF_GetCurrentState(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  const A_Time   *startPT0,\n  const A_Time   *durationPT0,\n  PF_State       *stateP);\n</code></pre></p> <p>This API, combined with <code>PF_AreStatesIdentical</code> below, lets you determine if a set of inputs (either layers, other properties, or both) are different between when you first called <code>PF_GetCurrentState</code> and a current call, so it can be used for caching. You can specify a range of time to consider or all of time.</p> <p>Updated in CS6 to add <code>param_index</code>, <code>startPT0</code>, and <code>durationPT0</code>. Pre-defined constants for <code>param_index</code> are as follows:</p> <ul> <li><code>PF_ParamIndex_CHECK_ALL</code> - check every parameter, including every layer referred to by a layer parameter.</li> <li><code>PF_ParamIndex_CHECK_ALL_EXCEPT_LAYER_PARAMS</code> - omit all layers. Pass a specific layer parameter index to include that as the only layer parameter tested.</li> <li><code>PF_ParamIndex_CHECK_ALL_HONOR_EXCLUDE</code> - Similar to <code>CHECK_ALL</code>, but honor <code>PF_ParamFlag_EXCLUDE_FROM_HAVE_INPUTS_CHANGED</code>.</li> </ul> <p>Passing in NULL for both start and duration indicates all time.</p> <p>For effects that do simulation across time and therefore set <code>PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT</code>, when you ask about a time range, it will be expanded to include any times needed to produce that range.</p> <p>Populates a <code>PF_State</code>, an opaque data type used as a receipt for the current state of the effect's parameters (the PF_State is used in our internal frame caching database).</p> <p><code>PF_AreStatesIdentical</code></p> <p><pre><code>PF_AreStatesIdentical(\n  PF_ProgPtr      effect_ref,\n  const PF_State  *state1P,\n  const PF_State  *state2P,\n  A_Boolean       *samePB);\n</code></pre></p> <p>New in CS6. Compare two different states, retrieved using <code>PF_GetCurrentState</code>, above.</p> <p><code>PF_HasParamChanged</code></p> <p>No longer supported in <code>PFParamUtilsSuite3</code>.</p> <p><pre><code>PF_HasParamChanged(\n  PF_ProgPtr     effect_ref,\n  const          PF_State *stateP,\n  PF_ParamIndex  param_index,\n  PF_Boolean     *changedPB);\n</code></pre></p> <p>Given a PF_State, passes back true if any of the tested parameters differ from the saved state. Contrary to the name, the call does not provide a way to test a single parameter.</p> <p>At a minimum, all non-layer parameters will be tested. For finer granularity to test a specific set of parameters, use <code>PF_HaveInputsChangedOverTimeSpan</code> below instead.</p> <p>Pre-defined constants for <code>param_index</code> are as follows:</p> <ul> <li><code>PF_ParamIndex_CHECK_ALL</code> - check every parameter, including every layer referred to by a layer parameter.</li> <li><code>PF_ParamIndex_CHECK_ALL_EXCEPT_LAYER_PARAMS</code> - omit all layers. Pass a specific layer parameter index to include that as the only layer parameter tested.</li> </ul> <p><code>PF_HaveInputsChangedOverTimeSpan</code></p> <p>No longer supported in <code>PFParamUtilsSuite3</code>. Use <code>PF_AreStatesIdentical()</code> instead.</p> <p><code>PF_IsIdenticalCheckout</code></p> <p><pre><code>PF_IsIdenticalCheckout(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  A_long         what_time1,\n  A_long         time_step1,\n  A_u_long       time_scale1,\n  A_long         what_time2,\n  A_long         time_step2,\n  A_u_long       time_scale2,\n  PF_Boolean     *identicalPB);\n</code></pre></p> <p>Returns <code>TRUE</code> if a parameter's value is the same at the two passed times. Note: the times need not be contiguous; there could be different intervening values.</p> <p><code>PF_FindKeyframeTime</code></p> <p><pre><code>PF_FindKeyframeTime(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  A_long         what_time,\n  A_u_long       time_scale,\n  PF_TimeDir     time_dir,\n  PF_Boolean     *foundPB,\n  PF_KeyIndex    *key_indexP0,\n  A_long         *key_timeP0,\n  A_u_long       *key_timescaleP0);\n</code></pre></p> <p>Searches (in the specified direction) for the next keyframe in the parameter's stream. The last three parameters are optional.</p> <p><code>PF_GetKeyframeCount</code></p> <p><pre><code>PF_GetKeyframeCount(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  PF_KeyIndex    *key_countP);\n</code></pre></p> <p>Returns the number of keyframes in the parameter's stream.</p> <p><code>PF_CheckoutKeyframe</code></p> <p><pre><code>PF_CheckoutKeyframe(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  PF_KeyIndex    key_index,\n  A_long         *key_timeP0,\n  A_u_long       *key_timescaleP0,\n  PF_ParamDef    *paramP0);\n</code></pre></p> <p>Checks a keyframe for the specified parameter out of our keyframe database. param_index is zero-based. You can request time, timescale, or neither; useful if you're performing your own motion blur.</p> <p><code>PF_CheckinKeyframe</code></p> <p><pre><code>PF_CheckinKeyframe(\n  PF_ProgPtr   effect_ref,\n  PF_ParamDef  *paramP);\n</code></pre></p> <p>All calls to PF_CheckoutKeyframe must be balanced with this check-in, or pain will ensue.</p> <p><code>PF_KeyIndexToTime</code></p> <p><pre><code>PF_KeyIndexToTime(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  PF_KeyIndex    key_indexP,\n  A_long         *key_timeP,\n  A_u_long       *key_timescaleP);\n</code></pre></p> <p>Returns the time (and timescale) of the specified keyframe.</p>"},{"location":"effect-details/parameters-floating-point-values/","title":"Parameters &amp; Floating Point Values","text":"<p>We have something to admit to you; for years, even though we've given you 8 bit color values, we've internally used floating point representations behind your back.</p> <p>That's right, even with over-bright colors, we'd only ever tell you '255, 255, 255'. Yeah, right.</p> <p>Well, we can't live the lie any longer! Given a color parameter (passed to you by After Effects in your effect's parameter array), this function returns a floating point representation, including any high dynamic range component.</p>"},{"location":"effect-details/parameters-floating-point-values/#pf_colorparamsuite1","title":"PF_ColorParamSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_GetFloatingPoint</code></p> <p><code>ColorFromColorDef</code></p> <p><pre><code>PF_Err PF_GetFloatingPointColorFromColorDef(\n  PF_ProgPtr         effect_ref,\n  const PF_ParamDef  *color_defP,\n  PF_PixelFloat      *fp_colorP);\n</code></pre></p>"},{"location":"effect-details/parameters-floating-point-values/#pf_pointparamsuite1","title":"PF_PointParamSuite1","text":"<p>We also provide a way to get floating point values for point parameters.</p> <p>Function</p> <p>Purpose</p> <p><code>PF_GetFloatingPoint</code></p> <p><code>ValueFromPointDef</code></p> <p><pre><code>PF_Err PF_GetFloatingPointValueFromPointDef(\n  PF_ProgPtr         effect_ref,\n  const PF_ParamDef  *point_defP,\n  A_FloatPoint       *fp_pointP);\n</code></pre></p>"},{"location":"effect-details/parameters-floating-point-values/#pf_angleparamsuite1","title":"PF_AngleParamSuite1","text":"<p>New in CS6.0.2, we now provide a way to get floating point values for angle parameters.</p> <p>Function</p> <p>Purpose</p> <p><code>PF_GetFloatingPoint</code></p> <p><code>ValueFromAngleDef</code></p> <p><pre><code>PF_Err PF_GetFloatingPointValueFromAngleDef(\n  PF_ProgPtr         effect_ref,\n  const PF_ParamDef  *angle_defP,\n  A_FloatLong        *fp_valueP);\n</code></pre></p>"},{"location":"effect-details/pixel-aspect-ratio/","title":"Pixel Aspect Ratio","text":"<p>Effects must respond correctly to footage with non-square pixels, and non-uniform downsampling factors. Even different layer parameters can have different pixel aspect ratios! Doing so isn't difficult once you understand the concepts involved.</p> <p>Simple effects needn't do any work to match up point parameters to the actual pixels in the output. Point parameters are given to the effect scaled for downsample factor and pixel aspect ratio; they are in the coordinate system of the input buffer. This provides an implicit \"pixel coordinate system.\" This coordinate system is handy and easy to understand. But effects that use absolute pixel measurements or geometry must take a deeper look at the relationship between the input buffer and the final rendered image.</p>"},{"location":"effect-details/pixel-aspect-ratio/#dont-assume-pixels-are-square-or-1-to-1","title":"Don't Assume Pixels Are Square, Or 1-To-1","text":"<p>First, it is not necessarily a square coordinate system, due to both pixel aspect ratio and non-uniform downsample factor. The final rendered image can be stretched or squashed horizontally, relative to the pixels your effect processes. Circles will appear as ellipses, squares as rectangles. The distance between two points varies based on their angle in this coordinate system; anything rotated in this system is skewed, in the final output.</p> <p>Second, even if it is a square coordinate system, it's not necessarily the same size as the final output. This means that any slider which defines a size in pixels will be a problem when the image is rendered downsampled; the width of anti-aliasing filters changes based on downsample factor.</p> <p>Sometimes these issues aren't a problem. Any effect that colors pixels based solely on a linear function of the x and y coordinates need not bother with pixel aspect ratio and downsample factor at all. Staying in the input coordinate space is an option, though you must account for pixel aspect ratio and downsample factor elsewhere.</p> <p>Suppose you're writing a particle system effect that sprays textured sprites from a source position defined by an effect control point. Using pixel coordinates to represent the particle positions seems fine (as long as the particles don't have to rotate around a point), but when you go to actually render the particle textures, you'll have to scale them by pixel aspect ratio and downsample factor.</p> <p>If an effect already has coordinate transformation machinery in its pipeline, there's an alternative that's often simpler. Many algorithms require some sort of coordinate transformation; using matrices to set up a transformation, for example. But there are other easily adaptable algorithms, for example a texture generation effect that computes the value of each pixel based solely on its position. In this case, the code must take the raw pixel position and account for pixel aspect ratio and downsample factor.</p>"},{"location":"effect-details/pixel-aspect-ratio/#suggested-approach","title":"Suggested Approach","text":"<p>The simplest way to get all of this right is to work entirely in full resolution square coordinates, then scale by downsample factor and pixel aspect ratio as a final output transformation. Since point parameters are always reported in input buffer coordinates, convert them to full-resolution square coordinates before use. With this approach you don't need to worry about sliders which define a size in pixels; just interpret them as defining size in full-resolution vertical pixels.</p> <ol> <li>When getting your point parameters, go immediately to floating point and a full resolution square pixel system, like this.</li> </ol> <pre><code>x *= in_data&gt;pixel_aspect_ratio.num / (float)in_data&gt;pixel_aspect_ratio.den;\nx *= in_data&gt;downsample_x.den / (float)in_data&gt;downsample_x.num;\ny *= in_data&gt;downsample_y.den / (float)in_data&gt;downsample_y.num;\n</code></pre> <ol> <li>Perform all setup (define transformation matrices, generate coordinates for later scan conversion, compute values based on the distance between points, rotating things, et cetera) in this coordinate space. Note that you're not actually dealing with pixels in this stage; you're just manipulating coordinates or coordinate transformations.</li> <li>To go back to a coordinate system that corresponds directly to the pixels of the output buffer, undo the transformations from step one. Do this as late as possible, so as little code as possible needs to deal with this non-square space. If you're using matrices, this would be a final output transformation. For an effect which renders something based on the coordinate of each pixel, iterate over the output pixels and convert pixel coordinates to square coordinates before doing any processing for that pixel.</li> </ol> <p>This may seem like extra work, but most reasonably complex effects like this have a coordinate transformation step anyway; and if they don't, they still need one to handle pixel aspect ratio and downsample factor correctly.</p>"},{"location":"effect-details/pixel-aspect-ratio/#applying-user-input-in-pixels","title":"Applying User Input In Pixels","text":"<p>After Effects does all of its stretching horizontally so as to not to introduce unnecessary field interpolations; when pixels are used as a unit, we think of them as vertical pixels.</p>"},{"location":"effect-details/pixel-aspect-ratio/#test-test-test","title":"Test Test Test!","text":"<p>Test at 1/2, 1/4, and custom resolutions and compare the output. Use an anamorphic (2:1) pixel aspect ratio composition to track down bugs in pixel aspect ratio handling (it really makes them obvious), and be sure to test with different horizontal and vertical downsample factors.</p> <p>Some developers have reported problems with the downsample factors provided by some \"After Effects compatible\" plug-in hosts being zero. Check for zero before dividing.</p>"},{"location":"effect-details/tips-tricks/","title":"Tips &amp; Tricks","text":""},{"location":"effect-details/tips-tricks/#best-practices","title":"Best Practices","text":"<p>If your prototypes are anything like ours, the first version of your plug-in that runs without crashing differs radically from the version that actually ships.</p> <p>How your plug-in responds to things like downsampling, errors and exceptions, pixel aspect ratio, out-of-memory situations, and being interrupted while processing determines how usable it is (and how many support requests you'll have to handle).</p>"},{"location":"effect-details/tips-tricks/#responsiveness","title":"Responsiveness","text":"<p>Make your plug-ins as responsive as possible using <code>PF_ABORT()</code> and <code>PF_PROGRESS()</code> from Interaction Callbacks.</p> <p>We actually test all our effects for interrupt-ability; you'd be surprised how cranky users can get waiting for your pokey effect to finish processing a film resolution sequence!</p> <p>After Effects' iteration functions inherently provide this functionality; you don't need to worry about calling the above functions from within your pixel processing functions.</p>"},{"location":"effect-details/tips-tricks/#make-your-effect-easy-to-find","title":"Make Your Effect Easy To Find","text":"<p>It's possible to have your effect show up in the \"Effects &amp; Presets\" palette when users search for something other than the plug-in's name.</p> <p>Apply your effect (leaving the settings at default, unless you're very certain the user will want something different when they search for the given term), and select \"Save selection as animation preset\" from the effect controls palette.</p> <p>Save it to the name by which you want users to find the plug-in.</p> <p>Have your plug-in's installer put the resultant .ffx file into the \\Presets directory, next to the After Effects executable.</p> <p>Your preset will show up when users search for the name to which it was saved.</p>"},{"location":"effect-details/tips-tricks/#sampling-pixels-at-xy","title":"Sampling Pixels At (x,y)","text":"<p>Sometimes, instead of just processing every pixel, you'll want to get to a specific offset within the input frame. Below is one way to sample the pixel at a given (x,y) location; similar code could be used to write to the given location.</p> <pre><code>PF_Pixel *sampleIntegral32(PF_EffectWorld &amp;def, int x, int y){\n    return (PF_Pixel*)((char*)def.data +\n        (y * def.rowbytes) +\n        (x * sizeof(PF_Pixel)));\n}\n\nPF_Pixel16 *sampleIntegral64(PF_EffectWorld &amp;def, int x, int y){\n    assert(PF_WORLD_IS_DEEP(&amp;def));\n    return (PF_Pixel16*)((char*)def.data +\n        (y * def.rowbytes) +\n        (x * sizeof(PF_Pixel16)));\n}\n</code></pre> <p>Special thanks to Paul Miller for answering this question.</p>"},{"location":"effect-details/tips-tricks/#wheres-the-center-of-a-pixel","title":"Where's The Center Of A Pixel?","text":"<p>Deeeeeep, man. After Effects rotates around the upper left corner of the upper left pixel when the anchor point (see User Documentation) is (0,0).</p> <p>However, the subpixel sample and area sample callbacks actually treat (.0, .0) as a direct hit. To compensate for this, subtract 0.5 from x and y values before calling those functions.</p> <p>The matrix functions (<code>transform_world</code> from PF_WorldTransformSuite1) don't have this problem.</p> <p>When translating an image by a subpixel amount, make the output layer one pixel wider than its input, and leave the origin at (0,0).</p>"},{"location":"effect-details/tips-tricks/#text-layer-origin","title":"Text Layer Origin","text":"<p>Almost all layer types have their origin in the upper-left corner. Not so with text layers!</p> <p>A text layer origin by default is at the bottom-left baseline position of the first character. You can see this if you create a text item and then pick the layer so the anchor point shows up.</p> <p>Look at where the default anchor point location is. The transform is not at the corner of the layer rectangle.</p>"},{"location":"effect-details/tips-tricks/#clean-slate","title":"Clean Slate","text":"<p>You don't necessarily begin effect processing with a clean output slate. Our Gaussian blur filter, in an effort to do so, performs the following before rendering:</p> <pre><code>src_rect.left   = in_data&gt;output_origin_x;\nsrc_rect.right  = src_rect.left + input&gt;width;\nsrc_rect.top    = in_data&gt;output_origin_y;\nsrc_rect.bottom = src_rect.top + input&gt;height;\n\nerr = PF_FILL(NULL, NULL, output);\n\nif (!err) {\n    err = PF_COPY(&amp;params[0]&gt;u.ld, output, NULL, &amp;src_rect);\n}\n</code></pre>"},{"location":"effect-details/tips-tricks/#caching-behavior","title":"Caching Behavior","text":"<p>After Effects provides numerous ways to specify caching behavior. <code>PF_OutFlag_NON_PARAM_VARY</code>, <code>PF_OutFlag_WIDE_TIME_INPUT</code>, <code>PF_OutFlag_I_USE_SHUTTER_ANGLE</code>, <code>PF_OutFlag_I_SYNTHESIZE_AUDIO</code>, <code>PF_OutFlag2_I_USE_3D_CAMERA</code>, and <code>PF_OutFlag2_I_USE_3D_LIGHTS</code> (all from PF_OutFlags) all influence caching decisions.</p> <p>Supporting dynamic outflags can greatly improve performance, preventing After Effects from invalidating your effect's cache as aggressively as it otherwise would.</p> <p>Confirm that your plug-in performs well with different After Effects cache settings. Does your plug-in get called to update as often as expected, or does After Effects think it has valid pixels when you think it doesn't?</p>"},{"location":"effect-details/tips-tricks/#global-performance-cache-consideratons","title":"Global Performance Cache Consideratons","text":"<p>With the new caching in CS6, you may need to clear cached frames after changing your effect's rendering, so that frames rendered and stored in the cache prior to the change will not be reused. To do so manually during development:</p> <ol> <li>In Preferences &gt; Media &amp; Disk Cache, disable the Disk Cache</li> <li>Click \"Empty Disk Cache\" just to be sure (disabling the Disk Cache in step 1 only disables the writing of disk cache, not necessarily the usage)</li> <li>Relaunch</li> </ol> <p>If you ever encounter a glitch, it likely a legitimate bug in your effect, such as improper rectangle handling in SmartFX.</p> <p>On the other hand, if you fix a rendering bug in your plug-in and ship an update, you can't expect all users will empty their disk caches. A user may have a disk cache of the buggy frame and it needs to be invalidated. What to do? Update your plug-in's effect version. This value (and the AE build number) is part of the cache key, so if you update it any frames cached containing content from your plug-in will no longer match.</p>"},{"location":"effect-details/tips-tricks/#some-thoughts-on-time-from-a-long-time-developer","title":"Some Thoughts On Time From A Long-Time Developer","text":"<p>Stoney Ballard put together the following summary of how time works with effects; you may find it helpful.</p> <p>There are five <code>in_data</code> parameters that describe time to a filter:</p> <ul> <li><code>current_time</code></li> <li><code>time_step</code></li> <li><code>local_time_step</code></li> <li><code>total_time</code></li> <li><code>time_scale</code></li> </ul> <p>Their values are dependent on:</p> <ul> <li>The frame being rendered</li> <li>The duration of the layer and composition The frame rate of the comp</li> <li>Any Time Stretch Any Time Remapping</li> <li>The time behavior of an outer composition (one enclosing the composition with the layer being filtered)</li> <li>The setting of the \"Preserve frame rate when nested or in render queue\" (PFR) switch</li> </ul> <p>The frame being rendered affects current_time. It is expressed in the local (layer) time system. If the PFR switch is off, current_time may be any non-negative value. If on, it will be restricted to a multiple of time_step and local_time_step. Layer duration affects only total_time. Comp duration is a factor only when Time Remapping (TR) is on. In that case, total_time is the larger of layer duration and composition duration. Composition frame rate affects only the time_scale. Time Stretch affects only time_step and local_time_step. If the time stretch is negative, these values are negative. Even if the layer's duration (as seen in</p> <p>the comp) changes, total_time remains unaffected. This works as if Time Stretch was above a filter, but below an outer comp. PFR does not alter the effect of Time Stretch. Time Stretch is different than an outer comp, since it affects both step params equally, while an outer comp affects only time_step.</p> <p>Time Remapping happens below the filter, so that it does not affect the time params other than the total_time. When TR is on, the layer is lengthened to the same as the comp (but never shortened), regardless of how much time it actually takes, or where in the comp the layer is. This may cause total_time to be larger. It has nothing to do with the actual time map, just whether or not it's enabled.</p> <p>The biggest variation comes from being nested in an outer comp, unless PFR is on. When PFR is on, a filter is completely isolated from time variations in an outer comp. Of course, current_time will not necessarily move in increments of time_step in that case. It may skip frames or go backwards.</p> <p>When PFR is off, local_time_step, total_time, and time_scale remain set to what they were for the inner comp, but time_step contains the time to the next frame in the outer comp, expressed in the local time system. This may be any value, including 0. This can be interpreted as an instantaneous time rate, rather than a duration. A 0 value can last for an arbitrary number of rendered frames, but the current_time won't change on the local layer.</p> <p>Looked at from the other direction:</p> <p>current_time is quantized to time_step intervals unless rendering an outer comp with PFR off for the inner comp. This is the current time in the layer, not in any comp.</p> <p>The value of local_time_step is affected only by Time Stretch. It can never be zero, but it can be negative.</p> <p>time_step and local_time_step are always the same value unless rendering an outer comp with PFR off. time_step is also affected by the time behavior of an outer comp (with PFR off). It can have any value, positive, negative, or zero, and can be different for every frame (of the outer comp). time_step can be used to determine the duration of the current frame (with PFR off).</p> <p>total_time is the duration of the layer, unless Time Remapping is on, which makes it the larger of the layer duration and the duration of the comp.</p> <p>time_scale is the scale such that total_time / time_scale is the layer duration in seconds in its comp. It is affected only by the comp frame rate, although presumably all the time values could be scaled proportionately for any reason.</p> <p>A layer's intrinsic frame rate (if it has one) is not visible anywhere, although it's usually the same as the comp frame rate. If a filter needs to access the actual frames of a clip, it can do so</p> <p>only by being in a comp of the same frame rate, and with no Time Stretch or Time Remapping applied to its layer. It should use local_time_step to determine where the frames are.</p>"},{"location":"effect-details/tips-tricks/#rate-x-time-pain","title":"Rate x Time == Pain!","text":"<p>Be careful if one of your parameters is a speed or velocity parameter. Consider the ripple effect. It assumes a constant and uses the current time to determine how far along the ripple has gone (d = v * t). If the user interpolates the speed over time, you should integrate the velocity function from time zero to the current time. Ripple does not do this, but provides a \"phase\" parameter that the user can interpolate as they wish, providing correct results as long as the speed is set to zero. If you want to provide the correct behavior, you can sample (and integrate) the speed parameter from the beginning of time until the current time using PF_CHECKOUT_PARAM(), or you can provide a \"phase\" or \"distance\" parameter and warn the user about interpolating the speed. The cost of checking out many parameter values is negligible compared to rendering, and is the recommended approach.</p> <p>If you check out parameter values at other times, or use layer parameters at all, you must check in those parameters when finished, even if an error has occurred. Remember, checked-out parameters are read-only.</p>"},{"location":"effect-details/tips-tricks/#testing","title":"Testing","text":"<p>Try using your plug-in in RAM previews to ensure you handle out-of-memory conditions gracefully. Does your plug-in handle running out of memory gracefully?</p> <p>If you receive <code>PF_Err_OUT_OF_MEMORY</code> (from Error Codes) when requesting memory, do you pass it back to After Effects?</p> <p>What happens when your video effect is applied to an audio-only layer? Test with projects created using older versions of your plug-in.</p>"},{"location":"effect-details/useful-utility-functions/","title":"Useful Utility Functions","text":""},{"location":"effect-details/useful-utility-functions/#pf_effectuisuite","title":"PF_EffectUISuite","text":"<p>Although not strictly concerned with parameters, this suite can change the name of the options button.</p> <p>Function</p> <p>Purpose</p> <p><code>PF_SetOptionsButtonName</code></p> <p>Changes the text on the options button in the effect controls palette.</p> <p>Note</p> <p>This must be called during PF_Cmd_PARAM_SETUP.</p> <p><pre><code>PF_SetOptionsButtonName(\n  PF_ProgPtr    effect_ref,\n  const A_char  *nameZ);\n</code></pre></p> <p><code>nameZ</code> may be up to <code>A_char[31]</code> in length.</p>"},{"location":"effect-details/useful-utility-functions/#pf_appsuite","title":"PF_AppSuite","text":"<p>Roughly 437 years ago, when we released After Effects 5.0, we published some useful utility callbacks in PF_AppSuite. They're as useful today as they were then. After Effects has user-controllable UI brightness.</p> <p>In addition to the PF_EffectCustomUIOverlayThemeSuite for custom UI in effects, use these calls to integrate seamlessly into the After Effects UI.</p> <p>What better way to shame someone into purchasing a copy of your plug-in than by putting their personal information into a watermark, eh? Or set the cursor to add mask vertices, just to confuse people? Heh heh heh. But that would be wrong.</p> <p>Function</p> <p>Purpose</p> <p><code>PF_AppGetBgColor</code></p> <p>Retrieves the current background color.</p> <p><pre><code>PF_AppGetBgColor(\n  PF_App_Color  bg_colorP);\n</code></pre></p> <p><code>PF_AppGetColor</code></p> <p>Retrieves the color for the specified UI element.</p> <p>See AE_EffectSuites.h for a complete enumeration of available <code>PF_App_Color</code> values; basically any color in After Effects' UI can be retrieved.</p> <p>CC adds several new <code>PF_App_ColorType</code> enum values for new elements that can be queried.</p> <p>Note that in CS6, the color definitions are off from <code>FILL_LIGHT</code> downward.</p> <p>Use following psuedocode for CS6 only:</p> <p><pre><code>GetColor(enum e)\n{\n  if host_is_CS6 and e &amp;gt;= FILL_LIGHT\n  e += 3\n    call real GetColor\n}\n\nPF_AppGetColor(\n  PF_App_ColorType  color_type,\n  PF_App_Color      *app_colorP);\n</code></pre></p> <p><code>PF_AppGetLanguage</code></p> <p>New in CC. Retrieves the active displayed language of AE UI so plug-in can match. Here are the possible language codes as of CC:</p> <ul> <li>Chinese - <code>zh_CN</code></li> <li>English - <code>en_US</code></li> <li>French - <code>fr_FR</code></li> <li>German - <code>de_DE</code></li> <li>Italian - <code>it_IT</code></li> <li>Japanese - <code>ja_JP</code></li> <li>Korean - <code>ko_KR</code></li> <li>Spanish - <code>es_ES</code></li> </ul> <p><pre><code>PF_AppGetLanguage(\n  A_char  lang_tagZ);\n</code></pre></p> <p><code>PF_GetPersonalInfo</code></p> <p>Retrieves the user's registration information.</p> <p><pre><code>PF_GetPersonalInfo(\n  PF_AppPersonalTextInfo  *ptiP);\n\ntypedef struct PF_AppPersonalTextInfo {\n  A_char  name[PF_APP_MAX_PERS_LEN + 1];\n  A_char  org[PF_APP_MAX_PERS_LEN + 1];\n  A_char  serial_str[PF_APP_MAX_PERS_LEN+1];\n} PF_AppPersonalTextInfo;\n</code></pre></p> <p><code>PF_GetFontStyleSheet</code></p> <p>Retrieves font style sheet information for the fonts used in After Effects' UI.</p> <p>Trivia: The font used in After Effects' UI starting in 15.0 is Adobe Clean.</p> <p>Before that, it was Tahoma on Windows and Lucida Grande on macOS X.</p> <p><pre><code>PF_GetFontStyleSheet(\n  PF_FontStyleSheet  sheet,\n  PF_FontName        *font_nameP0,\n  A_short            *font_numPS0,\n  A_short            *sizePS0,\n  A_short            *stylePS0);\n</code></pre></p> <p><code>PF_SetCursor</code></p> <p>Sets the cursor to any of After Effects' cursors. See AE_EffectUI.h for a complete enumeration.</p> <p>Set to: - <code>PF_Cursor_NONE</code> to allow After Effects to set the cursor. - <code>PF_Cursor_CUSTOM</code> if you've used OS-specific calls to change the cursor (After Effects will honor your changes).</p> <p><pre><code>PF_SetCursor(\n  PF_CursorType  cursor);\n</code></pre></p> <p><code>PF_IsRenderEngine</code></p> <p>Returns TRUE if After Effects is running in watched folder mode, or is a render engine installation.</p> <p><pre><code>PF_IsRenderEngine(\n  PF_Boolean  *render_enginePB);\n</code></pre></p> <p>As of AE6.5, this function returns <code>TRUE</code> if the installation is the render engine, or if the After Effects is being run with no UI, or if After Effects is in watched folder mode.</p> <p><code>PF_AppColorPickerDialog</code></p> <p>Displays the After Effects color picker dialog (which may be the system color picker, depending on the user's preferences).</p> <p>Will return <code>PF_Interrupt_CANCEL</code> if user cancels dialog. Returned color is in the project's working color space.</p> <p><pre><code>PF_AppColorPickerDialog(\n  const A_char         *dialog_titleZ0,\n  const PF_PixelFloat  *sample_colorP,\n  PF_PixelFloat        *result_colorP);\n</code></pre></p> <p><code>PF_GetMouse</code></p> <p>Returns the position of the mouse in the custom UI coordinate space.</p> <p><pre><code>PF_GetMouse(\n  PF_Point  *pointP);\n</code></pre></p> <p><code>PF_InvalidateRect</code></p> <p>Queue up a redraw of a specific area of the custom UI for an effect.</p> <p>Only valid while handling a non-drawing event in the effect.</p> <p>Specify <code>rectP0</code> as <code>NULL</code> to invalidate the entire window. The redraw will happen at the next available idle moment after returning from the event.</p> <p>Set the <code>PF_EO_UPDATE_NOW</code> event outflag to update the window immediately after the event returns.</p> <p><pre><code>PF_InvalidateRect(\n  const PF_ContextH  contextH,\n  const PF_Rect*     rectP0);\n</code></pre></p> <p><code>PF_ConvertLocalToGlobal</code></p> <p>Converts from the custom UI coordinate system to global screen coordinates. Use only during custom UI event handling.</p> <p><pre><code>PF_ConvertLocalToGlobal(\n  const PF_Point  *localP,\n  PF_Point        *globalP);\n</code></pre></p>"},{"location":"effect-details/useful-utility-functions/#advanced-appsuite-you-can-do-that","title":"Advanced Appsuite: You Can Do That?!","text":"<p><code>PF_AdvAppSuite</code> was originally designed for some pretty nefarious purposes; an external application was pretending to be an After Effects plug-in, and required ways to notify After Effects of the changes it had made to the project. Our API impurity is your gain.</p>"},{"location":"effect-details/useful-utility-functions/#pf_advappsuite2","title":"PF_AdvAppSuite2","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_SetProjectDirty</code></p> <p>Tells After Effects that the project has been changed since it was last saved.</p> <p><pre><code>PF_SetProjectDirty(void);\n</code></pre></p> <p><code>PF_SaveProject</code></p> <p>Saves the project to the current path. To save the project elsewhere, use AEGP_SaveProjectToPath().</p> <p><pre><code>PF_SaveProject(void);\n</code></pre></p> <p><code>PF_SaveBackgroundState</code></p> <p>Stores the background state (After Effects' position in the stacking order of open applications and windows).</p> <p><pre><code>PF_SaveBackgroundState(void);\n</code></pre></p> <p><code>PF_ForceForeground</code></p> <p>Brings After Effects to the front of all currently open applications and windows.</p> <p><pre><code>PF_ForceForeground(void);\n</code></pre></p> <p><code>PF_RestoreBackgroundState</code></p> <p>Puts After Effects back where it was, in relation to other applications and windows.</p> <p><pre><code>PF_RestoreBackgroundState(void);\n</code></pre></p> <p><code>PF_RefreshAllWindows</code></p> <p>Forces all After Effects windows to update.</p> <p>Note that although the Composition panel will be refreshed, this does not guarantee a new frame will be sent to External Monitor Preview plug-ins.</p> <p><pre><code>PF_RefreshAllWindows(void);\n</code></pre></p> <p><code>PF_InfoDrawText</code></p> <p>Writes text into the After Effects info palette.</p> <p><pre><code>PF_InfoDrawText(\n  const A_char  *line1Z0,\n  const A_char  *line2Z0);\n</code></pre></p> <p><code>PF_InfoDrawColor</code></p> <p>Draws the specified color in the After Effects info palette (alpha is ignored).</p> <p><pre><code>PF_InfoDrawColor(\n  PF_Pixel  color);\n</code></pre></p> <p><code>PF_InfoDrawText3</code></p> <p>Writes three lines of text into the After Effects info palette.</p> <p><pre><code>PF_InfoDrawText3(\n  const A_char  *line1Z0,\n  const A_char  *line2Z0,\n  const A_char  *line3Z0);\n</code></pre></p> <p><code>PF_InfoDrawText3Plus</code></p> <p>Writes three lines of text into the After Effects info palette, with portions of the second and third lines left and right justified.</p> <p><pre><code>PF_InfoDrawText3Plus(\n  const A_char  *line1Z0,\n  const A_char  *line2_jrZ0,\n  const A_char  *line2_jlZ0,\n  const A_char  *line3_jrZ0,\n  const A_char  *line3_jlZ0);\n</code></pre></p> <p><code>PF_AppendInfoText</code></p> <p>Appends characters to the currently-displayed info text.</p> <p><pre><code>PF_AppendInfoText(\n  const A_char  *appendZ0);\n</code></pre></p>"},{"location":"effect-details/useful-utility-functions/#formatting-time","title":"Formatting Time","text":"<p><code>PF_AdvTimeSuite</code> provides several functions to match how After Effects displays time. In fact, these are the same functions we use internally.</p>"},{"location":"effect-details/useful-utility-functions/#pf_advtimesuite4","title":"PF_AdvTimeSuite4","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_FormatTimeActiveItem</code></p> <p>Given a time value and scale, returns a formatted string representing that time.</p> <p>If durationB is <code>TRUE</code>, appropriate units will be appended.</p> <p><pre><code>PF_FormatTimeActiveItem(\n  A_long      time_valueUL,\n  A_u_long    time_scaleL,\n  PF_Boolean  durationB,\n  A_char      *time_buf);\n</code></pre></p> <p><code>PF_FormatTime</code></p> <p>Contextualizes the formatted time string for the given PF_InData and PF_EffectWorld (i.e., layer time).</p> <p><pre><code>PF_FormatTime(\n  PF_InData       *in_data,\n  PF_EffectWorld  *world,\n  A_long          time_valueUL,\n  A_u_long        time_scaleL,\n  PF_Boolean      durationB,\n  A_char          *time_buf);\n</code></pre></p> <p><code>PF_FormatTimePlus</code></p> <p>Allows you to select composition or layer time.</p> <p><pre><code>PF_FormatTimePlus(\n  PF_InData       *in_data,\n  PF_EffectWorld  *world,\n  A_long          time_valueUL,\n  A_u_long        time_scaleL,\n  PF_Boolean      comp_timeB,\n  PF_Boolean      durationB,\n  A_char          *time_buf);\n</code></pre></p> <p><code>PF_GetTimeDisplayPref</code></p> <p>Returns the starting frame number (specified by the user in composition settings), and the composition's time display preferences.</p> <p>Updated in 14.2 to support higher frame rates.</p> <p><pre><code>PF_GetTimeDisplayPref(\n  PF_TimeDisplayPref2  *tdp,\n  A_long               *starting_num);\n  typedef              struct {\n  A_char               display_mode;\n  A_long               framemax;\n  A_long               frames_per_foot;\n  A_char               frames_start;\n  A_Boolean            nondrop30B;\n  A_Boolean            honor_source_timecodeB;\n  A_Boolean            use_feet_framesB;\n  } PF_TimeDisplayPrefVersion3;\n</code></pre></p> <p><code>PF_TimeCountFrames</code></p> <p>New in 15.0. Returns the index of the frame in the current comp.</p> <p><pre><code>PF_TimeCountFrames(\n  const A_Time  *start_timeTP,\n  const A_Time  *time_stepTP,\n  A_Boolean     include_partial_frameB,\n  A_long        *frame_countL);\n</code></pre></p>"},{"location":"effect-details/useful-utility-functions/#affecting-the-timeline","title":"Affecting The Timeline","text":"<p>Long ago, we helped a developer integrate their stand-alone tracker with After Effects by exposing a set of functions to give them some way to notify us of, and be notified of, changes to the timeline.</p> <p>With the numerous AEGP API calls available, these aren't used much, but they're still available.</p> <p>Don't confuse this suite with AEGP_ItemSuite.</p>"},{"location":"effect-details/useful-utility-functions/#pf_advitemsuite1","title":"PF_AdvItemSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_MoveTimeStep</code></p> <p>Moves current time num_stepsL in the specified direction.</p> <p><pre><code>PF_MoveTimeStep(\n  PF_InData       *in_data,\n  PF_EffectWorld  *world,\n  PF_Step         time_dir,\n  A_long          num_stepsL);\n</code></pre></p> <p><code>PF_MoveTimeStepActiveItem</code></p> <p>Moves num_stepsL in the specified direction, for the active item.</p> <p><pre><code>PF_MoveTimeStepActiveItem(\n  PF_Step  time_dir,\n  A_long   num_stepsL);\n</code></pre></p> <p><code>PF_TouchActiveItem</code></p> <p>Tells After Effects that the active item must be updated.</p> <p><pre><code>PF_TouchActiveItem (void);\n</code></pre></p> <p><code>PF_ForceRerender</code></p> <p>Forces After Effects to rerender the current frame.</p> <p><pre><code>PF_ForceRerender(\n  PF_InData       *in_data,\n  PF_EffectWorld  *world);\n</code></pre></p> <p><code>PF_EffectIsActiveOrEnabled</code></p> <p>Returns whether the effect which owns the <code>PF_ContextH</code> is currently active or enabled (if it isn't, After Effects won't be listening for function calls from it).</p> <p><pre><code>PF_EffectIsActiveOrEnabled(\n  PF_ContextH  contextH,\n  PF_Boolean   *enabledPB);\n</code></pre></p>"},{"location":"effect-details/useful-utility-functions/#accessing-auxiliary-channel-data","title":"Accessing Auxiliary Channel Data","text":"<p>Some file types contain more than just pixel data; use <code>PF_ChannelSuite</code> to determine whether such information is present, and the macros in AE_ChannelSuites.h to retrieve it in the format you need.</p>"},{"location":"effect-details/useful-utility-functions/#pf_channelsuite1","title":"PF_ChannelSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_GetLayerChannelCount</code></p> <p>Retrieves the number of auxiliary channels associated with the indexed layer.</p> <p><pre><code>PF_GetLayerChannelCount(\n  PF_ProgPtr     effect_ref,\n  PF_ParamIndex  param_index,\n  A_long         *num_channelsPL);\n</code></pre></p> <p><code>PF_GetLayerChannelIndexedRefAndDesc</code></p> <p>Retrieves (by index) a reference to, and description of, the specified channel.</p> <p><pre><code>PF_GetLayerChannelIndexedRefAndDesc(\n  PF_ProgPtr       effect_ref,\n  PF_ParamIndex    param_index,\n  PF_ChannelIndex  channel_index,\n  PF_Boolean       *foundPB,\n  PF_ChannelRef    *channel_refP,\n  PF_ChannelDesc   *channel_descP);\n</code></pre></p> <p><code>PF_GetLayerChannelTypedRefAndDesc</code></p> <p>Retrieves an auxiliary channel by type.</p> <p>Returned information is valid only if <code>foundPB</code> returns <code>TRUE</code>.</p> <p><pre><code>PF_GetLayerChannelTypedRefAndDesc(\n  PF_ProgPtr      effect_ref,\n  PF_ParamIndex   param_index,\n  PF_ChannelType  channel_type,\n  PF_Boolean      *foundPB,\n  PF_ChannelRef   *channel_refP,\n  PF_ChannelDesc  *channel_descP);\n</code></pre></p> <p>PF_DataType will be one of the following:</p> <ul> <li><code>PF_DataType_FLOAT</code> - 34 bytes</li> <li><code>PF_DataType_DOUBLE</code> - 38 bytes</li> <li><code>PF_DataType_LONG</code> - 34 bytes</li> <li><code>PF_DataType_SHORT</code> - 32 bytes</li> <li><code>PF_DataType_FIXED_16_16</code> - 34 bytes</li> <li><code>PF_DataType_CHAR</code> - 31 byte</li> <li><code>PF_DataType_U_BYTE</code> - 31 byte</li> <li><code>PF_DataType_U_SHORT</code> - 32 bytes</li> <li><code>PF_DataType_U_FIXED_16_16</code> - 34 bytes</li> <li><code>PF_DataType_RGB</code> - 3 bytes</li> </ul> <p>PF_ChannelType will be one of the following:</p> <ul> <li><code>PF_ChannelType_DEPTH</code></li> <li><code>PF_ChannelType_NORMALS</code></li> <li><code>PF_ChannelType_OBJECTID</code></li> <li><code>PF_ChannelType_MOTIONVECTOR</code></li> <li><code>PF_ChannelType_BK_COLOR</code></li> <li><code>PF_ChannelType_TEXTURE</code></li> <li><code>PF_ChannelType_COVERAGE</code></li> <li><code>PF_ChannelType_NODE</code></li> <li><code>PF_ChannelType_MATERIAL</code></li> <li><code>PF_ChannelType_UNCLAMPED</code></li> <li><code>PF_ChannelType_UNKNOWN</code> </li> </ul> <p><code>PF_CheckoutLayerChannel</code></p> <p>Retrieves the <code>PF_ChannelChunk</code> containing the data associated with the given <code>PF_ChannelRefPtr</code>.</p> <p><pre><code>PF_CheckoutLayerChannel(\n  PF_ProgPtr        effect_ref,\n  PF_ChannelRefPtr  channel_refP,\n  long              what_time,\n  long              duration,\n  unsigned long     time_scale,\n  PF_DataType       data_type,\n  PF_ChannelChunk   *channel_chunkP);\n</code></pre></p> <p><code>PF_CheckinLayerChannel</code></p> <p>Checks in the <code>PF_ChannelChunk</code>. Always, always, always check the data back in.</p> <p><pre><code>PF_CheckinLayerChannel(\n  PF_ProgPtr        effect_ref,\n  PF_ChannelRefPtr  channel_refP,\n  PF_ChannelChunk   *channel_chunkP);\n</code></pre></p>"},{"location":"effect-details/working-with-paths/","title":"Working With Paths","text":""},{"location":"effect-details/working-with-paths/#accessing-path-data","title":"Accessing Path Data","text":"<p>Paths differ from other parameter types, in that their values are not directly accessible. In addition to checking them out and in (like layer parameters), you must use our path data function suites to obtain the details of the path at a given time. See PF_PathQuerySuite1 and PF_PathDataSuite. Never use the values present in a path parameter when it's passed to you, without first checking it out; while deleted paths will not be available, further updating is done \"lazily\" (later); your effect won't see these changes unless it checks out the path.</p>"},{"location":"effect-details/working-with-paths/#manipulating-path-data","title":"Manipulating Path Data","text":"<p>You can also use the AEGP_MaskOutlineSuite3 to manipulate paths. See Cheating Effect Usage of AEGP Suites. Path parameters are treated as opaque blobs of data; get and set functions must be used to access and manipulate them. Like layer parameters, they must be checked out (and in!) by effects which access them.</p>"},{"location":"effect-details/working-with-paths/#vertices","title":"Vertices","text":"<p>Path vertices are more complex than simple points. All member variables are PF_FpLongs (doubles), and are in the layer's coordinate space.</p>"},{"location":"effect-details/working-with-paths/#pf_pathvertex","title":"PF_PathVertex","text":"Member Description <code>x</code> The location of the vertex. <code>y</code> <code>tan_in_x</code> The incoming tangent point. <code>tan_in_y</code> <code>tan_out_x</code> The outgoing tangent point. <code>tan_out_y</code>"},{"location":"effect-details/working-with-paths/#pf_pathdatasuite","title":"PF_PathDataSuite","text":"<p>This suite provides information about paths (sequences of vertices).</p> <p>Function</p> <p>Description</p> <p><code>PF_PathIsOpen</code></p> <p>Returns <code>TRUE</code> if the path is not closed (if the beginning and end vertex are not identical).</p> <p><pre><code>PF_PathIsOpen(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  PF_Boolean         *openPB);\n</code></pre></p> <p><code>PF_PathNumSegments</code></p> <p>Retrieves the number of segments in the path. N segments means there are segments <code>[0.N-1];</code> segment J is defined by vertex <code>J</code> and <code>J+1</code>.</p> <p><pre><code>PF_PathNumSegments(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  A_long             *num_segmentsPL);\n</code></pre></p> <p><code>PF_PathVertexInfo</code></p> <p>Retrieves the <code>PF_PathVertex</code> for the specified path.</p> <p>The range of points is <code>[0.num_segments];</code> for closed paths, <code>vertex[0] == vertex[num_segments]</code>.</p> <p><pre><code>PF_PathVertexInfo(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  A_long             which_pointL,\n  PF_PathVertex      *vertexP);\n</code></pre></p> <p><code>PF_PathPrepareSegLength</code></p> <p>This fairly counter-intuitive function informs After Effects that you're going to ask for the length of a segment (using <code>PF_PathGetSegLength</code> below), and it'd better get ready.</p> <p><code>frequencyL</code> indicates how many times you'd like us to sample the length; our internal effects use 100.</p> <p><pre><code>PF_PathPrepareSegLength(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  A_long             which_segL,\n  A_long             frequencyL,\n  PF_PathSegPrepPtr  *lengthPrepPP);\n</code></pre></p> <p><code>PF_PathGetSegLength</code></p> <p>Retrieves the length of the given segment.</p> <p><pre><code>PF_PathGetSegLength(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  A_long             which_segL,\n  PF_PathSegPrepPtr  *lengthPrepP0,\n  PF_FpLong          *lengthPF);\n</code></pre></p> <p><code>PF_PathEvalSegLength</code></p> <p>Retrieves the location of a point lengthF along the given path segment.</p> <p><pre><code>PF_PathEvalSegLength(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  PF_PathSegPrepPtr  *lengthPrepPP0,\n  A_long             which_segL,\n  PF_FpLong          lengthF,\n  PF_FpLong          *x,\n  PF_FpLong          *y);\n</code></pre></p> <p><code>PF_PathEvalSegLengthDeriv1</code></p> <p>Retrieves the location, and the first derivative, of a point <code>lengthF</code> along the given path segment.</p> <p>If you're not sure why you'd ever need this, don't use it. Math is hard.</p> <p><pre><code>PF_PathEvalSegLengthDeriv1(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  PF_PathSegPrepPtr  *lengthPrepPP0,\n  A_long             which_segL,\n  PF_FpLong          lengthF,\n  PF_FpLong          *x,\n  PF_FpLong          *y,\n  PF_FpLong          *deriv1x,\n  PF_FpLong          *deriv1y);\n</code></pre></p> <p><code>PF_PathCleanupSegLength</code></p> <p>Call this when you're finished evaluating that segment length, so After Effects can properly clean up the <code>PF_PathSegPrepPtr</code>.</p> <p><pre><code>PF_PathCleanupSegLength(\n  PF_ProgPtr         effect_ref0,\n  PF_PathOutlinePtr  pathP,\n  A_long             which_segL,\n  PF_PathSegPrepPtr  *lengthPrepPP);\n</code></pre></p> <p><code>PF_PathIsInverted</code></p> <p>Returns <code>TRUE</code> if the path is inverted.</p> <p><pre><code>PF_PathIsInverted(\n  PF_ProgPtr  effect_ref,\n  PF_PathID   unique_id,\n  PF_Boolean  *invertedB);\n</code></pre></p> <p><code>PF_PathGetMaskMode</code></p> <p>Retrieves the mode for the given path.</p> <p><pre><code>PF_PathGetMaskMode(\n  PF_ProgPtr   effect_ref,\n  PF_PathID    unique_id,\n  PF_MaskMode  *modeP);\n</code></pre></p> <p>Mask mode is one of the following:</p> <ul> <li><code>PF_MaskMode_NONE</code></li> <li><code>PF_MaskMode_ADD</code></li> <li><code>PF_MaskMode_SUBTRACT</code></li> <li><code>PF_MaskMode_INTERSECT</code></li> <li><code>PF_MaskMode_LIGHTEN</code></li> <li><code>PF_MaskMode_DARKEN</code></li> <li><code>PF_MaskMode_DIFFERENCE</code></li> <li><code>PF_MaskMode_ACCUM</code></li> </ul> <p><code>PF_PathGetName</code></p> <p>Retrieves the name of the path (up to <code>PF_MAX_PATH_NAME_LEN</code> long).</p> <p><pre><code>PF_PathGetName(\n  PF_ProgPtr  effect_ref,\n  PF_PathID   unique_id,\n  A_char      *nameZ);\n</code></pre></p>"},{"location":"effect-details/working-with-paths/#pf_pathquerysuite1","title":"PF_PathQuerySuite1","text":"<p>This suite is used to identify and access the paths associated with the effect's source layer.</p> <p>Function</p> <p>Purpose</p> <p><code>PF_NumPaths</code></p> <p>Retrieves the number of paths associated with the effect's source layer.</p> <p><pre><code>PF_NumPaths(\n  PF_ProgPtr  effect_ref,\n  A_long      *num_pathsPL);\n</code></pre></p> <p><code>PF_PathInfo</code></p> <p>Retrieves the PF_PathID for the specified path.</p> <p><pre><code>PF_PathInfo(\n  PF_ProgPtr  effect_ref,\n  A_long      indexL,\n  PF_PathID   *unique_idP);\n</code></pre></p> <p><code>PF_CheckoutPath</code></p> <p>Acquires the PF_PathOutlinePtr for the path at the specified time.</p> <p><pre><code>PF_CheckoutPath(\n  PF_ProgPtr         effect_ref,\n  PF_PathID          unique_id,\n  A_long             what_time,\n  A_long             time_step,\n  A_u_long           time_scale,\n  PF_PathOutlinePtr  *pathPP);\n</code></pre></p> <p><code>PF_CheckinPath</code></p> <p>Releases the path back to After Effects. Always do this, regardless of any error conditions encountered.</p> <p>Every checkout must be balanced by a checkin, or pain will ensue.</p> <p><pre><code>PF_CheckinPath(\n  PF_ProgPtr         effect_ref,\n  PF_PathID          unique_id,\n  PF_Boolean         changedB,\n  PF_PathOutlinePtr  pathP);\n</code></pre></p>"},{"location":"effect-ui-events/PF_EventExtra/","title":"PF_EventExtra","text":"<p>This structure provide context information for the current event. After Effects passes a pointer to this structure in the extra parameter of the Entry Point function.</p> <p>The <code>PF_EventUnion</code> (sent in the <code>PF_EventExtra</code>) varies with the event type, and contains information specific to that event.</p> <p>Member</p> <p>Purpose</p> <p><code>contextH</code></p> <p>Handle to the <code>PF_Context</code>.</p> <p>This drawing context is used with the Drawbot suites for drawing, and also for the UI Callbacks.</p> <p><code>e_type</code></p> <p>Which event is occurring.</p> <p><code>u</code></p> <p>A PF_EventUnion containing information specific to the event.</p> <p><code>effect_win</code></p> <p>A <code>PF_EffectWindowInfo</code> about the event if it occurs within the effects window.</p> <p>Otherwise, as of After Effects 5.0, effect_win can be replaced by a <code>PF_WindowUnion</code>.</p> <p>This struct contains both a <code>PF_EffectWindowInfo</code> and an <code>PF_ItemWindowInfo</code>, which (for now) is simply the port rectangle for the item window.</p> <p>Replacement only occurs if <code>PF_USE_NEW_WINDOW_UNION</code> was defined during compilation; otherwise, it will continue to be just a <code>PF_EffectWindowInfo</code>.</p> <p><code>cbs</code></p> <p>Pointer to UI Callbacks, which are needed to translate points between layer, composition, and screen coordinate systems.</p> <p><code>evt_in_flags</code></p> <p>Event Input Flags. This currently contains only one value, <code>PF_EI_DONT_DRAW</code>, which you should check before drawing!</p> <p><code>evt_out_flags</code></p> <p>One or more of the following, combined with a bitwise OR operation:</p> <ul> <li><code>PF_EO_NONE</code></li> <li><code>PF_EO_HANDLED_EVENT</code> tells After Effects you've handled the event.</li> <li><code>PF_EO_ALWAYS_UPDATE</code> forces After Effects to rerender the composite in response to every click or drag; this is the same behavior generated by 'alt-scrubbing' the parameter value.</li> <li><code>PF_EO_NEVER_UPDATE</code> prevents After Effects from rerendering the composite until the user stops clicking and dragging.</li> <li><code>PF_EO_UPDATE_NOW</code> tells After Effects to update the view immediately after the event returns after calling <code>PF_InvalidateRect</code></li> </ul>"},{"location":"effect-ui-events/PF_EventExtra/#pf_context","title":"PF_Context","text":"<p>PF_Context details the event's UI context.</p> <p>Member</p> <p>Purpose</p> <p><code>magic</code></p> <p>Do not change.</p> <p><code>w_type</code></p> <p>The window type. If you have Custom Comp and ECW UIs in the same plug-in, this is the way to differentiate between them (what kind of masochist are you, anyway?).</p> <ul> <li><code>PF_Window_COMP</code>,</li> <li><code>PF_Window_LAYER</code>,</li> <li><code>PF_Window_EFFECT</code></li> </ul> <p><code>reserved_flt</code></p> <p>Do not change.</p> <p><code>plugin_state[4]</code></p> <p>An array of 4 <code>A_longs</code> which the plug-in can use to store state information for a given context.</p> <p><code>reserved_drawref</code></p> <p>A <code>DRAWBOT_DrawRef</code> for use with the Drawbot suites.</p> <p><code>*reserved_paneP</code></p> <p>Do not change.</p>"},{"location":"effect-ui-events/PF_EventExtra/#pf_effectwindowinfo","title":"PF_EffectWindowInfo","text":"<p>If an event occurs in the ECP, an PF_EffectWindowInfo is sent in PF_EventExtra.</p> <p>Member</p> <p>Purpose</p> <p><code>index</code></p> <p>This indicates which parameter in the effect window is being affected. The controls are numbered from 0 to the number of controls minus 1.</p> <p><code>area</code></p> <p>This indicates if the control title (<code>PF_EA_PARAM_TITLE</code>) or the control itself (<code>PF_EA_CONTROL</code>) are being affected.</p> <p>The title is the area still visible when the parameter's topic (\"twirly\") is spun up.</p> <p><code>current_frame</code></p> <p>A PF_Rect indicating the full frame of the area occupied by the control.</p> <p><code>param_title_frame</code></p> <p>A PF_Rect indicating the title area of the control.</p> <p><code>horiz_offset</code></p> <p>A horizontal offset from the left side of the title area in which to draw into the title.</p>"},{"location":"effect-ui-events/PF_EventUnion/","title":"PF_EventUnion","text":"<p>The PF_EventUnion in PF_EventExtra is a union of the four following structures.</p>"},{"location":"effect-ui-events/PF_EventUnion/#click","title":"Click","text":"<p>A mouse click or drag occurred within the custom UI's area.</p>"},{"location":"effect-ui-events/PF_EventUnion/#pf_doclickeventinfo","title":"PF_DoClickEventInfo","text":"<p>Member</p> <p>Purpose</p> <p><code>when</code></p> <p>The (OS-level) time at which the click occurred.</p> <p><code>screen_point</code></p> <p>Where, in screen coordinates, the click occurred. For Custom Comp UI, these coordinates can be converted to composition coordinates using the UI Callbacks.</p> <p>See the CCU sample project for an example.</p> <p><code>num_clicks</code></p> <p>The number of clicks that occurred.</p> <p><code>modifiers</code></p> <p>Which modifier keys (if any) were held down during click.</p> <p><code>continue_refcon[4]</code></p> <p>An array of 4 <code>A_intptr_t</code> the plug-in can use to store information during a click-drag-drag sequence.</p> <p><code>send_drag</code></p> <p>Set this flag to <code>TRUE</code> to indicate continued dragging. The next click event will then effectively be a drag event.</p> <p><code>last_time</code></p> <p>Set when the drag event ends (the user has released the mouse button).</p>"},{"location":"effect-ui-events/PF_EventUnion/#draw","title":"Draw","text":"<p>After Effects needs your custom UI to refresh.</p> <p>Note: when handling draw requests, use the image dimensions provided in PF_InData (rather that the dimensions of your input layer, as you would during PF_Cmd_RENDER).</p>"},{"location":"effect-ui-events/PF_EventUnion/#pf_draweventinfo","title":"PF_DrawEventInfo","text":"<p>Member</p> <p>Purpose</p> <p><code>update_rect</code></p> <p>The rectangle in which to draw, in the context window's coordinate system. These coordinates can be converted to different coordinate systems using the UI Callbacks.</p> <p>See the CCU sample project for an example.</p> <p><code>depth</code></p> <p>Pixel depth of the drawing context.</p>"},{"location":"effect-ui-events/PF_EventUnion/#keydown","title":"Keydown","text":"<p>The user pressed a key, and the effect's UI is active.</p> <p>Use the macros in AE_EffectUI.h to access and manipulate the key codes received.</p> <p>In order to receive keydown events in Premiere Pro, plug-ins must set PF_CustomEFlag_COMP in PF_CustomUIInfo.events during PF_Cmd_PARAM_SETUP.</p>"},{"location":"effect-ui-events/PF_EventUnion/#pf_keydownevent","title":"PF_KeyDownEvent","text":"<p>Member</p> <p>Purpose</p> <p><code>when</code></p> <p>Time at which the click occurred.</p> <p><code>screen_point</code></p> <p>Screen coordinate of the mouse pointer when the key was pressed.</p> <p>For Custom Comp UI, these coordinates can be converted to composition coordinates using the UI Callbacks.</p> <p>See the CCU sample project for an example.</p> <p><code>key_code</code></p> <p>Either a character code (for printable characters, we use the unshifted upper case version; A not a, 7 not &amp;), or a control code:</p> <ul> <li><code>PF_ControlCode_Unknown</code></li> <li><code>PF_ControlCode_Space</code></li> <li><code>PF_ControlCode_Backspace</code></li> <li><code>PF_ControlCode_Tab</code></li> <li><code>PF_ControlCode_Return</code></li> <li><code>PF_ControlCode_Enter</code></li> <li><code>PF_ControlCode_Escape</code></li> <li><code>PF_ControlCode_F1</code></li> <li>...</li> <li><code>PF_ControlCode_F24</code></li> <li><code>PF_ControlCode_PrintScreen</code></li> <li><code>PF_ControlCode_ScrollLock</code></li> <li><code>PF_ControlCode_Pause</code></li> <li><code>PF_ControlCode_Insert</code></li> <li><code>PF_ControlCode_Delete</code></li> <li><code>PF_ControlCode_Home</code></li> <li><code>PF_ControlCode_End</code></li> <li><code>PF_ControlCode_PageUp</code></li> <li><code>PF_ControlCode_PageDown</code></li> <li><code>PF_ControlCode_Help</code></li> <li><code>PF_ControlCode_Clear</code></li> <li><code>PF_ControlCode_Left</code></li> <li><code>PF_ControlCode_Right</code></li> <li><code>PF_ControlCode_Up</code></li> <li><code>PF_ControlCode_Down</code></li> <li><code>PF_ControlCode_NumLock</code></li> <li><code>PF_ControlCode_Command</code></li> <li><code>PF_ControlCode_Option</code></li> <li><code>PF_ControlCode_Alt</code> = <code>PF_ControlCode_Option</code></li> <li><code>PF_ControlCode_Control</code></li> <li><code>PF_ControlCode_Shift</code></li> <li><code>PF_ControlCode_CapsLock</code></li> <li><code>PF_ControlCode_ContextMenu</code></li> </ul> <p><code>modifiers</code></p> <p>Which (if any) modifier keys were down during the key press.</p> <ul> <li><code>PF_Mod_NONE</code></li> <li><code>PF_Mod_CMD_CTRL_KEY</code> (cmd on Mac, ctrl on Windows)</li> <li><code>PF_Mod_SHIFT_KEY</code></li> <li><code>PF_Mod_CAPS_LOCK_KEY</code></li> <li><code>PF_Mod_OPT_ALT_KEY</code> (option on Mac, alt on Windows)</li> <li><code>PF_Mod_MAC_CONTROL_KEY</code></li> </ul>"},{"location":"effect-ui-events/PF_EventUnion/#adjustcursor","title":"AdjustCursor","text":"<p>The cursor has moved onto (but not off of) the effect's custom UI, to allow the effect to change the cursor.</p>"},{"location":"effect-ui-events/PF_EventUnion/#pf_adjustcursoreventinfo","title":"PF_AdjustCursorEventInfo","text":"<p><code>modifiers</code></p> <p>What, if any, modifier keys were held down when the message was sent.</p> <p><code>set_cursor</code></p> <p>Set this to your desired cursor, or <code>PF_Cursor_CUSTOM</code> if you have set the cursor yourself using OS-specific calls. See AE_EffectUI.h for a complete enumeration of built-in cursors.</p> <p>If you don't want to override the cursor, set this to <code>PF_Cursor_NONE</code>, or simply ignore this message.</p>"},{"location":"effect-ui-events/PF_EventUnion/#member","title":"Member","text":"<p><code>screen_point</code></p>"},{"location":"effect-ui-events/PF_EventUnion/#purpose","title":"Purpose","text":"<p>Screen coordinate of the mouse pointer. For Custom Comp UI, these coordinates can be converted to composition coordinates using the UI Callbacks.</p> <p>See the CCU sample project for an example.</p>"},{"location":"effect-ui-events/PF_EventUnion/#arbitrary-parameters-event","title":"Arbitrary Parameters Event","text":"<p>After Effects needs your plug-in to manage it's arbitrary data parameter(s).</p> <p>Though arbitrary data types are not required for custom UI support, <code>PF_ArbParamsExtra</code> follows the EventInfo model.</p>"},{"location":"effect-ui-events/PF_EventUnion/#pf_arbparamsextra","title":"PF_ArbParamsExtra","text":"Member Purpose <code>which_function</code> A <code>PF_FunctionSelector</code> indicating which function is called <code>id</code> Used by After Effects; will match the ID assigned to the arbitrary data type during PF_Cmd_PARAM_SETUP. <code>padding</code> Used for byte-alignment <pre><code>u {\n  new_func_params\n  dispose_func_params\n  copy_func_params\n  flat_size_func_params\n  flatten_func_params\n  unflatten_func_params\n  interp_func_params\n  compare_func_params\n  print_size_func_params\n  print_func_params\n  scan_func_params\n}\n</code></pre> (One of these will be passed; see Arbitrary Data Parameters)"},{"location":"effect-ui-events/custom-ui-and-drawbot/","title":"Custom UI &amp; Drawbot","text":"<p>Custom UI uses a composited drawing model using Drawbot. The Drawbot suites can be used for:</p> <ol> <li>Basic 2D path drawing: Lines, Rect, Arc, Bezier</li> <li>Stroking/Filling/Shading paths</li> <li>Image drawing: Compositing an ARGB/BGRA buffer onto the surface</li> <li>Pushing/popping surface state</li> <li>Text drawing, if supplier supports it (clients should first check if text drawing is supported before actual drawing)</li> </ol> <p>Drawing may only occur during <code>PF_Event_DRAW</code> (and not during <code>PF_Event_DRAG</code> or <code>PF_Event_DO_CLICK</code>).</p> <p>To use Drawbot, first get the drawing reference by passing in PF_Context to a new suite call PF_GetDrawingReference.</p> <p>If a non-NULL drawing reference is returned, use it to get the supplier and surface references from DRAWBOT_DrawbotSuite.</p> <p>The Drawbot suites include <code>DRAWBOT_DrawbotSuite</code>, <code>DRAWBOT_SupplierSuite</code>, <code>DRAWBOT_SurfaceSuite</code>, <code>DRAWBOT_PathSuite</code>.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#make-your-custom-ui-look-not-so-custom","title":"Make Your Custom UI Look Not So \"Custom\"","text":"<p>Use the new PF_EffectCustomUIOverlayThemeSuite to match the host application UI. Your users will thank you.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#redrawing","title":"Redrawing","text":"<p>In order to redraw a specific area of a pane, we recommend the following:</p> <ol> <li>Call <code>PF_InvalidateRect</code> (from PF_AppSuite) from the effect. This will cause a lazy display redraw, and will update at the next available idle moment. This rect is in coordinates related to the associated pane. Using a NULL rect will update the entire pane.</li> <li>Set the event outflag to <code>PF_EO_UPDATE_NOW</code>, which will cause an immediate draw event for the specified pane when the current event returns.</li> </ol> <p>If an effect needs to update more than one window at a time, it should set <code>PF_OutFlag_REFRESH_UI</code> (from PF_OutFlags), which will cause a redraw of the entire ECW, comp, and layer windows.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#hidpi-and-retina-display-support","title":"HiDPI and Retina Display Support","text":"<p>To support HiDPI and Retina Displays, you can use offscreen images that are twice the size, and then use the <code>Transform</code> function from Drawbot_SurfaceSuite to scale the image down in half before drawing it.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#pf_effectcustomuisuite","title":"PF_EffectCustomUISuite","text":"<p>Enables an effect to get the drawing reference. This is the first call needed to use Drawbot.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#pf_effectcustomuisuite1","title":"PF_EffectCustomUISuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_GetDrawingReference</code></p> <p>Get the drawing reference.</p> <p><pre><code> PF_GetDrawingReference(\n  const PF_ContextH  effect_contextH,\n  DRAWBOT_DrawRef    *referenceP0);\n</code></pre></p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_drawbotsuite","title":"Drawbot_DrawbotSuite","text":"<p>Using the Drawbot reference, get the supplier and surface references.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_drawbotsuite1","title":"Drawbot_DrawbotSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>GetSupplier</code></p> <p>Get the supplier reference.</p> <p>Needed to use Drawbot_SupplierSuite.</p> <p><pre><code> GetSupplier(\n  DRAWBOT_DrawRef      in_drawbot_ref,\n  DRAWBOT_SupplierRef  *out_supplierP);\n</code></pre></p> <p><code>GetSurface</code></p> <p>Get the surface reference.</p> <p>Needed to use Drawbot_SurfaceSuite.</p> <p><pre><code> GetSurface(\n  DRAWBOT_DrawRef     in_drawbot_ref,\n  DRAWBOT_SurfaceRef  *out_surfaceP);\n</code></pre></p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_suppliersuite","title":"Drawbot_SupplierSuite","text":"<p>Calls to create and release drawing tools, get default settings, and query drawing capabilities.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_suppliersuite1","title":"Drawbot_SupplierSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>NewPen</code></p> <p>Create a new pen. Release this using <code>ReleaseObject</code> from Drawbot_SupplierSuite.</p> <p><pre><code> NewPen(\n  DRAWBOT_SupplierRef      in_supplier_ref,\n  const DRAWBOT_ColorRGBA  *in_colorP,\n  float                    in_size,\n  DRAWBOT_PenRef           *out_penP);\n</code></pre></p> <p><code>NewBrush</code></p> <p>Create a new brush. Release this using <code>ReleaseObject</code> from Drawbot_SupplierSuite.</p> <p><pre><code> NewBrush(\n  DRAWBOT_SupplierRef      in_supplier_ref,\n  const DRAWBOT_ColorRGBA  *in_colorP,\n  DRAWBOT_BrushRef         *out_brushP);\n</code></pre></p> <p><code>SupportsText</code></p> <p>Check if current supplier supports text.</p> <p><pre><code> SupportsText(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_Boolean      *out_supports_textB);\n</code></pre></p> <p><code>GetDefaultFontSize</code></p> <p>Get the default font size.</p> <p><pre><code> GetDefaultFontSize(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  float                *out_font_sizeF);\n</code></pre></p> <p><code>NewDefaultFont</code></p> <p>Create a new font with default settings.</p> <p>You can pass the default font size from <code>GetDefaultFontSize</code>.</p> <p>Release this using <code>ReleaseObject</code> from Drawbot_SupplierSuite.</p> <p><pre><code> NewDefaultFont(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  float                in_font_sizeF,\n  DRAWBOT_FontRef      *out_fontP);\n</code></pre></p> <p><code>NewImageFromBuffer</code></p> <p>Create a new image from buffer passed to in_dataP.</p> <p>Release this using <code>ReleaseObject</code> from Drawbot_SupplierSuite.</p> <p><pre><code> NewImageFromBuffer(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  int                  in_width,\n  int                  in_height,\n  int                  in_row_bytes,\n  DRAWBOT_PixelLayout  in_pl,\n  const void           *in_dataP,\n  DRAWBOT_ImageRef     *out_imageP);\n</code></pre></p> <p><code>DRAWBOT_PixelLayout</code> can be one of the following:</p> <ul> <li><code>kDRAWBOT_PixelLayout_24RGB</code></li> <li><code>kDRAWBOT_PixelLayout_24BGR</code></li> <li><code>kDRAWBOT_PixelLayout_32RGB</code></li> <li><code>ARGB</code> (A is ignored)</li> <li><code>kDRAWBOT_PixelLayout_32BGR</code></li> <li><code>BGRA</code> (A is ignored)</li> <li><code>kDRAWBOT_PixelLayout_32ARGB_Straight</code></li> <li><code>kDRAWBOT_PixelLayout_32ARGB_Premul</code></li> <li><code>kDRAWBOT_PixelLayout_32BGRA_Straight</code></li> <li><code>kDRAWBOT_PixelLayout_32BGRA_Premul</code></li> </ul> <p><code>NewPath</code></p> <p>Create a new path. Release this using <code>ReleaseObject</code> from Drawbot_SupplierSuite.</p> <p><pre><code> NewPath(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_PathRef      *out_pathP);\n</code></pre></p> <p><code>SupportsPixelLayoutBGRA</code></p> <p>A given Drawbot implementation can support multiple channel orders, but will likely prefer one over the other.</p> <p>Use the following four callbacks to get the preferred channel order for any API that takes a <code>DRAWBOT_PixelLayout</code> (e.g. <code>NewImageFromBuffer</code>).</p> <p><pre><code> SupportsPixelLayoutBGRA(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_Boolean      *out_supports_bgraPB);\n</code></pre></p> <p><code>PrefersPixelLayoutBGRA</code></p> <p><pre><code>PrefersPixelLayoutBGRA(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_Boolean      *out_prefers_bgraPB);\n</code></pre></p> <p><code>SupportsPixelLayoutARGB</code></p> <p><pre><code>SupportsPixelLayoutARGB(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_Boolean      *out_supports_argbPB);\n</code></pre></p> <p><code>PrefersPixelLayoutARGB</code></p> <p><pre><code>PrefersPixelLayoutARGB(\n  DRAWBOT_SupplierRef  in_supplier_ref,\n  DRAWBOT_Boolean      *out_prefers_argbPB);\n</code></pre></p> <p><code>RetainObject</code></p> <p>Retain (increase reference count on) any object (pen, brush, path, etc). For example, it should be used when any object is copied and the copied object should be retained.</p> <p><pre><code> RetainObject(\n  DRAWBOT_ObjectRef  in_obj_ref);\n</code></pre></p> <p><code>ReleaseObject</code></p> <p>Release (decrease reference count on) any object (pen, brush, path, etc). This function MUST be called for any object created using <code>NewXYZ()</code> from this suite.</p> <p>Do not call this function on a <code>DRAWBOT_SupplierRef</code> and <code>DRAWBOT_SupplierRef</code>, since these are not created by the plug-in.</p> <p><pre><code> ReleaseObject(\n  DRAWBOT_ObjectRef  in_obj_ref);\n</code></pre></p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_surfacesuite","title":"Drawbot_SurfaceSuite","text":"<p>Calls to draw on the surface, and to query and set drawing settings.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_surfacesuite1","title":"Drawbot_SurfaceSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PushStateStack</code></p> <p>Push the current surface state onto the stack. It should be popped to retrieve old state.</p> <p>It is required to restore state if you are going to clip or transform a surface or change the interpolation or anti-aliasing policy.</p> <p><pre><code> PushStateStack(\n  DRAWBOT_SurfaceRef  in_surface_ref);\n</code></pre></p> <p><code>PopStateStack</code></p> <p>Pop the last pushed surface state off the stack.</p> <p><pre><code> PopStateStack(\n  DRAWBOT_SurfaceRef  in_surface_ref);\n</code></pre></p> <p><code>PaintRect</code></p> <p>Paint a rectangle with a color on the surface.</p> <p><pre><code> PaintRect(\n  DRAWBOT_SurfaceRef       in_surface_ref,\n  const DRAWBOT_ColorRGBA  *in_colorP,\n  const DRAWBOT_RectF32    *in_rectPR);\n</code></pre></p> <p><code>FillPath</code></p> <p>Fill a path using a brush and fill type.</p> <p><pre><code> FillPath(\n  DRAWBOT_SurfaceRef  in_surface_ref,\n  DRAWBOT_BrushRef    in_brush_ref,\n  DRAWBOT_PathRef     in_path_ref,\n  DRAWBOT_FillType    in_fill_type);\n</code></pre></p> <p><code>DRAWBOT_FillType</code> is one of the following:</p> <ul> <li><code>kDRAWBOT_FillType_EvenOdd</code></li> <li><code>kDRAWBOT_FillType_Winding</code> </li> </ul> <p><code>StrokePath</code></p> <p>Stroke a path using a pen.</p> <p><pre><code> StrokePath(\n  DRAWBOT_SurfaceRef  in_surface_ref,\n  DRAWBOT_PenRef      in_pen_ref,\n  DRAWBOT_PathRef     in_path_ref);\n</code></pre></p> <p><code>Clip</code></p> <p>Clip the surface.</p> <p><pre><code> Clip(\n  DRAWBOT_SurfaceRef    in_surface_ref,\n  DRAWBOT_SupplierRef   in_supplier_ref,\n  const DRAWBOT_Rect32  *in_rectPR);\n</code></pre></p> <p><code>GetClipBounds</code></p> <p>Get clip bounds.</p> <p><pre><code> GetClipBounds(\n  DRAWBOT_SurfaceRef  in_surface_ref,\n  DRAWBOT_Rect32      *out_rectPR);\n</code></pre></p> <p><code>IsWithinClipBounds</code></p> <p>Checks whether a rect is within the clip bounds.</p> <p><pre><code> IsWithinClipBounds(\n  DRAWBOT_SurfaceRef    in_surface_ref,\n  const DRAWBOT_Rect32  *in_rectPR,\n  DRAWBOT_Boolean       *out_withinPB);\n</code></pre></p> <p><code>Transform</code></p> <p>Transform the last surface state.</p> <p><pre><code> Transform(\n  DRAWBOT_SurfaceRef       in_surface_ref,\n  const DRAWBOT_MatrixF32  *in_matrixP);\n</code></pre></p> <p><code>DrawString</code></p> <p>Draw a string.</p> <p><pre><code> DrawString(\n  DRAWBOT_SurfaceRef       in_surface_ref,\n  DRAWBOT_BrushRef         in_brush_ref,\n  DRAWBOT_FontRef          in_font_ref,\n  const DRAWBOT_UTF16Char  *in_stringP,\n  const DRAWBOT_PointF32   *in_originP,\n  DRAWBOT_TextAlignment    in_alignment_style,\n  DRAWBOT_TextTruncation   in_truncation_style,\n  float                    in_truncation_width);\n</code></pre></p> <p><code>DRAWBOT_TextAlignment</code> is one of the following:</p> <ul> <li><code>kDRAWBOT_TextAlignment_Left</code></li> <li><code>kDRAWBOT_TextAlignment_Center</code></li> <li><code>kDRAWBOT_TextAlignment_Right</code></li> </ul> <p><code>DRAWBOT_TextTruncation</code> is one of the following:</p> <ul> <li><code>kDRAWBOT_TextTruncation_None</code></li> <li><code>kDRAWBOT_TextTruncation_End</code></li> <li><code>kDRAWBOT_TextTruncation_EndEllipsis</code></li> <li><code>kDRAWBOT_TextTruncation_PathEllipsis</code></li> </ul> <p><code>DrawImage</code></p> <p>Draw an image created using <code>NewImageFromBuffer()</code> on the surface. Alpha = [0.0f, 1.0f ].</p> <p><pre><code> DrawImage(\n  DRAWBOT_SurfaceRef      in_surface_ref,\n  DRAWBOT_ImageRef        in_image_ref,\n  const DRAWBOT_PointF32  *in_originP,\n  float                   in_alpha);\n</code></pre></p> <p><code>SetInterpolationPolicy</code></p> <p><pre><code>SetInterpolationPolicy(\n  DRAWBOT_SurfaceRef           in_surface_ref,\n  DRAWBOT_InterpolationPolicy  in_interp);\n</code></pre></p> <p><code>DRAWBOT_InterpolationPolicy</code> is one of the following:</p> <ul> <li><code>kDRAWBOT_InterpolationPolicy_None</code></li> <li><code>kDRAWBOT_InterpolationPolicy_Med</code></li> <li><code>kDRAWBOT_InterpolationPolicy_High</code></li> </ul> <p><code>GetInterpolationPolicy</code></p> <p><pre><code>GetInterpolationPolicy(\n  DRAWBOT_SurfaceRef           in_surface_ref,\n  DRAWBOT_InterpolationPolicy  *out_interpP);\n</code></pre></p> <p><code>SetAntiAliasPolicy</code></p> <p><pre><code>SetAntiAliasPolicy(\n  DRAWBOT_SurfaceRef       in_surface_ref,\n  DRAWBOT_AntiAliasPolicy  in_policy);\n</code></pre></p> <p><code>DRAWBOT_AntiAliasPolicy</code> is one of the following:</p> <ul> <li><code>kDRAWBOT_AntiAliasPolicy_None</code></li> <li><code>kDRAWBOT_AntiAliasPolicy_Med</code></li> <li><code>kDRAWBOT_AntiAliasPolicy_High</code> </li> </ul> <p><code>GetAntiAliasPolicy</code></p> <p><pre><code>GetAntiAliasPolicy(\n  DRAWBOT_SurfaceRef       in_surface_ref,\n  DRAWBOT_AntiAliasPolicy  *out_policyP);\n</code></pre></p> <p><code>Flush</code></p> <p>Flush drawing. This is not always needed, and if overused, may cause excessive redrawing and flashing.</p> <p><pre><code> Flush(\n  DRAWBOT_SurfaceRef  in_surface_ref);\n</code></pre></p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_pathsuite","title":"Drawbot_PathSuite","text":"<p>Calls to draw paths.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#drawbot_pathsuite1","title":"Drawbot_PathSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>MoveTo</code></p> <p>Move to a point.</p> <p><pre><code> MoveTo(\n  DRAWBOT_PathRef  in_path_ref,\n  float            in_x,\n  float            in_y);\n</code></pre></p> <p><code>LineTo</code></p> <p>Add a line to the path.</p> <p><pre><code> LineTo(\n  DRAWBOT_PathRef  in_path_ref,\n  float            in_x,\n  float            in_y);\n</code></pre></p> <p><code>BezierTo</code></p> <p>Add a cubic bezier to the path.</p> <p><pre><code> BezierTo(\n  DRAWBOT_PathRef         in_path_ref,\n  const DRAWBOT_PointF32  *in_pt1P,\n  const DRAWBOT_PointF32  *in_pt2P,\n  const DRAWBOT_PointF32  *in_pt3P);\n</code></pre></p> <p><code>AddRect</code></p> <p>Add a rect to the path.</p> <p><pre><code> AddRect(\n  DRAWBOT_PathRef        in_path_ref,\n  const DRAWBOT_RectF32  *in_rectPR);\n</code></pre></p> <p><code>AddArc</code></p> <p>Add a arc to the path. Zero start degrees == 3 o'clock.</p> <p>Sweep is clockwise. Units for angle are in degrees.</p> <p><pre><code> AddArc(\n  DRAWBOT_PathRef         in_path_ref,\n  const DRAWBOT_PointF32  *in_centerP,\n  float                   in_radius,\n  float                   in_start_angle,\n  float                   in_sweep);\n</code></pre></p> <p><code>Close</code></p> <p>Close the path.</p> <p><pre><code> Close(\n  DRAWBOT_PathRef  in_path_ref);\n</code></pre></p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#pf_effectcustomuioverlaythemesuite","title":"PF_EffectCustomUIOverlayThemeSuite","text":"<p>This suite should be used for stroking and filling paths and vertices on the Composition and Layer Windows. After Effects is using this suite internally, and we have made it available to make custom UI look consistent across effects. The foreground/shadow colors are computed based on the app brightness level so that custom UI is always visible regardless of the application's Brightness setting in the Preferences.</p>"},{"location":"effect-ui-events/custom-ui-and-drawbot/#pf_effectcustomuioverlaythemesuite1","title":"PF_EffectCustomUIOverlayThemeSuite1","text":"<p>Function</p> <p>Purpose</p> <p><code>PF_GetPreferredForegroundColor</code></p> <p>Get the preferred foreground color.</p> <p><pre><code> PF_GetPreferredForegroundColor(\n  DRAWBOT_ColorRGBA  *foreground_colorP);\n</code></pre></p> <p><code>PF_GetPreferredShadowColor</code></p> <p>Get the preferred shadow color.</p> <p><pre><code> PF_GetPreferredShadowColor(\n  DRAWBOT_ColorRGBA  *shadow_colorP);\n</code></pre></p> <p><code>PF_GetPreferredStrokeWidth</code></p> <p>Get the preferred foreground &amp; shadow stroke width.</p> <p><pre><code> PF_GetPreferredStrokeWidth(\n  float  *stroke_widthPF);\n</code></pre></p> <p><code>PF_GetPreferredVertexSize</code></p> <p>Get the preferred vertex size.</p> <p><pre><code> PF_GetPreferredVertexSize(\n  float  *vertex_sizePF);\n</code></pre></p> <p><code>PF_GetPreferredShadowOffset</code></p> <p>Get the preferred shadow offset.</p> <p><pre><code> PF_GetPreferredShadowOffset(\n  A_LPoint  *shadow_offsetP);\n</code></pre></p> <p><code>PF_StrokePath</code></p> <p>Stroke the path with the overlay theme foreground color.</p> <p>Optionally draw the shadow using the overlay theme shadow color.</p> <p>Uses overlay theme stroke width for stroking foreground and shadow strokes.</p> <p><pre><code> PF_StrokePath(\n  const DRAWBOT_DrawRef  drawbot_ref,\n  const DRAWBOT_PathRef  path_ref\n  PF_Boolean             draw_shadowB);\n</code></pre></p> <p><code>PF_FillPath</code></p> <p>Fills the path with overlay theme foreground color.</p> <p>Optionally draw the shadow using the overlay theme shadow color.</p> <p><pre><code> PF_FillPath(\n  const DRAWBOT_DrawRef  drawbot_ref,\n  const DRAWBOT_PathRef  path_ref\n  PF_Boolean             draw_shadowB);\n</code></pre></p> <p><code>PF_FillVertex</code></p> <p>Fills a square vertex around the center point using the overlay theme foreground color and vertex size.</p> <p><pre><code> PF_FillVertex(\n  const DRAWBOT_DrawRef  drawbot_ref,\n  const A_FloatPoint     *center_pointP\n  PF_Boolean             draw_shadowB);\n</code></pre></p>"},{"location":"effect-ui-events/effect-ui-events/","title":"Effect UI &amp; Events","text":"<p>Effects can provide custom UI in two areas: (1) the Effect Controls Window (custom ECW UI), and (2) the Composition or Layer Windows (Custom Comp UI).</p> <p>Effects that use custom UI should set <code>PF_OutFlag_CUSTOM_UI</code> (from PF_OutFlags during <code>PF_Cmd_GLOBAL_SETUP</code> (from Global Selectors), and handle the PF_Cmd_EVENT selector.</p> <p>Custom ECW UI allows an effect to provide a parameter with a customized control, which can be used either with standard parameter types or Arbitrary Data Parameters.</p> <p>Parameters that have a custom UI should set <code>PF_PUI_CONTROL</code> (from Parameter UI Flags) when adding the parameter.</p> <p>Custom Comp UI allows an effect to provide direct manipulation of the video in the Composition or Layer Windows.</p> <p>When the effect is selected, the Window can overlay custom controls directly on the video, and can handle user interaction with those controls, to adjust parameters more quickly and naturally.</p> <p>Effects should register themselves to receive events by calling PF_REGISTER_UI.</p> <p>After Effects can send events to effects for user interface handling and parameter management, integrating effects into its central message queue.</p> <p>While many events are sent in response to user input, After Effects also sends events to effects which manage arbitrary data parameters.</p> <p>The type of event is specified in PF_EventExtra-&gt;e_type and the various events are described below.</p>"},{"location":"effect-ui-events/effect-ui-events/#events","title":"Events","text":"<p>Event</p> <p>Indicates</p> <p><code>PF_Event_NEW_CONTEXT</code></p> <p>The user created a new context (probably by opening a window) for events.</p> <p>The plug-in is allowed to store state information inside the context using the context handle.</p> <p>PF_EventUnion contains valid context and type, but everything else should be ignored.</p> <p><code>PF_Event_ACTIVATE</code></p> <p>The user activated a new context (probably by bringing a window into the foreground). PF_EventUnion is empty.</p> <p><code>PF_Event_DO_CLICK</code></p> <p>The user clicked within the effect's UI. PF_EventUnion contains a <code>PF_DoClickEventInfo</code>.</p> <p>Handle the mouse click and respond, passing along drag info; see sample code), within a context.</p> <p>Note</p> <p>As of 7.0, do not block until mouse-up; instead, rely on <code>PF_Event_DRAG</code>.</p> <p><code>PF_Event_DRAG</code></p> <p>Also a Click Event, PF_EventUnion contains a <code>PF_DoClickEventInfo</code>.</p> <p>Request this by returning <code>send_drag == TRUE</code> from <code>PF_Event_DO_CLICK</code>.</p> <p>Do this so After Effects can see new data from the user's changes.</p> <p><code>PF_Event_DRAW</code></p> <p>Draw! PF_EventUnion contains a <code>PF_DrawEventInfo</code>.</p> <p><code>PF_Event_DEACTIVATE</code></p> <p>The user has deactivated a context (probably by bringing another window into the foreground). <code>PF_EventUnion</code> is empty.</p> <p><code>PF_Event_CLOSE_CONTEXT</code></p> <p>A context has been closed by the user. <code>PF_EventUnion</code> will be empty.</p> <p><code>PF_Event_IDLE</code></p> <p>A context is open but nothing is happening. <code>PF_EventUnion</code> is empty.</p> <p><code>PF_Event_ADJUST_CURSOR</code></p> <p>The mouse is over the plug-in's UI. Set the cursor by changing the <code>PF_CursorType</code> in the <code>PF_AdjustCursorEventInfo</code>.</p> <p>Use OS-specific calls to implement a custom cursor; tell After Effects you've done so by setting <code>PF_CursorType</code> to <code>PF_Cursor_CUSTOM</code>.</p> <p>Use an After Effects cursor whenever possible to preserve interface continuity.</p> <p><code>PF_Event_KEYDOWN</code></p> <p>Keystroke. PF_EventUnion contains a <code>PF_KeyDownEvent</code>.</p> <p><code>PF_Event_MOUSE_EXITED</code></p> <p>New in CS6. Notification that the mouse is no longer over a specific view (layer or comp only).</p>"},{"location":"effect-ui-events/tips-and-tricks/","title":"Tips &amp; Tricks","text":""},{"location":"effect-ui-events/tips-and-tricks/#ui-performance","title":"UI Performance","text":"<p>Experiment with <code>PF_EO_ALWAYS_UPDATE</code> and <code>PF_EO_NEVER_UPDATE</code> from PF_EventExtra, to find a happy medium between responsiveness and accuracy.</p> <p>On macOS, the foreground and background colors are not set to white and black when custom UI draw events are sent.</p> <p>This is by design; you don't have to change the background color when you're drawing directly into our context.</p>"},{"location":"effect-ui-events/tips-and-tricks/#how-deep-are-my-pixels","title":"How Deep Are My Pixels?","text":"<p>There is no way to determine the bit depth of the layer(s) being processed during events.</p> <p>However, you can cache the last-known pixel depth in your sequence data.</p> <p>Better still, you can have your fixed and float slider parameters rely on the <code>PF_ValueDisplayFlags</code> in their parameter definitions; if you use this, it will have your parameters' UI respond to the user's preferences for pixel display values.</p> <p>You can also check the depth of your input world during <code>PF_Cmd_RENDER</code>.</p>"},{"location":"effect-ui-events/tips-and-tricks/#arbitrary-data","title":"Arbitrary Data","text":"<p>An arbitrary data parameter is an excellent way to manage your custom UI.</p> <p>Store state, preference, and last-item-used information in an arb, and you'll always be able to recover it.</p> <p>After Effects manages parameters with a much richer message stream than custom UIs.</p>"},{"location":"effect-ui-events/tips-and-tricks/#custom-ui-implementation-for-color-sampling-using-keyframes","title":"Custom UI Implementation for Color Sampling, Using Keyframes","text":"<p>A plug-in may want to get a color from a layer within a composition. The user would use the eyedropper associated with a color parameter, or the plug-in's custom composition panel UI, to select the point.</p> <p>During the click event, the plug-in converts the coordinates of the click into layer space, and stores that information in sequence data. It then forces a re-render, during which it has access to the color of the layer point corresponding to the stored coordinates.</p> <p>The plug-in stores the color value in sequence data, and cancels the render, requesting a redraw of the affected parameter(s).</p> <p>Finally, during the draw, the plug-in adds appropriate keyframes to its color parameter stream using the AEGP_KeyframeSuite.</p> <p>Yes, this means the effect needs to Cheating Effect Usage of AEGP Suites and use the AEGP API.</p>"},{"location":"effect-ui-events/ui-callbacks/","title":"UI Callbacks","text":"<p>After Effects provides callbacks for transposing between coordinate systems, and obtaining OS-specific information about drawing contexts, without guesswork or asking the OS directly. Use these callbacks! Pointers to these callbacks are provided in PF_EventCallbacks. Use the macros in AE_EffectUI.h and AE_EffectCB.h to access these routines.</p> <p>It is possible to build a functioning plug-in which utilizes a custom UI without implementing the coordinate system transposition callbacks. However, the moment a user zooms into the layer panel or rotates a layer, your plug-in will behave badly. We added these macros and callbacks so that custom user interfaces could be easily integrated into the After Effects UI, without inflicting user interface overhead on developers. Again, please use them!</p> <p>These macros default the refcon and context handle for simplicity. The refcon assumes you have a local variable named \"extra\". The default context is the current context. These default parameters are defined in the PF_EventCallbacks structure (in AE_EffectUI.h). You can override the defaults by accessing the callbacks through the PF_EventExtra structure. We don't recommend (or support) modification of the macros in the header file. Don't do it!</p> <p>Function</p> <p>Purpose</p> <p><code>layer_to_comp</code></p> <p>Transforms layer panel coordinates to the composition panel coordinates.</p> <p><pre><code>PF_Err layer_to_comp (\n  void           *refcon,\n  PF_ContextH    context,\n  A_long         curr_time,\n  A_long         time_scale,\n  PF_FixedPoint  *pt);\n</code></pre></p> <p><code>comp_to_layer</code></p> <p>Transforms composition panel coordinates to the layer panel coordinates.</p> <p><pre><code>PF_Err comp_to_layer (\n  void           *refcon,\n  PF_ContextH    context,\n  A_long         curr_time,\n  A_long         time_scale,\n  PF_FixedPoint  *pt);\n</code></pre></p> <p><code>get_comp2layer_xform</code></p> <p>Returns the matrix used to convert from the composition panel to the layer panel.</p> <p>If <code>*exists</code> returns <code>FALSE</code>, the matrix cannot be computed because the layer scales to zero.</p> <p><pre><code>PF_Err get_comp2layer_xform (\n  void            *refcon,\n  PF_ContextH     context,\n  A_long          curr_time,\n  long            time_scale,\n  long            *exists,\n  PF_FloatMatrix  *comp2layer);\n</code></pre></p> <p><code>get_layer2comp_xform</code></p> <p>Returns the transformation matrix used to convert from the layer panel to the composition panel.</p> <p>This always exists.</p> <p><pre><code>PF_Err get_layer2comp_xform (\n  void            *refcon,\n  PF_ContextH     context,\n  A_long          curr_time,\n  A_long          time_scale,\n  PF_FloatMatrix  *layer2comp);\n</code></pre></p> <p><code>source_to_frame</code></p> <p>Transforms the source coordinates in the current context to screen coordinates.</p> <p>Screen (frame) coordinates are affected by the current zoom level.</p> <p><pre><code>PF_Err source_to_frame(\n  void           *refcon,\n  PF_ContextH    context,\n  PF_FixedPoint  *pt);\n</code></pre></p> <p><code>frame_to_source</code></p> <p>Transforms the screen coordinates identified by <code>*pt</code> to the source coordinates of the current context.</p> <p><pre><code>PF_Err frame_to_source(\n  void           *refcon,\n  PF_ContextH    context,\n  PF_FixedPoint  *pt);\n</code></pre></p> <p><code>PF_GET_PLATFORM_DATA</code></p> <p>Retrieves platform-specific data. For plug-ins loaded with localized resource files, <code>PF_PlatData_RES_FILE_PATH</code> will point to the external file, not the plug-in file.</p> <p>Use <code>PF_PlatData_EXE_FILE_PATH</code> if you want the path of your plug-in.</p> <p>Starting in CS6, use <code>PF_PlatData_EXE_FILE_PATH_W</code> and <code>PF_PlatData_RES_FILE_PATH_W</code> instead of the old non-wide calls.</p> <p><pre><code>PF_Err PF_GET_PLATFORM_DATA (\n  PF_PlatDataID  which,\n  void           *ppData);\n</code></pre></p> <p><code>PF_PlatDataID</code> can have the following values:</p> <ul> <li><code>PF_PlatData_MAIN_WND</code></li> <li><code>PF_PlatData_EXE_FILE_PATH_DEPRECATED</code></li> <li><code>PF_PlatData_RES_FILE_PATH_DEPRECATED</code></li> <li><code>PF_PlatData_RES_REFNUM</code> // macOS</li> <li><code>PF_PlatData_RES_DLLINSTANCE</code> // Win</li> <li><code>PF_PlatData_BUNDLE_REF</code></li> <li><code>PF_PlatData_EXE_FILE_PATH_W</code> // new CS6</li> <li><code>PF_PlatData_RES_FILE_PATH_W</code> // new CS6</li> </ul>"},{"location":"intro/apple-silicon-support/","title":"Apple Silicon Support","text":"<p>Adobe now supports Apple Silicon effect plugins in some products running natively on Apple Silicon. For instance, After Effects effect plugins are also available in Adobe Premiere Pro and Adobe Media Encoder.</p> <p>Not all Adobe products have native Apple Silicon versions yet, but in those that do, only effect plugins with Apple Silicon implementations will be available. We recommend adding the Apple Silicon target soon in anticipation of rapid adoption of these new M1 machines.</p> <p>Note</p> <p>In order to build a Mac Universal binary, you will need Xcode 12.2 or greater.</p> <p>To learn more about Universal binaries, please visit https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary</p> <p>Loading plugins on macOS 15+ for debugging also requires an additional signing step. See here for details.</p>"},{"location":"intro/apple-silicon-support/#how-to-add-universal-binary-support-for-your-plugins","title":"How to add Universal Binary Support for your Plugins","text":"<ol> <li>Open your plugins Xcode project in 12.2 or above and Xcode will automatically add an Apple Silicon target for you.</li> </ol> <p> Mac Universal Build</p> <ol> <li>Tell After Effects what the main entry point is for Apple Silicon builds.</li> </ol> <ul> <li>Find the .r resource file for your plugin.</li> <li>Add <code>CodeMacARM64 {\"EffectMain\"}</code> next to your existing Intel Mac entry point definition.   <pre><code>#if defined(AE_OS_MAC)\n  CodeMacARM64 {\"EffectMain\"},\n  CodeMacIntel64 {\"EffectMain\"},\n#endif\n</code></pre></li> <li>If for some reason you need different entry points on x64 and ARM just provide a different entry point name and string.</li> </ul> <ol> <li>Compile the Universal binary by building for the Any Mac (Apple Silicon, Intel) Target, or by using Product -&gt; Archive.</li> </ol> <p>Assuming there are no compile time issues with the Apple Silicon build, you can now use the single Universal binary for both Intel and Apple Silicon applications.</p>"},{"location":"intro/apple-silicon-support/#exception-behavior-with-apple-silicon-across-c-functions","title":"Exception Behavior with Apple Silicon Across \"C\" Functions","text":"<p>Extra care should be taken when using exceptions on Apple Silicon. In many environments throwing exceptions that propagate through traditional \"C\" functions worked fine. It was bad practice, with undefined behavior, but generally \"worked\".</p> <p>On Apple Silicon, rather than undefined behavior the ABI has changed so terminate() is called when this occurs.</p> <p>Since the main entry point of a plugin is always an extern \"C\" calling convention, this code should be wrapped in a try/catch block to prevent program termination. For example:</p> <pre><code>PF_Err EffectMain ( PF_Cmd cmd,\n    PF_InData *in_data,\n    PF_OutData *out_data,\n    PF_ParamDef *params[],\n    PF_LayerDef *output )\n{\n    try\n    {\n        /* Your code here */\n    }\n    catch\n    {\n        /* return most appropriate PF_Err */\n    }\n}\n</code></pre>"},{"location":"intro/compatibility-across-multiple-versions/","title":"Compatibility Across Multiple Versions?","text":"<p>Generally, you should compile your plug-ins with the latest After Effects SDK headers. This makes the latest suites and API functionality available to your plug-ins. When a new version of After Effects is released, you generally will not need to provide a new version unless you wish to take advantage of new functionality exposed through the new SDK. However, you should always test your plug-in in new versions of After Effects before claiming compatibility with new versions.</p> <p>You should test your plug-in thoroughly in each version of After Effects supported by your plug-in. If you need to add a conditional block of code to be run only in specific versions of After Effects, you can always check the API version in PF_InData.version for effects, or in the major and minor_versionL passed into your AEGP in the Entry Point.</p> <p>For even more precise version checking, a plug-in can run a script using <code>AEGP_ExecuteScript</code> (AEGP_UtilitySuite6), querying one of the following attributes:</p> <pre><code>app.version - e.g. 11.0.1x12\napp.buildNumber - e.g. 12.\n</code></pre>"},{"location":"intro/compatibility-across-multiple-versions/#api-versions","title":"API Versions","text":"Release Effect API Version AEGP API Version 22.0 13.27 18.2 13.25 18.0 13.24 17.7 13.23 17.6 13.22 17.5 13.21 17.3 13.20 17.1 13.19 17.0 13.18 16.1 13.17 16.0 13.16 15.0 13.15 CC 2017.1 (14.2) 13.14 CC 2017 (14.0) 13.13 114.0 CC 2015.3 (13.8) 13.11 113.8 CC 2015 (13.7) 13.10 113.7 CC 2015 (13.6) 13.10 CC 2015 (13.5, 13.5.1) 13.9 113.5 CC 2014 (13.0-13.2) 13.7 113 CC (12.2) 13.6 112.2 CC (12.1) 13.5 112.1 CC (12.0) 13.4 112.0 CS6.0.1 (11.0.1) 13.3 111.0 CS6 (11.0) 13.2 111.0 CS5.5 (10.5) 13.1 17.0 CS5 (10.0) 13.0 17.0 CS4 (9.0) 12.14 16.24 CS3 (8.0) 12.13 16.24 7.0 12.12 6.5, 6.0 12.10 (Check for the presence of updated AEGP suites, should you need to differentiate between 6.0 and 6.5.) 5.0 12.5 4.1 12.2 3.1 11.6"},{"location":"intro/debugging-plug-ins/","title":"Debugging Plug-ins","text":"<p>The best way to learn the interaction(s) between After Effects and plug-ins is running the samples in your debugger. Spending some quality time in your compiler's debugger, and a sample project that closely resembles your plug-in, can really pay off.</p> <p>Once you've got the plug-in building directly into the plug-ins folder as explained above, here's how to specify After Effects as the application to run during debug sessions:</p>"},{"location":"intro/debugging-plug-ins/#windows","title":"Windows","text":"<ol> <li>In the Visual Studio solution, in the Solution Explorer panel, choose the project you want to debug</li> <li>Right-click it and choose Set as StartUp Project</li> <li>Right-click it again and choose Properties</li> <li>In Configuration Properties &gt; Debugging &gt; Command, provide the path to the executable file of the host application the plug-ins will be running in (this may be After Effects or Premiere Pro)</li> <li>From there you can either hit the Play button, or you can launch the application and later at any point choose Debug &gt; Attach to Process...</li> </ol>"},{"location":"intro/debugging-plug-ins/#macos","title":"macOS","text":"<ol> <li>In Xcode, in the Project Navigator, choose the xcodeproj you want to debug</li> <li>Choose Product &gt; Scheme &gt; Edit Scheme...</li> <li>Under Run, in the Info tab, for Executable, choose the host application the plug-ins will be running in (this may be After Effects or Premiere Pro)</li> <li>From there you can either hit the Play button to build and run the current scheme, or you can launch the application and later at any point choose Debug &gt; Attach to Process.</li> </ol>"},{"location":"intro/debugging-plug-ins/#signing-requirments-and-loading-unsigned-plug-ins","title":"Signing requirments and loading unsigned plug-ins","text":"<p>macOS versions 15+ prevent the loading of unsigned plugins. During development, you can avoid this difficulty by adding ad-hoc signing as a custom build step.</p> <p><code>codesign --force --deep --sign - /path/to/plugin.dylib</code></p> <p>Note: Yes, that trailing '-' after '--sign' is important.</p> <p>When you are ready to release, ensure that you do not make changes to the plug-in package after signing, as this will invalidate said signing and prevent the plug-in from loading.</p>"},{"location":"intro/debugging-plug-ins/#deleting-preferences","title":"Deleting Preferences","text":"<p>During the course of developing a plug-in, your plug-in may pass settings information to After Effects, which is then stored in its preferences file.</p> <p>You may delete the preferences and restart After Effects with a clean slate by holding down Ctrl-Alt-Shift / Cmd-Opt-Shift during launch.</p> <p>On Windows, the preferences are stored here: <code>[user folder]\\AppData\\Roaming\\Adobe\\After Effects\\[version]\\Adobe After Effects [version]-x64 Prefs.txt</code></p> <p>On macOS, they are stored here: <code>~/Library/Preferences/Adobe/After Effects/[version]/Adobe After Effects [version]-x64 Prefs</code></p>"},{"location":"intro/exceptions/","title":"Exceptions","text":"<p>Handle all exceptions generated by your plug-in's code, within your plug-in. Pass those which didn't originate in your plug-in's code to After Effects.</p> <p>After Effects' APIs are designed for plug-ins written in C, and don't expect exceptions. After Effects will crash immediately if one is thrown from within a plug-in.</p> <p>The effect samples use a firewall around the switch statement in the <code>main()</code> function, and the AEGPs wrap their function hooks in try/catch blocks.</p>"},{"location":"intro/how-to-start-creating-plug-ins/","title":"How To Start Creating Plug-ins","text":""},{"location":"intro/how-to-start-creating-plug-ins/#play","title":"Play!","text":"<p>Before you write a line of code, Spend some significant time playing with After Effects, and with the Sample Projects. Build the plug-ins into the right folder. Set lots of breakpoints, read the amusing and informative comments.</p> <p>See a quickstart video on building an effect (on macOS): quickstart video</p>"},{"location":"intro/how-to-start-creating-plug-ins/#plan","title":"Plan!","text":"<p>Be clear on what your plug-in will attempt to do.</p>"},{"location":"intro/how-to-start-creating-plug-ins/#hack","title":"Hack!","text":"<p>After experimenting with the samples, find one that does something like what you want to do. The temptation to start from scratch may be strong; fight it! For effects, use the Skeleton template project. Avoid the headache of reconstructing projects (including the troublesome custom build steps for Windows PiPL resource generation) by grafting your code into an existing project.</p>"},{"location":"intro/how-to-start-creating-plug-ins/#steal","title":"Steal!","text":"<p>To make the Skeleton sample your own, copy the entire \\Skeleton directory, renaming it to (for example) \\WhizBang. Using your text editor of choice, search \\WhizBang*.* (yes, that includes .NET and Xcode project files) for occurrences of Skeleton and SKELETON, and replace them with WhizBang and WHIZBANG.</p> <p>You now have a compiling and running plug-in that responds to common commands, handles 8 and 16-bpc color, uses our AEGP_SuiteHandler utility code, and responds to 3D light and camera information. There, was that so hard?</p> <p>AEGP developers will do well to start with Projector (for After Effects project creation support), Easy Cheese for a keyframe assistant, IO for media file format support, and Persisto for a simple menu command and working with preferences.</p>"},{"location":"intro/how-to-start-creating-plug-ins/#test","title":"Test!","text":"<p>If only for testing convenience, you should have a project saved with your effect applied, and all its parameters keyframed to strange values. Between these projects which stress your plug-in, and the tools provided by your development environment, you're well on your way to shipping some tested code.</p>"},{"location":"intro/how-to-start-creating-plug-ins/#blame","title":"Blame!","text":"<p>If you run into behavior that seems wrong, see if you can reproduce the behavior using one of the unmodified sample projects. This can save you a lot of time, if you can determine whether the bug behavior was introduced by your modifications, or was already there to begin with.</p>"},{"location":"intro/how-to-start-creating-plug-ins/#developers-matter","title":"Developers Matter","text":"<p>Third party developers drive API and SDK improvement and expansion. Your products enable After Effects to do things we'd never considered. Your efforts make After Effects better; keep it up!</p> <p>We work hard on the SDK, and welcome your comments and feedback. Almost every change we make to the API is suggested by developers like you. Give us feedback</p>"},{"location":"intro/localization/","title":"Localization","text":"<p>Starting in CC, PF App Suite (Useful Utility Functions) adds <code>PF_AppGetLanguage()</code> to query the current language so that a plug-in can use the correct language string.</p> <p>When passing strings to AE, some parts of the API accept Unicode. In other areas, for example when specifying effect parameter names during <code>PF_Cmd_PARAM_SETUP</code>, you'll need to pass the names in a char string. For these non-Unicode strings, AE interprets strings as being multi-byte encoded using the application's current locale. To build these strings, on Windows you can use the <code>WideCharToMultiByte()</code> function, specifying <code>CP_OEMCP</code> as the first argument. On macOS, use the encoding returned by <code>GetApplicationTextEncoding()</code>.</p> <p>Testing with different languages in AE doesn't require an OS reinstallation, but it does require a reinstallation of AE:</p>"},{"location":"intro/localization/#windows","title":"Windows","text":"<ul> <li>Change the system locale to the targeted language (control panel &gt; region and language &gt; administrative tab &gt; change system locale)</li> <li>Restart machine</li> <li>Install AE in the according language.</li> </ul>"},{"location":"intro/localization/#macos","title":"MacOS","text":"<ul> <li>Set targeted language to the primary language in the preferred language list</li> <li>Install AE in the according language.</li> </ul>"},{"location":"intro/next-steps/","title":"Next Steps","text":"<p>You now have an understanding of what plug-ins are, what they can do, and how After Effects communicates with them.</p> <p>Next, we will cover the basics of effects plug-ins.</p>"},{"location":"intro/other-integration-possibilities/","title":"Other Integration Possibilities","text":"<p>Although this SDK describes the majority of integration possibilities with After Effects, there are other possibilities not to be overlooked.</p>"},{"location":"intro/other-integration-possibilities/#scripting","title":"Scripting","text":"<p>Scripting is a relatively nimble and lightweight means to perform automated tasks with After Effects. ScriptUI is one way you can provide UI integration with custom dialogs and panels (see HTML5 Panels too). And scripting may be used in tandem with plug-in development, in the cases where a certain function is made available via scripting and not via the C APIs described in this document.</p> <p>Scripting in After Effects is done using ExtendScript, based on JavaScript. After Effects includes the ExtendScript ToolKit, a convenient interface for creating and testing your own scripts. Scripts may be compiled into .jsxbin binary files, to protect intellectual property.</p> <p>You can access the After Effects Scripting Guide, and find a link to the scripting forums, on the Adobe I/O website at: https://www.adobe.io/apis/creativecloud/aftereffects.html</p> <p>After Effects can be driven by executing scripts from the commandline. In your script, you can open the project and run script actions on it. So for example, you can execute the following statement to run a script from the command line directly:</p> <pre><code>AfterFX -s \"app.quit()\"\n</code></pre> <p>Or you can execute this statement to run a .jsx script that includes a quit at the end:</p> <pre><code>AfterFX -r path_to_jsx_script\n</code></pre> <p>On Windows, AfterFX.com is the way to get feedback to the console, because AfterFX.com is a command line application.</p>"},{"location":"intro/other-integration-possibilities/#html5-panels","title":"HTML5 Panels","text":"<p>In CC 2014 and later, After Effects supports HTML5 panels. They are accessed in After Effects from Window &gt; Extensions &gt; (your panel name). Panels can be resized and docked just like any other panel in After Effects. Panels are built using HTML5, After Effects Scripting, and JavaScript. You may download the After Effects Panel SDK from the the Adobe I/O website at: https://www.adobe.io/apis/creativecloud/aftereffects.html</p>"},{"location":"intro/other-integration-possibilities/#aerender","title":"AERender","text":"<p>Closely coupled with scripting is the command line interface offered by aerender. aerender is primarily suited to allow automated renders, but can be used to execute any sequence of scripting commands from the command line. An overview is available in the After Effects help documents here: https://helpx.adobe.com/after-effects/using/automated-rendering-network-rendering.html</p>"},{"location":"intro/other-integration-possibilities/#premiere-pro-importers","title":"Premiere Pro Importers","text":"<p>Premiere Pro importers provide support for importing media into applications across most applications in the Adobe Creative Cloud, including Premiere Pro, Media Encoder, Prelude, and Audition. Because of this broader compatibility, unless you need very specific integration with After Effects only available via the AEIO API in this SDK, we recommend developing a Premiere Pro importer. The Premiere Pro SDK is available at: https://www.adobe.io/apis/creativecloud/premierepro.html</p> <p>One advantage of MediaCore importer plug-ins over AEIOs is its priority system: The highest priority importer gets first crack at importing a file, and if the particular imported file isn't supported, the next-highest priority importer will then have the opportunity to try importing it, and so on.</p>"},{"location":"intro/other-integration-possibilities/#mercury-transmit","title":"Mercury Transmit","text":"<p>Mercury Transmit plug-ins are used for sending video to output hardware for broadcast-quality monitoring. Transmitters are supported across most applications in the Adobe Creative Cloud, including Premiere Pro, After Effects, Prelude, and Character Animator. The Mercury Transmit API is documented in the Premiere Pro SDK, available at: https://www.adobe.io/apis/creativecloud/premierepro.html</p>"},{"location":"intro/pipl-resources/","title":"PiPL Resources","text":"<p>Originating in Adobe Photoshop over two decades ago, Plug-In Property Lists, or PiPLs, are resources which provide basic information about a plug-in's behavior, without executing the plug-in. PiPLs have been largely supplanted within After Effects by <code>PF_Cmd_GLOBAL_SETUP</code> (see Global Selectors) and dynamic outflags. However, for archaeological reasons, the behaviors indicated during <code>PF_Cmd_GLOBAL_SETUP</code> must agree with those in the PiPL.</p> <p>In the interest of cross-platform compatibility, use a single .r file for both macOS and Windows versions of your plug-in, like the samples do. PiPL properties must always be in macOS-specific byte order. On Windows, PiPLs are compiled by processing a .r file through pipltool.exe, which converts the .r file into a binary .rc file. The Windows sample projects all contain custom build steps which generate a .rc file, using a cross-platform .r file and our cnvtpipl.exe command line utility. Base your development on an existing sample plug-in and the build step will be correctly implemented.</p> <p>PiPL Property</p> <p>Purpose</p> <p>Kind</p> <p>Plug-in type. AEEffect for an Effect.</p> <p>Name</p> <p>Display name which can be up to 47 characters long.</p> <p>Category</p> <p>Effect category for menus and the Effects and Presets panel</p> <p>Entry Point (one for each platform)</p> <p>Your plug-in's entry point is exported through the PiPL on Windows and macOS. If the plug-in supports multiple platforms, then multiple entry points must be defined in the PiPL. There is no need for a Windows .def file or manual exports, unless you're also designating some other OS-specific entry point.</p> <p>The macros defined in entry.h (in the \\SDKExamplesHeaders directory) take care of exporting each sample's entry point function. All the sample project entry point functions are <code>EffectMain()</code> for effects, or <code>EntryPointFunc()</code> for AEGPs.</p> <p>AE_PiPL_Version</p> <p>Unused</p> <p>AE_Effect_Spec_Version</p> <p>SDK version the effect was built with</p> <p>AE_Effect_Version</p> <p>The version of the effect</p> <p>AE_Effect_Info_Flags</p> <p>Unused</p> <p>AE_Effect_Global_OutFlags</p> <p>Must match the <code>out_flags</code> set in GlobalSetup</p> <p>AE_Effect_Global_OutFlags_2</p> <p>Must match the <code>out_flags2</code> set in GlobalSetup</p> <p>AE_Effect_Match_Name</p> <p>A unique, constant identifier, unlike a plug-in's display name, which may be changed dynamically.</p> <p>AE_Reserved_Info</p> <p>Unused.</p> <p>AE_Effect_Support_URL</p> <p>New in AE 23.5! URL for the effect. Shown in the Effects Manager. A user might click the link for more information about the effect or to find a newer version.</p>"},{"location":"intro/pipl-resources/#pipl-resources-and-microsoft-visual-studio","title":"PiPL Resources And Microsoft Visual Studio","text":"<p>To use resources from Microsoft Visual Studio .NET with pipltool-generated resources,</p>"},{"location":"intro/pipl-resources/#include-the-output-of-the-custom-build-steps-into-the-microsoft-generated-rc-file","title":"include the output of the custom build steps into the Microsoft-generated .rc file.","text":"<pre><code>// in file WhizBang.rc, generated by .NET.\n#include \"WhizBang_PiPL_temp.rc\" // pipltool.exe's output\n</code></pre> <p>If modifying a sample plug-in, change the name of the file generated by pipltool.exe to something like WhizBang_PiPL_temp.rc, or it will overwrite the Microsoft resources each time you build; not good.</p>"},{"location":"intro/pipl-resources/#multiple-pipls","title":"Multiple PiPLs","text":"<p>It is possible, but not recommended, to include multiple plug-ins (both AEGPs and effects) in the same file, using multiple PiPLs. If there are PiPLs for both AEGPs and effects in the same file, the AEGPs must come first!</p> <p>No other hosts (not even Premiere Pro) support multiple PiPLs pointing to multiple effects within the same .dll or code fragment. Also, if you need to update one plug-in, do you really want to ship a new build of all your plug-ins? We recommend one PiPL, and one plug-in, per code fragment.</p>"},{"location":"intro/pipl-resources/#why-do-i-need-to-know-all-this","title":"Why Do I Need To Know All This?","text":"<p>You don't; After Effects does. If you follow our advice and base your projects on the SDK samples, you can simply change the .r file containing your PiPL definition(s), and your plug-in's resources will be automagically updated the next time you build. Feel the love. Or, if you ever tinker with the custom build steps, feel the pain.</p>"},{"location":"intro/sample-projects/","title":"Sample Projects","text":"<p>There is at least one sample of every type of plug-in supported by the current API, as well as projects to illustrate particular concepts.</p> <p>In the sample projects, we've kept the code as simple as possible. A showy implementation might get us good grades in a programming class, but won't help you understand how to use API features.</p> <p>After the break, we explain how to build the sample projects, so keep reading below!</p>"},{"location":"intro/sample-projects/#sample-project-descriptions","title":"Sample Project Descriptions","text":"<p>Project</p> <p>Description</p> <p>AEGPs</p> <p>AEGPs hook directly into After Effects' menus and other areas in the UI.</p> <p>See below for specifics on where the AEGP appears in the UI.</p> <p>Artie</p> <p>Artie the Artisan takes over rendering of all 3D layers in a given composition.</p> <p>This is the same API used by our internal 3D renderers; it is very complex, and exposes a great deal of tacit information about the After Effects rendering pipeline.</p> <p>Unless you have a compelling reason to replace the way After Effects handles 3D rendering, you need never work with this sample.</p> <p>Artisans appear in Composition &gt; Composition Settings, in the Advanced tab, in the Rendering Plug-in drop-down.</p> <p>Easy Cheese</p> <p>A keyframer (which shows up on the Animation &gt; Keyframe Assistant submenu), Easy Cheese shows how to manipulate various characteristics of keyframes (in a way that, uncannily, resembles our shipping plug-in, Easy Ease...)</p> <p>FBIO</p> <p>Exercises the After Effects Input/Output (AEIO) API. Similar to the IO sample, but supports the frame-based .ffk file format.</p> <p>Note</p> <p>We now recommend developing a Premiere Pro Importers instead.</p> <p>Grabba</p> <p>Gets frames (formatted as the plug-in requests) from any composition in the project.</p> <p>IO</p> <p>Exercises the After Effects Input/Output (AEIO) API. Supports the fictitious .fak file format, and handles all requests from After Effects for retrieving data from or outputting to such files.</p> <p>Note</p> <p>We now recommend developing a Premiere Pro Importers instead.</p> <p>Mangler</p> <p>Mangler is a keyframer demonstrating the use of an ADM palette, just like our own.</p> <p>Panelator</p> <p>Creates a panel that can be docked along with the rest of the standard panels.</p> <p>Note</p> <p>It is far more work to create a panel this way than using the HTML5 Panel SDK.</p> <p>We recommend starting with that SDK instead.</p> <p>Persisto</p> <p>Shows how to read and write information from the After Effects preferences file.</p> <p>ProjDumper</p> <p>Creates a text file representing every element in an After Effects project.</p> <p>Projector</p> <p>Imports the (fictitious) .sdk file format, and creates a project using AEGP API calls.</p> <p>Whenever you're wondering how to get or set some characteristic of a project element, look here first.</p> <p>Note</p> <p>There are some hardcoded paths in Projector.h. If you don't set these to refer to actual media on disk, you WILL get errors while running this plug-in. Don't blame us; change them!</p> <p>QueueBert</p> <p>Pronounced \"Cue-BARE!\", QueueBert manipulates all aspects of render queue items and the output modules associated with them.</p> <p>Streamie</p> <p>Manipulates streams, both dynamic and fixed.</p> <p>Sweetie</p> <p>Sweetie uses the PICA (or \"Suite Pea\") API to provide a function Suite, for use by other plug-ins.</p> <p>If you're writing multiple plug-ins that rely on the same image processing library, you could provide the library functionality using such a suite.</p> <p>Text Twiddler</p> <p>Manipulates text layers and their contents.</p> <p>Effects</p> <p>All effects appear in the Effects &amp; Presets panel, and in the Effect menu.</p> <p>Checkout</p> <p>Checks out (of After Effects' frame cache) a frame of input from another layer, at a specified time.</p> <p>This is an important concept for all effects with layer parameters. Premiere Pro compatible.</p> <p>Convolutrix</p> <p>Exercises our image convolution callbacks. Premiere Pro compatible.</p> <p>Gamma Table</p> <p>Shows how to manage sequence data, and uses our iteration callbacks.</p> <p>For nostalgia's sake, we're leaving this one sample in C; it's also compatible with many third-party plug-in hosts, due to its reliance on version 3.x API features.</p> <p>GLator</p> <p>New for CC 2017. Demonstrates proper OpenGL context management in an effect plug-in.</p> <p>Paramarama</p> <p>Exercises wayward param types not used in other sample. Premiere Pro compatible.</p> <p>PathMaster</p> <p>Shows how to access paths from within an effect.</p> <p>Portable</p> <p>Shows how to detect and respond to several different plug-in hosts. Premiere Pro compatible.</p> <p>Resizer</p> <p>Resizer resizes (surprise!) the output buffer. This is useful for effects like glows and drop shadows, which would be truncated at the layer's edges if they didn't expand the output buffer.</p> <p>Premiere Pro compatible.</p> <p>SDK Backwards</p> <p>Reverses a layer's audio, and mixes it with a keyframe-able sine wave.</p> <p>SDK Noise</p> <p>Premiere Pro compatible, demonstrates 32-bit and YUV rendering in Premiere Pro.</p> <p>Shifter</p> <p>Shifts an image in the output buffer, and exercises our transform_world and subpixel sampling functions.</p> <p>SmartyPants</p> <p>Demonstrates the SmartFX API, required for support of floating point pixels.</p> <p>Transformer</p> <p>Exercises our image transformation callbacks.</p> <p>Effect Template</p> <p>Skeleton</p> <p>Skeleton is the starting point for developing effects. Premiere Pro compatible.</p> <p>Effects with Custom UI</p> <p>CCU</p> <p>Implements a custom user interface in the composition and layer windows, supporting pixel aspect ratio and downsample ratios. Premiere Pro compatible.</p> <p>ColorGrid</p> <p>Shows how to use arbitrary data type parameters. Also has a nice custom UI. Premiere Pro compatible.</p> <p>Custom ECW UI</p> <p>Implements a very boring custom user interface in the effect controls window, and shows how to respond to numerous UI events.</p> <p>Histogrid</p> <p>New for CC 2015 (13.5). An example of how custom UI can access asynchronously-rendered upstream frames for lightweight processing in CC 2015 and later.</p> <p>This effect calculates a sampled 10x10 color grid from the upstream frame, and displays a preview of that color grid.</p> <p>In render, a higher-quality grid is calculated and used to modify the output image, creating a blend of a color grid with the original image.</p> <p>Supervisor</p> <p>Shows how to control parameters (both values and UI) based on the value of other parameters. Premiere Pro compatible.</p> <p>BlitHook</p> <p>EMP</p> <p>External Monitor Preview. Use this as a starting point for adding support to output video from the composition panel to video hardware.</p>"},{"location":"intro/sample-projects/#building-the-sample-projects","title":"Building The Sample Projects","text":"<p>We've combined the sample projects into a single master project, stored in the Examples folder of the SDK. For macOS, it is Buildall.xcodeproj; for Windows, it is BuildAll.sln.</p> <p>In your IDE, you'll need to change the output folder of your project to build into After Effects' plug-in folder.</p> <p>For development, we recommend using the following path for macOS: <code>/Library/Application Support/Adobe/Common/Plug-ins/[version]/MediaCore/</code></p> <p>Version is locked at 7.0 for all CC versions, or CSx for earlier versions.</p> <p>for example: <code>/Library/Application Support/Adobe/Common/Plug-ins/7.0/MediaCore/</code></p> <p>or: <code>/Library/Application Support/Adobe/Common/Plug-ins/CS6/MediaCore/</code></p> <p>and the following path for Windows: <code>[Program Files]\\Adobe\\Common\\Plug-ins\\[version]\\MediaCore\\</code></p> <p>for example: <code>C:\\Program Files\\Adobe\\Common\\Plug-ins\\7.0\\MediaCore\\</code></p> <p>or: <code>C:\\Program Files\\Adobe\\Common\\Plug-ins\\CS6\\MediaCore\\</code></p> <p>Note that this Windows path is only recommended for development purposes. Windows installers should follow the guidelines here: Where Installers Should Put Plug-ins.</p> <p>In Xcode, you can set this path once for all projects in the Xcode Preferences &gt; Locations &gt; Derived Data &gt; Advanced. Under Build Location choose Custom, and fill in the path.</p> <p>In Visual Studio, for convenience, we have specified the output path for all sample projects using the environment variable AE_PLUGIN_BUILD_DIR. You'll need to set this as a user environment variable for your system. On Windows 7, right-click My Computer &gt; Properties &gt; and in the left sidebar choose Advanced System Settings. In the new dialog, hit the Environment Variables button. In the User variables area, create a New variable named AE_PLUGIN_BUILD_DIR, and with the path described above. Log out of Windows and log back in so that the variable will be set.</p> <p>Alternatively, you can set output path for each project individually in Visual Studio by right-clicking a project in the Solution Explorer, choosing Properties, and then in Configuration Properties &gt; Linker &gt; General, set the Output File.</p> <p>When compiling the plug-ins, if you see a link error such as:</p> <p>\"Cannot open file \"[MediaCore plug-ins path]plugin.prm\", make sure to launch Visual Studio in administrator mode. In your Visual Studio installation, right-click devenv.exe, Properties &gt; Compatibility &gt; Privilege Level, click \"Run this program as an administrator\".</p>"},{"location":"intro/sdk-audience/","title":"SDK Audience","text":"<p>You must be a proficient C/C++ programmer to write After Effects plug-ins. While we'll help with issues specific to the After Effects API, we can't help you learn your IDE or basic programming concepts.</p> <p>This SDK guide assumes you understand After Effects from a user's perspective, and basic motion graphics terminology. If you don't, get the Adobe After Effects Classroom in a Book, or any of the other fine instructional books on the market. It will help you understand necessary</p> <p>topics such as alpha channels, pixel aspect ratio, interlacing, color spaces, and more for After Effects.</p>"},{"location":"intro/sdk-audience/#development-requirements","title":"Development Requirements","text":"<p>The system requirements for After Effects are here: https://helpx.adobe.com/after-effects/system-requirements.html</p> <p>The SDK samples have been tested on Xcode 11.3.1 and Xcode 12.4 (for universal binary support with Apple Silicon) on macOS 10.15/11.0, and Microsoft Visual Studio 2019 on Windows 10.</p>"},{"location":"intro/symbol-export/","title":"Exporting Symbols in Effects","text":"<p>The After Effects team recently became aware of an issue with conflicting symbols that violate the C++ language One Definition Rule (ODR).</p> <p>In early 2021, the version of the Boost library used by After Effects was upgraded to 1.74. Over the last few months we've identified a number of plugins that are also using Boost but are exporting symbols in such a way that After Effects or the plugin may end up calling the incorrect version of Boost leading to hangs and crashes for users. We also identified a number of the AE SDK samples were setup to export all symbols by default which may have been contributing to the problem, assuming they were used as the starting point for other plugins. These have been fixed as part of the March 2021 SDK.</p> <p>The only symbol that After Effects requires to be exported is the entry point of the plugin.</p> <p>An example can be found in the SDK samples in entry.h:</p> <pre><code>#ifdef AE_OS_WIN\n        #define DllExport   __declspec( dllexport )\n#elif defined AE_OS_MAC\n        #define DllExport   __attribute__ ((visibility (\"default\")))\n#endif\n</code></pre> <p>and then this is applied to the entry point function, for example:</p> <pre><code>extern \"C\" DllExport\nPF_Err PluginDataEntryFunction(\n    PF_PluginDataPtr inPtr,\n    PF_PluginDataCB inPluginDataCallBackPtr,\n    SPBasicSuite* inSPBasicSuitePtr,\n    const char* inHostName,\n    const char* inHostVersion)\n{\n    PF_Err result = PF_Err_INVALID_CALLBACK;\n\n    result = PF_REGISTER_EFFECT(\n        inPtr,\n        inPluginDataCallBackPtr,\n        \"ColorGrid\", // Name\n        \"ADBE ColorGrid\", // Match Name\n        \"Sample Plug-ins\", // Category\n        AE_RESERVED_INFO); // Reserved Info\n\n    return result;\n}\n</code></pre>"},{"location":"intro/symbol-export/#disabling-xcode-symbol-export","title":"Disabling Xcode Symbol Export","text":"<p>To disable symbol export in Xcode:</p> <ol> <li>Find the Apple Clang - Code Generation section in the Build settings for your project.</li> <li>Set the Symbols Hidden By Default to YES</li> </ol> <p> Apple Clang Symbols</p> <p>For any specific symbols that must be made public, use the <code>__attribute__((visibility(\"default\")))</code> in code.</p> <p>More information can be found in Apple's Xcode documentation https://help.apple.com/xcode/mac/11.4/#/itcaec37c2a6 (excerpt below):</p> <p>Symbols Hidden by Default (GCC_SYMBOLS_PRIVATE_EXTERN)</p> <p>When enabled, all symbols are declared private extern unless explicitly marked to be exported using attribute((visibility(\"default\"))) in code. If not enabled, all symbols are exported unless explicitly marked as private extern.</p>"},{"location":"intro/symbol-export/#disabling-visual-studio-export","title":"Disabling Visual Studio Export","text":"<p>By default, builds from Visual Studio automatically disable symbol exports. To export symbols, you must either supply a module definition file or set the __declspec(dllexport) keyword in the functions definition.</p> <p>More information can be found in Microsoft's Visual Studio documentation https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll?view=msvc-160 (excerpt below):</p> <p>You can export functions from a DLL using two methods:</p> <ol> <li>Create a module definition (.def) file and use the .def file when building the DLL. Use this approach if you want to export functions from your DLL by ordinal rather than by name.</li> <li>Use the keyword __declspec(dllexport) in the function's definition.</li> </ol> <p>When exporting functions with either method, make sure to use the __stdcall calling convention.</p>"},{"location":"intro/third-party-plug-in-hosts/","title":"Third-party Plug-in Hosts?","text":"<p>Some developers are wary of using each After Effects release's new API features, to maintain compatibility with hosts with partial implementations. You can distinguish between host applications by checking PF_InData&gt;appl_id. After Effects uses the appl_id 'FXTC'.</p> <p>Premiere Pro uses 'PrMr'. As of this writing, no third party hosts support SmartFX, or our AEGP functions.</p> <p>Also, see the Premiere Pro &amp; Other Hosts section.</p>"},{"location":"intro/what-can-i-do/","title":"What Can I Do With This SDK?","text":"<p>This SDK describes the Application Programming Interface (API) that developers use to build plug-ins. These plug-ins can extend the capabilities of After Effects and other applications that support the After Effects API. Plug-ins may also be used to bridge the gap between After Effects and another application.</p>"},{"location":"intro/what-can-i-do/#what-plug-ins-can-i-build-with-this-sdk","title":"What Plug-Ins Can I Build With This SDK?","text":"<p>Effect plug-ins can be applied to video or audio in a composition, to process video and/or audio data. Some examples of built-in effects are Brightness and Contast, Hue/Saturation, Gaussian Blur, and Warp Stabilizer. Effect plug-ins can provide a set of parameter controls for the user to fine-tune the effect. These parameter values can vary over time, and effects may use other layers and parameters at different times to calculate the output. It's often thought that all plug-ins are effects. But effects are just one type of plug-in used by After Effects.</p> <p>See a quickstart video on building an effect (on macOS): adobe.ly/2sjMDwM</p> <p>After Effects General Plug-ins (AEGPs) can read and modify nearly every element of After Effects projects and preferences. They can add menu items, 'hook' (register themselves to receive) and trigger After Effects' internal commands, and add new panels that dock and resize within the After Effects UI. They can work with markers and keyframes, and manage the render queue. They can even run scripts. Some examples of built-in AEGPs are the AAF importer, and the SWF exporter. Automatic Duck Pro Import AE is another well-known AEGP.</p> <p>After Effects Input/Output (AEIO) plug-ins provide support for new media file types. Unless you need a custom setup dialog to specify interpretation settings, the Premiere Pro Importers API provides similar functionality, and is preferable in many cases. AEIOs use the AEGP API along with certain APIs specific to AEIOs. While After Effects still supports Photoshop format plug-ins and filters, as well as Foreign Project Format (FPF) plug-ins, these APIs have been long deprecated in favor of the AEIO API.</p> <p>BlitHook plug-ins output video to external hardware for broadcast quality monitoring and playback to tape. The EMP sample project provides a starting point. In After Effects CC 2014 and later, Mercury Transmit is the recommended API.</p> <p>Artisans provide rendered output of 3D layers, taking over 3D rendering from After Effects (which still handles all rendering of 2D layers). Artisans use the AEGP API along with certain APIs specific to Artisans.</p> <p>Didn't see the type of integration you need described above? After Effects is very flexible, and there are several other ways to integrate with After Effects. See: Other Integration Possibilities.</p>"},{"location":"intro/what-can-i-do/#where-do-plug-ins-appear-in-after-effects","title":"Where Do Plug-ins Appear In After Effects?","text":"<p>Effects plug-ins appear in both the Effect menu and the Effects &amp; Presets panel, in the effect category specified in their PiPL. Once they're applied, the effect's parameter controls (sliders, pop-ups, etc.) appear in the Effect Controls panel (ECP).</p> <p>After Effects General Plug-ins (AEGPs) can add items to any After Effects menu, and additional panels listed in the Window menu. These menu items are indistinguishable from After Effects' own menu items.</p> <p>AEIOs and Photoshop Format plug-ins can appear in the File &gt; Import menu, or in the Import File dialog in the Files of type drop-down, depending on the type of importer. AEIOs and Format plug-ins can also appear as available output formats in the render queue.</p> <p>BlitHook plug-ins are automatically loaded and used by AE, but do not appear in any menu or dialog. The plug-in may optionally provide a menu item that opens it's own custom settings dialog. It would register and update the menu item using the AEGP API.</p> <p>It can registered to be called by After Effects to update the menu with <code>AEGP_RegisterUpdateMenuHook()</code>, and it can dim/activate the menu item using <code>AEGP_EnableCommand()</code>/<code>DisableCommand()</code>.</p> <p>Artisans appear in the Rendering Plug-in drop-down in the Advanced tab of the Composition Settings dialog.</p>"},{"location":"intro/what-can-i-do/#how-does-after-effects-interact-with-plug-ins","title":"How Does After Effects Interact With Plug-ins?","text":"<p>Plug-ins, written in C or C++, are bundle packages on macOS and DLLs on Windows. They must contain a Plug-in Property List (PiPL Resources) resource on both platforms. The plug-ins must be located in one of a few specific folders in order to be loaded and used by After Effects.</p> <p>For effects plug-ins, After Effects sends command selectors (and relevant information) to the plug-in Entry Point designated in the effects' PiPL Resources resource. Selectors are sent in response to actions the user takes\u2014applying the effect, changing parameters, scrubbing through frames in the timeline, and rendering all prompt different sequences of selectors.</p> <p>After Effects creates multiple instances of effects, with settings and input data unique to each sequence. All instances share the same global data, and can share data between all frames within their sequence. After Effects doesn't process all image data as soon as the user applies an effect; it invokes effects only when their output is required.</p> <p>After Effects General Plug-ins (AEGPs) have their entry point function called during application launch, and register for whatever messaging they need at that time. Further calls to the AEGP are initiated by user actions, as part of the plug-in's response to menu commands or UI events. Depending on their features, plug-ins may need to respond to OS-specific entry points as well, for UI work and thread management.</p> <p>For BlitHook plug-ins, frames are pushed as they're displayed in the Composition panel. Users can initiate a RAM preview on an area of the timeline so that it is rendered to RAM, and then it all gets played out at full speed.</p>"},{"location":"intro/what-can-i-do/#sdk-contents","title":"SDK Contents","text":"<p>The SDK contains headers defining the After Effects APIs, sample projects demonstrating integration features, and this SDK Guide.</p> <p>They are compiled with the SDK header files, which expose various After Effects functionality to be used by the plug-in.</p>"},{"location":"intro/whats-new/","title":"What's New","text":"<p>If this is your first time developing an After Effects plug-in, you can skip the What's New section and go directly to How To Start Creating Plug-ins.</p>"},{"location":"intro/whats-new/#whats-new-in-the-252-sdk","title":"What's New In the 25.2 SDK","text":"<p>As part of AEGP_LayerSuite9, AEGP_GetLayerObjectType can now return AEGP_ObjectType_3D_MODEL if the object type is a 3D model.</p>"},{"location":"intro/whats-new/#whats-new-in-after-effects-2022","title":"What's New In After Effects 2022","text":"<p>After Effects 2022 contains the first full public release with Multi-Frame Rendering support. The associated AE Effects SDK released in October 2021 includes one change for increasing the maximum number of PF_Iterate threads.</p>"},{"location":"intro/whats-new/#whats-new-in-the-after-effects-sdk-in-march-2021","title":"What's New in the After Effects SDK in March 2021","text":""},{"location":"intro/whats-new/#multi-frame-rendering-changes","title":"Multi-Frame Rendering Changes","text":"<ol> <li>The final behavior for the <code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING</code> flag is now in place. Setting this flag to indicate support for Multi-Frame Rendering will also enforce the data stored in <code>sequence_data</code> to be const/read-only at Render time and access to <code>sequence_data</code> is now through a suite, <code>PF_EffectSequenceDataSuite1</code>.</li> <li>A new flag, <code>PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER</code> is now available to set alongside <code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING</code> if your plugin cannot be updated to work with the new sequence_data behavior. After Effects won't be able to apply as much rendering concurrency and therefore performance improvements to effects that set this flag (hence the _SLOWER flag name).</li> <li>A new suite, the Compute Cache (previously referred to as the 3-way checkout cache) is now available. This suite provides a thread-safe cache that plugins can use as a replacement or supplement to sequence_data to support multiple render threads computing and caching data needed to render frames.</li> </ol> <p>Due to these changes, you must update to, and compile with, the March 2021 SDK to maintain Multi-Frame Rendering compatibility with AE Beta builds moving forward. Plugins compiled with the June 2020 SDK will cease to support Multi-Frame Rendering, even if <code>PF_OutFlag2_SUPPORTS_THREADED_RENDERING</code> is set, starting with AE 22.0x6 (released on June 29th 2021).</p> <p>Please see Multi-Frame Rendering in AE for more information.</p>"},{"location":"intro/whats-new/#apple-silicon-support","title":"Apple Silicon Support","text":"<ul> <li>The AE SDK now supports building effects for Apple Silicon natively. While After Effects itself is not yet running on Apple Silicon, Adobe as a company is moving forward with native support across many of our products. Applications such as Premiere Pro now have native versions available, and your effects may be loaded in Premiere Pro by features such as Motion Graphic Templates. When running the native version of Premiere Pro only natively compiled effects will work so it's important to update your effects with Apple Silicon support soon. Please see the Apple Silicon Support section for more information.</li> </ul>"},{"location":"intro/whats-new/#exporting-symbols-from-effects","title":"Exporting Symbols from Effects","text":"<ul> <li>The SDK samples have been updated on not export symbols by default on MacOS. Please see Exporting Symbols in Effects for more information.</li> </ul>"},{"location":"intro/whats-new/#downloading-the-march-2021-sdk","title":"Downloading the March 2021 SDK","text":"<p>The SDK can be downloaded from the Adobe Developer Console at https://adobe.io/after-effects/</p>"},{"location":"intro/whats-new/#after-effects-beta-builds","title":"After Effects Beta Builds","text":"<p>To gain access to the AE host-side changes for this SDK, you will need to download a new After Effects beta build from the Creative Cloud Desktop App. Builds 18.2x11 and above are supported with the March 2021 SDK.</p>"},{"location":"intro/whats-new/#whats-new-in-after-effects-beta-builds-after-june-2020","title":"What's New In After Effects Beta builds after June 2020","text":"<p>AE (currently only in Beta builds) now supports Multi-Frame rendering. See Multi-Frame Rendering in AE for more details.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2019-160","title":"What's New In CC 2019 (16.0)?","text":"<p>We've made some changes to how GPU effects are handled. See \"GPU Effects Changes\" for details.</p>"},{"location":"intro/whats-new/#whats-new-in-150","title":"What's New In 15.0?","text":"<p>After Effects now supports the GPU effect rendering previously supported in Premiere Pro. Note that unknown effects with a match name that includes \"ADBE \" will be excluded from GPU rendering, so make sure any of your GPU effects have your own custom match name. Effects that support GPU rendering will receive the GPU badge in the Effect panel.</p> <p>The GPU effect sample projects in the Premiere Pro SDK have been updated to register as GPU effects in AE, although the render output still needs work.</p> <p>A new entry point has been defined, to allow effects to register basic information with the host at runtime, without relying on legacy PiPL resources. An effect can register multiple entry points in a single binary this way. Premiere Pro is the first host to support this entry point, and After Effects will support this in a future release.</p> <p>The effect sample projects have been updated to use this approach, while maintaining the PiPL for backwards compatibility.</p> <p><code>AEGP_StreamSuite</code> is now at version 5, where AEGP_GetExpression() and AEGP_SetExpression() have been upgraded to support Unicode.</p> <p><code>PF_AdvTimeSuite</code> is now at version 4, with a new call PF_TimeCountFrames(), that returns the index of the frame in the current comp.</p> <p>The new AEGP Math Suite provides helpful calls for matrix multiplication.</p> <p>The application font is now Adobe Clean. Previously, the fonts used in After Effects' UI were Tahoma on Windows and Lucida Grande on macOS X. This is a proprietary font, and we can not make it available for use in your UI.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-20171-142","title":"What's New In CC 2017.1 (14.2)?","text":"<ul> <li>Layer Params can include Masks and Effects</li> </ul> <p>Effects that use layers as an input, such as Set Matte and Displacement Map, can now target the input layer's masks and effects, instead of only the source of the layer. This means that for there is no need to pre-compose layers just so that they can be referenced by an effect.</p> <p>Where an effect includes a layer parameter, a new menu to the right of the layer selector allows you to choose whether to target the input layer from its source, masks, or effects:</p> <ul> <li>Source: targets only the source of the layer. Masks and effects are ignored.</li> <li>Masks: targets the layer after its masks are applied. Effects are ignored.</li> <li>Effects &amp; Masks: targets the layer after its masks and effects are applied.</li> </ul> <p>This control is similar to the View menu at the bottom of the Layer viewer panel, which allows you to render the layer from different positions in the rendering order: from its source, from its masks, or from its individual effects.</p> <p>As this is a user-facing option, the design is intended to be transparent to the effect. From the effect's perspective, the input simply just includes the upstream effects and masks without any change to the effect. For any effect that uses layer params, here are some testing recommendations:</p> <ul> <li>Effect continues to work as expected.</li> <li>Using new control in the layer param for Source/Mask/Effects works with effect.</li> <li>Opening old projects or saving back to a previous version project does not break effect.</li> <li>Confirm that effect cannot self-reference; meaning cannot use the effects on the layer as input for the same layer.</li> <li>Suite Enhancements</li> </ul> <p>PF_AdvTimeSuite is now at version 3, providing a revised PF_GetTimeDisplayPref() call that uses a revised <code>PF_TimeDisplayPrefVersion</code> parameter, that supports higher frame rates. The previous version 2 of the call can now return an error if there is a problem with the values exceeding the range supported by the structure.</p> <p>Comp Suite is now at version 11, with a new call, AEGP_ReorderCompSelection(), to move a selection to a certain layer index. It should be used along with <code>AEGP_SetSelection()</code>.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2017-141","title":"What's New In CC 2017 (14.1)?","text":"<p>Unicode support for AEGP Item Suite and AEGP Render Queue Item Suite.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2017-140","title":"What's New In CC 2017 (14.0)?","text":"<p>The GLator sample is back! It has been updated to demonstrate proper OpenGL context management in an effect plug-in.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-20153-138","title":"What's New In CC 2015.3 (13.8)?","text":"<p>PF_OutFlag_I_AM_OBSOLETE is now supported in Premiere Pro. Also, effect custom UI in Premiere Pro now supports high DPI displays, such as Retina Displays.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2015-136","title":"What's New In CC 2015 (13.6)?","text":"<p>New AEGP Item View Suite. This provides a way to get playback time for item view. Only the composition case is implemented in this release. The time passed back should be the playback time of the view when playing and the current (needle) time otherwise.</p> <p>AEGP_RenderNewItemSoundData() has been reworked and provides functionality similar to 13.2.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2015-1351","title":"What's New In CC 2015 (13.5.1)?","text":"<p>This release fixes some audio APIs that broke in 13.5 due to threading changes. In 13.5, when called on the UI thread, AEGP_RenderNewItemSoundData() would return A_Err_GENERIC. This restores the functionality when called on the UI thread.</p> <p>To avoid a deadlock, in PF_Cmd_UPDATE_PARAMS_UI only, AEGP_RenderNewItemSoundData() will now return silence. This will no longer function as before in this context, but it will continue to work properly elsewhere.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2015-135","title":"What's New In CC 2015 (13.5)?","text":"<ul> <li>Separate UI and Render Threads</li> </ul> <p>This release of After Effects includes major architectural changes to separate the UI (main) thread from the render thread. The render thread sends selectors such as PF_Cmd_RENDER, PF_Cmd_SMART_PRERENDER, and PF_Cmd_SMART_RENDER to effect plug-ins. The UI thread sends selectors such as PF_Cmd_SEQUENCE_SETUP, PF_Cmd_USER_CHANGED_PARAM, PF_Cmd_DO_DIALOG, and PF_EVENT_DRAW. PF_Cmd_SEQUENCE_RESETUP is</p> <p>sent on both render and UI threads.</p> <p>These changes are to improve interactive performance and responsiveness. At the same time, the new design introduces some new requirements and may break assumptions that existing plug-ins relied on. Here are some of the major changes:</p> <ol> <li>The project can no longer be modified by the render thread (and in fact the render thread now has its own local copy of the project)</li> <li>Rendering cannot pass modified sequence data back to the UI thread for custom UI updates</li> <li>In general the UI thread should no longer do time-consuming operations such as synchronously rendering frames</li> </ol> <p>Is your plug-in affected? Test for these problems:</p> <ol> <li>Render not updating after UI parameter change because it depends on sequence_data, which may not be currently copied to render</li> <li>Render not updating during click/drag in the Composition Window (similar reasons)</li> <li>Custom Effect UI not updating because it depends on sequence_data generated in render (which is no longer available to the UI because it is in a different project, the render project is immutable, and cache contains previously-rendered frames)</li> <li>Errors telling you an operation on the render thread (or UI thread) is not expected</li> </ol> <p>Generally, calculations that will persist or update the UI will now have to be pulled from the UI thread rather than pushed from the render thread. These cases can require use of new</p> <p>13.5 APIs or different solutions than in past releases.</p> <ul> <li>The Need For More Efficient Sequence Data Handling</li> </ul> <p>PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA</p> <p>PF_Cmd_GET_FLATTENED_SEQUENCE_DATA</p> <p>Up to version 13.2, serializing/flattening sequence_data always involved deallocating and reallocating any data structures. Starting in 13.5, as effect changes are made, serializing/ flattening happens even more often. Why? AE needs to serialize/flatten project changes to send from the UI thread to the render thread, to keep them both synchronized.</p> <p>To make this process more efficient, starting in 13.5, AE can send PF_Cmd_GET_FLATTENED_SEQUENCE_DATA to request sequence data without requiring the existing data to be deallocated and reallocated. The main difference between this selector and PF_Cmd_SEQUENCE_FLATTEN is that a copy of the correct flattened state is returned without disposing the original structure(s) the effect is currently using. For a code example, refer to the PathMaster sample project.</p> <p>This will eventually become required for plug-ins that are rebuilt to be thread-safe (see PF_OutFlag2_AE13_5_THREADSAFE below). The venerable PF_Cmd_SEQUENCE_FLATTEN will eventually be unsupported in future versions.</p> <ul> <li>PF_OutFlag_FORCE_RERENDER Changes</li> </ul> <p>Where possible, we recommend triggering rerenders using one of the following: GuidMixInPtr() (described in the next section), arb data, or PF_ChangeFlag_CHANGED_VALUE. All of these allow cached frames to be reused after an Undo.</p> <p>Note: As of 14.0, setting PF_ChangeFlag_CHANGED_VALUE for layer or path params is not triggering a rerender. Instead, you may change set the value using AEGP_StreamSuite-</p> <p>AEGP_SetStreamValue().</p> <p>FORCE_RERENDER is still needed for situations where sequence_data needs to be copied from the UI thread to the render project/effect clone to keep them matched.</p> <p>FORCE_RERENDER is the trigger for this whether the render request uses the cache or not. Once we have the full set of APIs in place needed to manage render state, we will be able to deprecate FORCE_RERENDER.</p> <p>FORCE_RERENDER doesn't work in every situation it did before, because it needs to synchronize the UI copy of sequence_data with the render thread copy.</p> <p>FORCE_RERENDER works when set during PF_Cmd_USER_CHANGED_PARAM. It also works in CLICK and DRAG events, but only if PF_Cmd_GET_FLATTENED_SEQUENCE_DATA is implemented. This is required to prevent flattening and loss of UI state in the middle of mouse operations. Without GET_FLATTENED, the new FORCE_RERENDER behavior will NOT be turned on.</p> <ul> <li>GUIDs for Cached Frames</li> </ul> <p>PF_OutFlag2_I_MIX_GUID_DEPENDENCIES</p> <p>GuidMixInPtr()</p> <p>Used by SmartFX only. Use this if custom UI or PF_Cmd_DO_DIALOG changes sequence data, or if the render result depends on anything else not factored in, and rerendering may be needed. During PF_Cmd_SMART_PRERENDER, the effect can call GuidMixInPtr() to mix any additional state that affects the render into our internal GUID for the cached frame. Using this GUID, AE can tell whether the frame already exists or if it needs to be rendered. See an example in SmartyPants sample project.</p> <p>This is an improvement over the older mechanisms PF_OutFlag_FORCE_RERENDER and PF_Cmd_DO_DIALOG, which would remove the frame from the cache because the host didn't know what else the plug-in was factoring into the rendering. This can also be used rather than PF_OutFlag2_OUTPUT_IS_WATERMARKED.</p> <ul> <li>Request Frames Asynchronously Without Blocking the UI</li> </ul> <p>PF_OutFlag2_CUSTOM_UI_ASYNC_MANAGER</p> <p>PF_GetContextAsyncManager() AEGP_CheckoutOrRender_ItemFrame_AsyncManager() AEGP_CheckoutOrRender_LayerFrame_AsyncManager()</p> <p>For cases where such renders formerly were triggered by side-effect or cancelled implicity</p> <p>(such as custom UI histogram drawing), and lifetime is less clear from inside the plug-in, use the new \"Async Manager\" which can handle multiple simultaneous async requests for effect Custom UI and will automatically support interactions with other AE UI behavior.</p> <p>Note: Async retrieval of frames is preferred for handling passive drawing situations, but not when a user action will update the project state. If you are (1) responding to a specific user click, AND 2) you need to update the project as a result, the synchronous AEGP_RenderAndCheckoutLayerFrame() is recommended.</p> <p>The new HistoGrid sample in the SDK shows how to do completely asynchronous custom UI DRAW event handling on the UI thread when 1 or more frame renders are needed. e.g. for calculating histograms that are shown in the effect pane. Please note there is still a known bug where drag-changing an upstream param may not refresh the histogram draw until the mouse hovers over it.</p> <ul> <li>Get Rendered Output of an Effect from its UI</li> </ul> <p>Effects such as keyers or those that draw histograms of post-processed video can retrieve the needed AEGP_LayerRenderOptionsH using the new function AEGP_NewFromDownstreamOfEffect() in AEGP_LayerRenderOptionsSuite. This function may only be called from the UI thread.</p> <ul> <li>AEGP Usage on Render Thread</li> </ul> <p>We've tightened validation of when AEGP calls could be used dangerously (such as from the wrong thread or making a change to the project state in render). You may see new errors if code is hitting such cases. For example, making these calls on the render thread will result in an error:</p> <p>suites.UtilitySuite5()-&gt;AEGP_StartUndoGroup() suites.StreamSuite2()-&gt;AEGP_GetStreamName() suites.StreamSuite2()-&gt;AEGP_SetExpressionState() suites.StreamSuite2()-&gt;AEGP_SetExpression() suites.StreamSuite2()-&gt;AEGP_GetNewLayerStream() suites.StreamSuite2()-&gt;AEGP_DisposeStream() suites.EffectSuite3()-&gt;AEGP_DisposeEffect() suites.UtilitySuite5()-&gt;AEGP_EndUndoGroup()</p> <p>The solution is to move these calls to the UI thread. Selectors for passive UI updates (such as PF_EVENT_DRAW) are not a place to make changes to project state.</p> <p>Another example of more strict requirements is AEGP_RegisterWithAEGP(). The documentation has always noted that this function must be called on PF_Cmd_GLOBAL_SETUP. However in previous versions, plug-ins were able to call this function at other times without running into trouble. Not anymore in 13.5! Calling this function at other times can cause crashes!</p> <ul> <li>PF_Cmd_SEQUENCE_RESETUP Called on UI or Render Thread?</li> </ul> <p>There is now a PF_InFlag_PROJECT_IS_RENDER_ONLY flag that is only valid in PF_Cmd_SEQUENCE_RESETUP that will tell you if the effect instance is for render-only purposes. If so, the project should be treated as completely read-only, and you will not be receiving UI related selectors on that effect instance. This can be used to optimize away any UI-only initialization that render does not need. If this flag is false, you should setup UI as normal. This should not be used to avoid reporting errors in render. Errors in render should be reported as usual via existing SDK mechanisms.</p> <ul> <li>Changes to Avoid Deadlocks</li> </ul> <p>During development, it was noticed that deadlocks could occur in specific call usage. Seatbelts have been introduced to avoid this. The cases occur in PF_Cmd_UPDATE_PARAMS_UI when using particular calls because of deprecated synchronous behavior in these calls when used in the UI:</p> <p>In PF_Cmd_UPDATE_PARAMS_UI only, PF_PARAM_CHECKOUT() for layer parameters will behave as before except that it will return a black frame of the same size, etc., rather than actual rendered pixels. Code that used this for enable/disable detection of parameters should still work as before. Code that used this for getting analysis frames, etc. outside of PF_Cmd_UPDATE_PARAMS_UI will work as before.</p> <p>In PF_Cmd_UPDATE_PARAMS_UI only, PF_GetCurrentState() will now return a random GUID. This will no longer function as before in this context, but it will continue to work properly elsewhere.</p> <p>The above uses should be rare, but if this affects you please contact us about workarounds.</p> <ul> <li>Deprecated</li> </ul> <p>AEGP_RenderAndCheckoutFrame() (on the UI Thread). This call should generally not be used on the UI thread since synchronous renders block interactivity.</p> <p>Use in the render thread is fine. The one case where this may still be useful on the UI thread is a case like a UI button that requires a frame to calculate a parameter which then updates the AE project.</p> <p>For example, an \"Auto Color\" button that takes a frame and then adjusts effect params as a result.</p> <p>A beta of a progress dialog for this blocking operation if it is slow has been implemented, but using this call on the UI thread should be limited to this special cases. The dialog design is not final.</p> <ul> <li>Flag for Thread-Safe Effects</li> </ul> <p>PF_OutFlag2_AE13_5_THREADSAFE</p> <p>Plug-ins updated for threading should use this flag to tell AE that the plug-in is expected to be UI thread &lt;&gt; Render thread safe.</p> <p>This flag tells AE that different threads on different AE project copies can be in the effect at the same time but not accessing the same instance. While multiple render threads are not yet in use, this will be useful in future releases.</p> <ul> <li>Support for Effect Version greater than 7 (new max is MAJOR version 127)</li> </ul> <p>Effects greater than version 7 will now report properly in 13.5 if built with the current SDK headers. It is possible to use these recompiled effects in AE versions older than 13.5, but internally the version number will wrap modulo 8 (e.g. AE will internally see effect version 8 as version 0).</p> <p>This can affect the version shown in error dialog display by older AE and affect usage reporting.</p> <p>Since many older plug-ins were made unloadable in AE with the shift to 64-bit, it should be unlikely this wrapping would cause ambiguity with actual plug-ins in current use (unless these plug-ins have been rapidly increasing version number over the last few years).</p> <p>However, building with an older SDK and using an 8 or higher version will result in the plug-in reporting an incorrect version to AE, which will then cause mismatch with the PiPL version check for the effect which will have the higher bits set. This is not supported.</p> <p>If built with an older SDK, you will need to keep the effect version at 7 or below. Increase in version max has been accomplished by adding 4 new higher significant bits to the version that only AE 13.5 and above \"sees\". These new high version bits are not contiguous with the original, preexisting MAJOR version bits - just ignore the intermediate bits. The new version layout looks like this in hexadecimal or binary.</p> <p>0x 3C38 0000</p> <p>^^ original MAJOR version bits as a hex mask 0-7</p> <p>^^ new HIGH bits extending the original MAJOR version bits 8-127</p> <p>0b 0011 1100 0011 1000 0000 0000 0000 0000</p> <p>^^ ^ original MAJOR version bits as a hex mask 0-7</p> <p>^^ ^^ ignore / do not use</p> <p>^^ ^^ new HIGH bits extend the original MAJOR version bits 8-127.</p> <p>These bits are ignored in AE versions older than 13.5.</p> <ul> <li>New Installer Hints for macOS</li> </ul> <p>Developers can find paths to the default location of plug-ins, scripts, and presets on macOS X in a new plist file (same as the paths in the Windows registry): /Library/Preferences/ com.Adobe.After Effects.paths.plist</p> <p>You can use the values in this plist to direct where your installers or scripts write files, in the same way that you would use the paths keys in the registry on Windows: HKEY_LOCAL_MACHINESOFTWAREAdobeAfter Effects13.5</p> <ul> <li>Work In Progress</li> </ul> <p>AEGP_RenderAndCheckoutLayerFrame_Async() AEGP_CancelAsyncRequest()</p> <p>This APIs are in progress, and should not be used yet.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-20141-131","title":"What's New In CC 2014.1 (13.1)?","text":"<p>PF_CreateNewAppProgressDialog()</p> <p>It won't open the dialog unless it detects a slow render. (2 seconds timeout).</p>"},{"location":"intro/whats-new/#whats-new-in-cc-2014-130","title":"What's New In CC 2014 (13.0)?","text":"<p>Starting in CC 2014, After Effects will now honor a change to a custom UI height made using PF_UpdateParamUI.</p> <p>AEGP Effect Suite is now at version 4, adding new functions to work with effect masks. AEGP_RenderSuite is now at version 4, adding a new function <code>AEGP_RenderAndCheckoutLayerFrame</code>, which allows frame checkout of the current</p> <p>layer with effects applied at non-render time. This is useful for an operation that requires the frame, for example, when a button is clicked and it is acceptable to wait for a moment while it is rendering.</p> <p>Note</p> <p>Since it is not asynchronous, it will not solve the general problem where custom UI needs to draw based on the frame.</p> <p>The layer render options are specified using the new AEGP_LayerRenderOptionsSuite.</p> <p>Mercury Transmit plug-ins and HTML5 Panels are now supported.</p>"},{"location":"intro/whats-new/#whats-new-in-cc-120","title":"What's New In CC (12.0)?","text":"<p>Effect names can now be up to 47 characters long, up from 31 characters previously.</p> <p>We added the PF_AngleParamSuite, providing a way to get floating point values for angle parameters. PF App Suite version 5 adds <code>PF_AppGetLanguage</code> to query the current language so that a plug-in can use the correct language string, as well as several new PF_App_ColorType enum values for new elements whose colors can be queried.</p> <p>AEGP Persistent Data Suite is now at version 4, adding a new parameter to AEGP_GetApplicationBlob to choose between retrieving several different application blobs. There are also new functions to get/set time and ARGB values.</p> <p>AEGP Composition Suite is now at version 10, adding new functions to check/modify whether layer names or source names are shown, and whether the blend modes column is shown or not. Also added are new functions to get and set the Motion Blur Adaptive Sample Limit.</p> <p>AEGP Layer Suite is now at version 8, adding new functions to set/get the layer sampling quality. AEGP_CanvasSuite is also now at version 8. The new function <code>AEGP_MapCompToLayerTime</code> handles time remapping with collapsed or nested comps, unlike AEGP_ConvertCompToLayerTime.</p> <p>AEGP_UtilitySuite is now at version 6, adding a new Unicode-aware function: <code>AEGP_ReportInfoUnicode</code>. Another new function, <code>AEGP_GetPluginPaths</code>, provides some useful paths related to the plug-in and the After Effects executable itself.</p> <p>The behavior for <code>AEGP_NewPlaceholderFootageWithPath</code> has been updated, so that the file_type should now be properly set, otherwise a warning will appear.</p> <p><code>AEGP_InsertMenuCommand</code> can now insert menu items in the File&gt;New submenu.</p> <p>AEGP_IOInSuite is now at version 5, adding new functions to get/set/clear the native start time, and to get/set the drop-frame setting of footage.</p>"},{"location":"intro/whats-new/#whats-new-in-cs601-1101","title":"What's New In CS6.0.1 (11.0.1)?","text":"<p>New in 11.0.1, the AE effect API version has been incremented to 13.3.</p> <p>This allows effects to distinguish between 11.0 and 11.0.1.</p> <p>There is a bug in 11.0 with the Global Performance Cache, when a SmartFX effect uses both <code>PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT</code> &amp; <code>PF_OutFlag_NON_PARAM_VARY</code>.</p> <p>Calling <code>checkout_layer</code> during <code>PF_Cmd_SMART_PRE_RENDER</code> returns empty rects in <code>PF_CheckoutResult</code>.</p> <p>The workaround is to simply make the call again. This workaround is no longer needed in 11.0.1.</p>"},{"location":"intro/whats-new/#whats-new-in-cs6-110","title":"What's New In CS6 (11.0)?","text":"<p>We've made several refinements for better parameter UI handling. <code>PF_PUI_INVISIBLE</code> parameter UI flag is now supported in After Effects, which is useful if your plug-in needs hidden parameters that affect rendering. Now when a plug-in disables a parameter using PF_UpdateParamUI, we now save that state in the UI flags so that the plug-in can check the flag in the future to see if it is disabled. A new flag, <code>PF_ParamFlag_SKIP_REVEAL_WHEN_UNHIDDEN</code>, allows a parameter to be unhidden without twirling open any parents and without scrolling the parameter into view in the Effect Controls panel and the Timeline panel.</p> <p>Effects that render a watermark over the output when the plug-in is in trial mode can now tell After Effects whether watermark rendering mode is on or off, using the new <code>PF_OutFlag2_OUTPUT_IS_WATERMARKED</code>.</p> <p>The new Global Performance Cache means you must tell After Effects to discard old cached frames when changing your effect's rendering.</p> <p>We've removed <code>PF_HasParamChanged</code> and <code>PF_HaveInputsChangedOverTimeSpan</code>, providing PF_AreStatesIdentical instead.</p> <p>Effects that provide custom UI can now receive <code>PF_Event_MOUSE_EXITED</code>, to gain notification that the mouse exited the layer or comp panel. <code>PF_ParamUtilsSuite</code> is now at version 3.</p> <p><code>PF_GET_PLATFORM_DATA</code> now has new selectors for getting the wide character path of the executable and resource file: <code>PF_PlatData_EXE_FILE_PATH_W</code> and <code>PF_PlatData_RES_FILE_PATH_W</code>. The previous non-wide selectors are now deprecated.</p> <p>3D is a major theme of AE CS6. A new <code>AEGP_LayerFlag_ENVIRONMENT_LAYER</code> has been added. Many new layer streams were added.</p> <p>Additionally, <code>AEGP_LayerStream_SPECULAR_COEFF</code> was renamed to <code>AEGP_LayerStream_SPECULAR_INTENSITY</code>, <code>AEGP_LayerStream_SHININESS_COEFF</code> was renamed to <code>AEGP_LayerStream_SPECULAR_SHININESS</code>, and <code>AEGP_LayerStream_METAL_COEFF</code> was renamed to just <code>AEGP_LayerStream_METAL</code>.</p> <p>A new suite, AEGP_RenderQueueMonitorSuite, provides all the info a render queue manager needs to figure out what is happening at any point in a render.</p> <p>AEGP Mask Suite is now at version 6, and provides functions to get and set the mask feather falloff type. AEGP Mask Outline Suite is now at version 3, and provides access to get and set mask outline feather information.</p> <p>Effects that depend on masks now have a new flag available, <code>PF_OutFlag2_DEPENDS_ON_UNREFERENCED_MASKS</code>.</p> <p>AEGP Composition Suite is now at version 9. AEGP_CreateTextLayerInComp and</p> <p>AEGP_CreateBoxTextLayerInComp now have a new parameter, select_new_layerB.</p> <p>AEGP Render Suite is now at version 3, adding a new function to get the GUID for a render receipt.</p> <p>Finally, we have added two new read-only Dynamic Stream flags: <code>AEGP_DynStreamFlag_SHOWN_WHEN_EMPTY</code> and <code>AEGP_DynStreamFlag_SKIP_REVEAL_WHEN_UNHIDDEN</code>.</p> <p>For effects running in Premiere Pro CS6, we have added the ability to get 32-bit float and YUV frames from <code>PF_CHECKOUT_PARAM</code>.</p>"},{"location":"intro/whats-new/#and-what-was-new-before-cs6","title":"...and what was new before CS6?","text":"<p>For history this far back, see obsolete copies of the SDK (which we don't provide; if someone wants you do develop for antique software, they'd best provide the SDK).</p>"},{"location":"intro/where-installers-should-put-plug-ins/","title":"Where Installers Should Put Plug-ins","text":"<p>Installing your plug-ins in the common location will allow them to be loaded by Premiere Pro, if installed.</p> <p>On Windows, the common plug-ins folder can be found (as an explicit path) in the following registry entry: <code>HKLM\\SOFTWARE\\Adobe\\After Effects\\[version]\\CommonPluginInstallPath</code></p> <p>On Mac, the common plug-ins folder is at: <code>/Library/Application Support/Adobe/Common/Plug-ins/[version]/MediaCore</code></p> <p>Version is locked at 7.0 for all CC versions, or CSx for earlier versions. For example: <code>/Library/Application Support/Adobe/Common/Plug-ins/7.0/MediaCore/</code></p> <p>Do not use macOS aliases or Windows shortcuts, as these are not traversed by Premiere Pro.</p>"},{"location":"intro/where-installers-should-put-plug-ins/#do-i-have-to-install-the-plug-ins-to-the-common-folder","title":"Do I Have To Install The Plug-ins To The Common Folder?","text":"<p>You may have good reason to install your plug-in for only After Effects, for example, if your plug-in depends on suites and functionality not available in Premiere Pro. We strongly recommend that you use the common folder whenever possible, but for certain cases, the AE-specific plug-in folder is still available.</p> <p>On Windows, the app-specific plug-ins folder can be found (as an explicit path) in the following registry entry: <code>\\\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Adobe\\After Effects\\(version)\\PluginInstallPath</code></p> <p>On macOS, the app-specific plug-ins folder is at: <code>/Applications/Adobe After Effects [version]/Plug-ins/</code></p> <p>When launched, After Effects recursively descends 10 levels deep into subdirectories of its path. macOS aliases are traversed, but Windows shortcuts are not. Directories terminated by parentheses or preceded by the symbols \u00ac (macOS) or ~ (Windows) are not scanned.</p> <p>Try as you might to build a fence between AE and Premiere Pro, users will still find ways to get across using our lovely integration goodness - Your effects will still be available to Premiere Pro users who create a dynamically linked AE composition with your effect, and put it in a Premiere Pro sequence.</p>"},{"location":"ppro/basic-host-differences/","title":"Basic Host Differences","text":"<p>We've tried to provide robust compatibility for After Effects effect plug-ins in Premiere Pro.</p> <p>There are underlying differences in the render pipeline that lead to differences, and we realize the API implementation may not be perfect.</p> <p>Below is an overview of some differences the plug-in will encounter when running in Premiere Pro.</p>"},{"location":"ppro/basic-host-differences/#time-values","title":"Time Values","text":"<p>Premiere Pro uses slightly different time values in PF_InData. For example in CS4:</p> <p>Rendering in NTSC, time_scale is 60000, time_step is 1001, field gives field order (in After Effects, for field rendering, scale is 2997, step is 50, or for progressive rendering, scale is 2997, step is 100).</p> <p>Rendering in PAL, time_scale is 50, time_step is 1, field gives field order (in After Effects, for field rendering, scale is 3200, step is 64, or for progressive rendering, scale is 3200, step is 128).</p> <p>It's the ratio of time-related values that produces the time value, not specifically the time_scale value. It's possible Premiere Pro will use different time_scales in the future, so please don't hard code. Just be aware that it does not necessarily use the exact same values as After Effects.</p>"},{"location":"ppro/basic-host-differences/#rendering-frames","title":"Rendering Frames","text":"<p>Premiere is optimized for responsive editing. When scrubbing in the timeline, and changing effect parameters, Premiere will immediately request a low-quality render for immediate display, followed by a high-quality render. So the effect may receive two requests for the same effective time, one at a low resolution, low bit-depth, followed by one at full-resolution, full bit-depth. The resolution requested for each render with take into account the Playback and Paused Resolution set in the Source and Program Monitors: The first request will be at the Playback Resolution, and the second request will be at the Paused Resolution.</p> <p>Premiere will also perform speculative rendering, to render a set of frames ahead in the timeline, so that if/when the editor starts playback, the initial frames will be ready. This means that when repositioning the time needle, or when changing effect parameters, Premiere will ask the effect to render a set of frames ahead of the current time. If the frames have previously been rendered and cached, the effect will not see these render requests because the cached frames will be used.</p> <p>When rendering frames in Premiere-native pixel formats, Premiere will send PF_Cmd_RENDER once for each field, rather than for each frame. The <code>PF_InData-&gt;field</code> will indicate which field is being rendered, the <code>PF_LayerDef-&gt;height</code> will be half of the frame height, and the <code>PF_LayerDef-&gt;rowbytes</code> will be double the normal value.</p>"},{"location":"ppro/basic-host-differences/#render-order","title":"Render Order","text":"<p>Premiere Pro was built to provide real-time playback of footage with effects wherever possible. The render scheduling is much more aggressive and multithreaded rendering is a basic requirement. This is quite different than After Effects, where users are building layers upon layers of effects and more willing to wait for a RAM preview.</p> <p>Multithreaded rendering in Premiere applies to AE effects too. When rendering an AE effect, the request from Premiere passes through a critical section which is used for all commands, except those relating to arbitrary data. The critical section prevents two threads from calling the same instance of the effect at the same time. However, Premiere creates multiple instances of the effect, which can be called concurrently from separate threads.</p> <p>Therefore, an effect should not expect to receive render requests in order of increasing time. Also, effects should not depend on static, non-constant variables.</p>"},{"location":"ppro/basic-host-differences/#frame-dimensions","title":"Frame Dimensions","text":"<p>Differences between source footage and the project/composition are handled differently.</p> <p>For example, in CS4, when importing an NTSC clip in a PAL sequence, <code>PF_InData&gt;width,height</code> are <code>(598,480)</code> and <code>PF_InData-&gt;pixel_aspect_ratio</code> is <code>(768,702)</code>.</p> <p>In AE, <code>width,height</code> are <code>(720,480)</code> and <code>pixel_aspect_ratio</code> is <code>(10,11)</code>.</p>"},{"location":"ppro/basic-host-differences/#pf_indata","title":"PF_InData","text":"<p>Premiere Pro handles field rendering differently than After Effects. While field rendering, <code>PF_InData&gt;field</code> gives the current field being rendered, ignoring whether or not <code>PF_OutFlag_PIX_INDEPENDENT</code> flag was set.</p> <p>In Premiere Pro, effects receive the quality setting of the monitor window in PF_InData&gt;quality. This differs from After Effects, where the source layer's quality setting is provided here.</p>"},{"location":"ppro/basic-host-differences/#parameter-ui","title":"Parameter UI","text":"<p>Premiere Pro does not honor the PF_ParamFlag_START_COLLAPSED flag. Parameters are always initialized with their twirlies collapsed, and cannot be automatically twirled open by parameter supervision.</p> <p>Premiere Pro supports the macro <code>PF_ADD_FLOAT_EXPONENTIAL_SLIDER()</code>, which lets you define an exponent. Although this macro is newly added for the CC 2015 release 2 SDK, Premiere Pro has used this for some time in the Fast Color Corrector, in the Input Grey Level parameter. The exponent is used so that although the range is from 0.10 to 10, 1.0 is about in the middle of the slider. The exponent we used was 2.5. Typical values would be from 0.01 to 100.</p> <p>Starting in CC 2015, effects will not be sent <code>PF_Cmd_UPDATE_PARAMS_UI</code> or <code>PF_Event_DRAW</code> when the time needle is moved and there are no keyframes, unless the effect sets <code>PF_OutFlag_NON_PARAM_VARY</code>. Effects such as those that draw histograms in the Effect Controls panel will need to be aware of this optimization.</p>"},{"location":"ppro/basic-host-differences/#missing-suites","title":"Missing Suites","text":"<p>Many suites supported by After Effects are not implemented in the Premiere Pro host. In several cases, even if a suite is missing in Premiere Pro, an equivalent macro function is available. Here are a few examples:</p> After Effects suite call Premiere Pro equivalent function <code>WorldTransformSuite1()-&gt;copy()</code> <code>PF_COPY()</code> <code>WorldTransformSuite1()-&gt;convolve()</code> <code>in_data-&gt;utils-&gt;convolve()</code> <code>FillMatteSuite2()-&gt;fill()</code> <code>PF_FILL()</code> <code>PF_PixelDataSuite1-&gt;get_pixel_data8()</code> <code>PF_GET_PIXEL_DATA8()</code> <p>The sample projects demonstrate alternate ways of handling a missing suite, by checking for the host application and version. The Portable sample project demonstrates both host application and version checking.</p>"},{"location":"ppro/basic-host-differences/#a-special-suite-for-ae-effects-running-in-premiere-pro","title":"A Special Suite for AE Effects Running in Premiere Pro","text":"<p>No AEGP calls are supported by Premiere Pro. However, there are some interesting parallels in the header PrSDKAESupport.h. For example, you can use the Utility Suite in that header to get the frame rate or field type of the source footage, or to get the speed applied to the clip.</p> <p>Note that other suites from the Premiere Pro SDK cannot be used in AE effects.</p>"},{"location":"ppro/bigger-differences/","title":"Bigger Differences","text":"<p>As long as an effect only supports the basic ARGB_8u pixel format supported by After Effects, Premiere Pro will try to imitate the After Effects hosting behavior and hide various differences because of the different render pipeline architecture. But if an effect wants to support additional pixel formats, such as 32-bit RGB, be prepared to handle further divergent behavior.</p>"},{"location":"ppro/bigger-differences/#pixel-formats","title":"Pixel Formats","text":"<p>Premiere Pro provides function suites for declaring support for pixel formats other than the 8-bit RGB format used by After Effects - ARGB_8u. These pixel formats include the Premiere Pro native 8-bit RGB format - BGRA_8u, as well as YUV, 32-bit formats, and more. For a more detailed discussion of the various pixel formats, see \"Pixel Formats and Colorspaces\" from the Premiere Pro SDK Guide.</p> <p>Use the PF Pixel Format Suite (defined in PrAESDKSupport.h) to register for PF_EffectWorld / PF_LayerDef in other pixel formats. Use the Premiere Pixel Format Suite (defined in the aptly-named PrSDKPixelFormatSuite.h) to get black and white values in those pixel formats.</p> <p>After Effects functions such as <code>PF_BLEND()</code> have not been enhanced to work with pixel formats beyond 8-bit RGB.</p>"},{"location":"ppro/bigger-differences/#32-bit-float-support","title":"32-Bit Float Support","text":"<p>Premiere Pro does not support After Effects 16-bit rendering or SmartFX. For 32-bit rendering in Premiere Pro, you'll need to declare support for one of the 32-bit pixel formats (see previous section), and then implement 32-bit rendering for <code>PF_Cmd_RENDER</code>. You can support multiple render depths this way. See the SDK Noise sample project for an example.</p> <p>Depending on the clip(s) to which an effect is applied, 32-bit processing is not always necessary to preserve the quality of the source input. But there are settings to force 32-bit rendering, to give effects processing finer granularity and more headroom, if desired. Go to Settings&gt;Sequence Settings&gt; Video Previews&gt;Maximum Bit Depth, to control previewing from the timeline. For export to file, use Export Settings&gt;Video&gt;Basic Settings&gt;Render at Maximum Depth.</p>"},{"location":"ppro/bigger-differences/#pf_checkout_param-and-pixel-formats","title":"PF_CHECKOUT_PARAM and Pixel Formats","text":"<p>Before CS6, <code>PF_CHECKOUT_PARAM()</code> only returned 8-bit ARGB buffers, regardless of the pixel format currently being used for rendering. Starting in CS6, an effect can opt in to get frames in the same format as the render request, whether it is 32-bit float, YUV, etc.</p> <p>Plug-ins may request this behavior, but existing plug-ins will continue working receiving 8-bit ARGB frames. The call is EffectWantsCheckedOutFramesToMatch RenderPixelFormat(), in the PF Utility Suite, defined in PrSDKAESupport.h. The call should be made on <code>PF_Cmd_GLOBAL_SETUP</code>, the same selector where an effect would already advertise support beyond 8-bit RGB using <code>AddSupportedPixelFormat()</code>.</p>"},{"location":"ppro/multithreading/","title":"Multithreading","text":"<p>You may have noticed this flag: <code>PF_OutFlag2_PPRO_DO_NOT_CLONE_SEQUENCE_DATA_FOR_RENDER</code>. We advise against setting this flag, as it has been found to cause parameter UI problems.</p>"},{"location":"ppro/other-hosts/","title":"Other Hosts","text":"<p>For third-party hosts, the Adobe policy remains:</p> <p>Quote</p> <p>Adobe neither supports nor recommends the creation of Adobe-compatible third-party hosts. While it may be possible to create a partially functional host by reverse engineering from the plug-in API specification, we do not recommend it and will not support you in doing so.</p>"},{"location":"ppro/other-hosts/#reality-sandwich","title":"Reality Sandwich","text":"<p>We realize that, for developers like you, one good way to grow your market is to ensure that your plug-ins work in as many hosts as possible.</p> <p>Our SmartFX API has created quite a bit of distance between the After Effects API and the implementations available in the rest of the plug-in hosting world.</p> <p>We will do what we can to help the other hosts support newer features. If you encounter problems in third party hosts, please refer them to us if they need assistance.</p>"},{"location":"ppro/plug-in-installation/","title":"Plug-in Installation","text":"<p>Use the common plug-in folder as described here: Where Installers Should Put Plug-ins.</p> <p>If you try to install an effect plug-in only to the Premiere Pro plug-ins directory, you will be surprised to find that your effect is not rendered when you export to disk through Adobe Media Encoder, an entirely separate application.</p> <p>Oh, and you'll also miss out on project interchange and copy / paste between Premiere Pro and After Effects.</p>"},{"location":"ppro/plug-ins-reloaded/","title":"Plug-Ins... Reloaded","text":"<p>On it's first launch, Premiere Pro loads all the plug-ins, reads the PiPL, and sends <code>PF_Cmd_GLOBAL_SETUP</code> to determine the plug-ins' capabilities. To save time on future application launches, it saves some of these capabilities in what we call the plug-in cache (the registry on Windows, a Property List file on macOS). The next time the application is launched, the cached information is used wherever possible, rather than loading the plug-ins.</p> <p>When debugging, you can always force a reload of all the plug-ins by holding down the Shift key when launching Premiere Pro.</p> <p>If your effect needs to be reloaded each time, there is a way to disable this caching. The plug-in can use the PF Cache On Load Suite in AE_CacheOnLoadSuite.h (from the Premiere Pro SDK headers) to call <code>PF_SetNoCacheOnLoad()</code> during <code>PF_Cmd_GLOBAL_SETUP</code>. For the second parameter of that function, pass a non-zero value if you want your effect to show up in the UI. Pass zero if loading failed, but you still want Premiere Pro to attempt to load it again on the next relaunch.</p>"},{"location":"ppro/plug-ins-reloaded/#effects-presets","title":"Effects Presets","text":"<p>Premiere Pro uses a different preset scheme than After Effects.</p> <p>From the Premiere Pro SDK Guide:</p> <p>Effect presets appear in the Presets bin in the Effects panel, and can be applied just like Effects with specific parameter settings and keyframes. Effect presets can be created as follows:</p> <ol> <li>Apply a filter to a clip</li> <li>Set the parameters of the filter, adding keyframes if desired</li> <li>Right-click on the filter name in the Effect Controls panel, and select \"Save Preset...\"</li> <li>Create preset bins if desired by right-clicking in the Effects panel and choosing \"New Presets Bin\"</li> <li>Organize the presets in the preset folders</li> <li>Select the bins and/or presets you wish to export, right-click, and choose \"Export Preset\"</li> </ol> <p>Presets should be installed in the Plug-ins directory. Once they are installed in that directory, they will be read-only, and the user will not be able to move them to a different folder or change their names. User-created presets will be modifiable.</p> <p>On Windows Vista, these are in the user's hidden AppData folder (e.g. <code>C:/Users/[user name]/AppData/Roaming/AdobePremiere Pro/[version]/Effect Presets and Custom Items.prfpset</code>).</p> <p>On macOS, they are in the user folder, at <code>~/Library/Application Support/Adobe/Premiere Pro/[version]/Effect Presets and Custom Items.prfpset</code>.</p>"},{"location":"ppro/plug-ins-reloaded/#custom-ecw-ui-over-a-standard-data-type","title":"Custom ECW UI Over A Standard Data Type","text":"<p>While this is logged as bug #1235407, there is a simple workaround: Create two separate parameters, and have the custom UI control the slider param using parameter supervision.</p>"},{"location":"ppro/ppro/","title":"Premiere Pro &amp; Other Hosts","text":"<p>Adobe Premiere Pro and Adobe Premiere Elements both support the After Effects effect API as described in chapters 2, 3, and 5.</p> <p>They offer a thorough host implementation, some the key omissions being 3D-related calls (auxiliary channel information, cameras and lights), 16-bit and SmartFX support, and other utility functions provided by After Effects' AEGP API.</p> <p>Both Premiere Pro and Premiere Elements set <code>PF_InData&gt;appl_id</code> to 'PrMr'.</p> <p>In this chapter, we will describe the AE API support in Premiere Pro, but generally the same support exists in corresponding versions of Premiere Elements.</p> <p>If you need to distinguish between Premiere Pro and Premiere Elements, you may use the Premiere-specific App Info Suite, available from the Premiere Pro SDK headers.</p> Application Versions PF_InData&gt; version.major PF_InData&gt; version.minor Premiere Pro CC through Premiere Pro CC 2019 13 4 Premiere Pro CS6 13 2 Premiere Pro CS5.5 13 1 Premiere Pro CS5, Premiere Elements 9 13 0 Premiere Pro CS4, Premiere Elements 8 12 5 Premiere Pro CS3, Premiere Elements 4 and 7 12 4 Premiere Pro 2.0, Premiere Elements 3 12 3 Premiere Pro 1.5, Premiere Elements 2 12 2 Premiere Pro 1.0, Premiere Elements 1 12 1 <p>Note that the versioning used by Premiere Pro and Premiere Elements does not mean that they support the same API features After Effects did at the same version. It is simply meant to distinguish from one version to the next.</p>"},{"location":"ppro/premiere-elements/","title":"Premiere Elements","text":"<p>Premiere Elements (but not Premiere Pro) displays visual icons for each effect. You will need to provide icons for your effects, or else an empty black icon will be shown for your effects, or even worse behavior in Premiere Elements 8.</p> <p>The icons are 60x45 PNG files, and are placed here:</p> <p><code>/[Program Files]/Adobe/Adobe Premiere Elements [version]/Plug-in/Common/Effect/Previews/</code></p> <p>The filename should be the match name of the effect, which you specify in the PiPL Resources, prefixed with \"AE.\" So if the match name was \"MatchName\", then the filename should be \"AE.MatchName.png\"</p>"},{"location":"ppro/unsupported-features/","title":"Unsupported Features","text":"<p>Premiere Pro is currently known to not support the following features of the After Effects API:</p> <p>(If you would like a feature with a \"-\" bullet, please email Premiere Pro API Engineering with the feature request. Numbers preceded by an 'F' are feature request numbers, and the others are bug numbers)</p> <ul> <li>F7233 - extent_hint support</li> <li>F7835 - Multiple PiPLs in a single plug-in</li> <li>F7836 - AEGP support</li> <li>F7517 - Audio support - if a plug-in sets PF_OutFlag_I_USE_AUDIO in PF_Cmd_GLOBAL_SETUP, it will not be loaded at all</li> <li>F9355 - Support PF_ParamFlag_COLLAPSE_TWIRLY</li> <li>PF World Transform Suite</li> <li>PF AE Channel Suite</li> <li>AE's implementation of high bit color depth support</li> <li>SmartFX</li> <li>3D support</li> <li>PF_SUBPIXEL_SAMPLE(), PF_GET_PIXEL_DATA16()</li> </ul>"},{"location":"ppro/unsupported-features/#but-whyd-you-load-it-if-you-cant-run-it","title":"But... Why'd You LOAD It If You Can't RUN It?!","text":"<p>Premiere Pro attempts to load AEGP plug-ins. To detect this and avoid any problem behavior, your command hook function can access a suite which is only provided by After Effects; AEGP_CanvasSuite is a fine candidate.</p> <p>If the suite isn't present, return an error. The plug-in will be placed on Premiere Pro's \"don't load these\" list.</p>"},{"location":"smartfx/smartfx/","title":"SmartFX","text":"<p>The SmartFX API provides bidirectional communication between effects and After Effects, enabling many performance optimizations and providing previously unavailable dependency information. This extension of the effect API is the way to implement 32-bit per channel support in After Effects.</p> <p>Normal effect plug-ins are given a full-sized input buffer, and asked to render a full-sized output buffer. While output extent_hint specifies the portion of the output buffer that must actually be filled, this scheme is still very inefficient if the effect does not need its entire input. Also, many effects don't use extent hints.</p>"},{"location":"smartfx/smartfx/#the-way-things-were","title":"The Way Things Were","text":"<p>Consider a blur effect applied to a huge layer which is mostly off-screen, or viewed through a small region of interest, or masked down to a small size. Only a small section of the output needs to be rendered, indicated to the effect using the output extent_hint. Only a small section of the input to be blurred is needed as well - the output extent_hint expanded by the blur radius. However, using the legacy effects API, there is no way for After Effects to know this, so the entire layer is passed to the plug-in. These extra pixels can be extremely expensive and wasteful to compute, especially in the case of prior effects or nested comps.</p>"},{"location":"smartfx/smartfx/#the-way-things-are-now","title":"The Way Things Are Now","text":"<p>SmartFX solves this problem by reversing the calling sequence. The effect is told how much of its output is required, and must explicitly ask the host for the inputs it needs. The render process is split into two parts: pre-render and render.</p> <p>During pre-render, the effect describes the input pixel data it needs; this necessary input can vary based on anything you like (non-input layer parameters, non-layer parameters, information from in_data, settings in sequence data...). The effect must also return the extent of the resulting output, which may be smaller than the requested size if there are empty pixels in the requested portion of the layer.</p> <p>During the render stage, the effect can only retrieve pixels that it has previously requested. This two-pass approach facilitates many important optimizations. For example, an effect which multiplies or mattes one input against another might discover that its first input is not</p> <p>needed at all, if the mask does not intersect it. There are also important optimizations that are performed internally by After Effects to ensure that image buffers are copied as little as possible, and these optimizations are only possible after the host knows the buffer sizes and for all inputs and outputs.</p> <p>Like AEGPs, SmartFX plug-ins are never unloaded by After Effects.</p>"},{"location":"smartfx/smartfx/#content-bounds","title":"Content Bounds","text":"<p>The content bounds of a node are the largest possible result rectangle that can be returned from a call to PreRender. It absolutely cannot vary depending on current render request or anything else. It should be calculated carefully, not loosely.</p> <p>This calculation is very important. It is an intrinsic property of the node (and its inputs) and is fixed once the graph is built. Violation of it can and probably will cause all sorts of problems in various pieces of code.</p>"},{"location":"smartfx/smartfx/#how-to-smartify","title":"How To Smartify","text":"<p>Effects which set <code>PF_OutFlag2_SUPPORTS_SMART_RENDER</code> (from PF_OutFlags) will receive the SmartFX calls <code>PF_Cmd_SMART_PRE_RENDER</code> and <code>PF_Cmd_SMART_RENDER</code> (from Frame Selectors), instead of the older <code>PF_Cmd_FRAME_SETUP</code> / <code>PF_Cmd_RENDER</code> / <code>PF_Cmd_FRAME_SETDOWN</code> sequence. To preserve compatibility with non-smartified hosts, you may want to continue supporting the older commands too.</p>"},{"location":"smartfx/smartfx/#pf_cmd_smart_pre_render","title":"PF_Cmd_SMART_PRE_RENDER","text":"<p>After Effects requests output from the effect. The effect tells After Effects what input it needs to generate that output, through the use of callback functions, and by manipulating the structures in the extra parameter. An effect cannot access the pixels of any layer inputs it has not checked out during PF_Cmd_SMART_PRE_RENDER. So all layer inputs that an effect might possibly need must be checked out in advance using checkout_layer. If an effect might need certain layer inputs, they must be checked out now, even if later during rendering the effect may decide that the layer isn't needed. Also, since no parameter array is passed to SmartFX during PF_Cmd_SMART_PRE_RENDER or <code>PF_Cmd_SMART_RENDER</code>, any non-layer parameters needed must be retrieved using <code>PF_CHECKOUT_PARAM</code> (from Interaction Callbacks)</p>"},{"location":"smartfx/smartfx/#pf_prerenderextra","title":"PF_PreRenderExtra","text":"<p>Member</p> <p>Purpose</p> <p><code>PF_PreRenderInput</code></p> <p>Describes what After Effects needs rendered (in the <code>PF_RenderRequest</code>), and the bit depth requested (in the aptly-named bitdepth member).</p> <p><pre><code>typedef struct {\n  PF_LRect        rect;\n  PF_Field        field;\n  PF_ChannelMask  channel_mask;\n  PF_Boolean      preserve_rgb_of_zero_alpha;\n  char            unused[3];\n  long            reserved[4];\n} PF_RenderRequest;\n</code></pre></p> <p><code>rect</code> is in layer coordinates. field is also relative to the layer origin; whether the active field falls on even or odd scanlines of the output buffer depends on the origin of the output buffer.</p> <p><code>channel_mask</code> specifies for which channels the effect should provide output.</p> <p>Data written to other channels will not be honored.</p> <p>It will be one or more of the following, or'd together:</p> <ul> <li><code>PF_ChannelMask_ALPHA</code></li> <li><code>PF_ChannelMask_RED</code></li> <li><code>PF_ChannelMask_GREEN</code></li> <li><code>PF_ChannelMask_BLUE</code></li> <li><code>PF_ChannelMask_ARGB</code></li> </ul> <p>If <code>preserve_rgb_of_zero_alpha</code> pixels is <code>TRUE</code>, the effect must propagate the color content of transparent pixels through to the output.</p> <p>This is related to, but distinct from, PF_OutFlag2_REVEALS_ZERO_ALPHA, which tells After Effects that the effect may set alpha to non-zero values for such pixels, restoring them to visibility.</p> <p><code>PF_PreRenderOutput</code></p> <p>Filled in by the effect to tell After Effects what output it plans to generate, based on the input.</p> <p><pre><code>typedef struct {\n  PF_LRect                    result_rect;\n  PF_LRect                    max_result_rect;\n  PF_Boolean                  solid;\n  PF_Boolean                  reserved;\n  PF_RenderOutputFlags        flags;\n  void*                       pre_render_data;\n  PF_DeletePreRenderDataFunc  func;\n} PF_PreRenderOutput;\n</code></pre></p> <p><code>pre_render_data</code> will be passed back to the effect during PF_Cmd_SMART_RENDER.</p> <p>Currently, the only <code>PF_RenderOutputFlags</code> is <code>PF_RenderOutputFlag_RETURNS_EXTRA_PIXELS</code>.</p> <p><code>PF_PreRenderCallbacks</code></p> <p>Currently, there is only one callback - <code>checkout_layer</code>. checkout_idL is chosen by the effect.</p> <p>It must be positive and unique. After Effects populates the <code>PF_CheckoutResult</code>.</p> <p><pre><code>PF_Err checkout_layer(\n  PF_ProgPtr              effect_ref,\n  PF_ParamIndex           index,\n  A_long                  checkout_idL,\n  const PF_RenderRequest  *req,\n  A_long                  what_time,\n  A_long                  time_step,\n  A_u_long                time_scale,\nPF_CheckoutResult       *result);\n\ntypedef struct {\n  PF_LRect          result_rect;\n  PF_LRect          max_result_rect;\n  PF_RationalScale  par;\n  long              solid;\n  PF_Boolean        reservedB[3];\n  A_long            ref_width;\n  A_long            ref_height;\n} PF_CheckoutResult;\n</code></pre></p> <p><code>result_rect</code> can be empty. <code>max_result_rect</code> is the largest the output could possibly be, if the host asked for all of it.</p> <p>If solid is <code>TRUE</code>, the entire result_rect has opaque alpha.</p> <p><code>ref_width</code> and <code>ref_height</code> are the original dimensions of the layer, before any effects are applied, disregarding any downsample factors.</p> <p>This will be the size of the composition for collapsed layers.</p> <p>There is a bug in 11.0 with the Global Performance Cache, when a SmartFX effect uses both PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT &amp; PF_OutFlag_NON_PARAM_VARY.</p> <p>Calling checkout_layer during <code>PF_Cmd_SMART_PRE_RENDER</code> returns empty rects in <code>PF_CheckoutResult</code>.</p> <p>The workaround is to simply make the call again. This workaround is no longer needed in 11.0.1.</p> <p><code>result_rect</code></p> <p>The output (in layer coordinates) resulting from the render request (can be empty).</p> <p>This cannot be bigger than the input request rectangle (unless <code>PF_RenderOutputFlag_RETURNS_EXTRA_PIXELS</code> is set), but can be smaller.</p> <p><code>max_result_rect</code></p> <p>The maximum size the output could possibly be, if After Effects requested all of it.</p> <p>This must not vary depending on requested output size.</p> <p><code>solid</code></p> <p>Set this <code>TRUE</code> if every pixel in the output will be fully opaque. Set if possible; it enables certain optimizations.</p> <p><code>reserved</code></p> <p>Ignore.</p> <p><code>flags</code></p> <p>Currently, the only flag is <code>PF_RenderOutputFlag_RETURNS_EXTRA_PIXELS</code>, which tells After Effects that the smart effect will return more pixels than After Effects requested.</p> <p><code>pre_render_data</code></p> <p>Point this at any data that the effect would like to access during rendering.</p> <p>Effects can also allocate handles and store them in <code>out_data&gt;frame_data</code>, as with regular (non-smart) effects.</p> <p>Since PF_Cmd_SMART_PRE_RENDER can be called with no corresponding PF_Cmd_SMART_RENDER, effects must never delete this data themselves; once the effect returns from PF_Cmd_SMART_PRE_RENDER, After Effects owns this data and will dispose of it (using either the following function or a standard free call).</p> <p><code>delete_pre_render_data_func</code></p> <p>Point this to a function that will eventually be called to delete the pre_render_data.</p>"},{"location":"smartfx/smartfx/#preserve_rgb_of_zero_alpha","title":"preserve_rgb_of_zero_alpha","text":"<p><code>preserve_rgb_of_zero_alpha</code> is used both as input to the effect, to tell it what to render, and as output from the effect, to describe the input it needs (as passed to the checkout call). When preserve_rgb_of_zero_alpha is set in an input request, the effect must pass it recursively when making checkouts, otherwise prior effects and masking will eliminate those pixels that the effect would reveal. Use of this is discouraged, though still supported in CS3 (8.0).</p>"},{"location":"smartfx/smartfx/#rectangles","title":"Rectangles","text":"<p>Effects must set both result rectangles accurately. After Effects' caching system relies upon them, incorrect values can cause many problems. If the plug-in returns a <code>result_rect</code> smaller than the request_rect, that tells After Effects the pixels inside the request_rect but outside the <code>result_rect</code> are empty.</p> <p>Similarly, <code>max_result_rect</code> must encompass all non-zero pixels; the effect will never be asked to render anything outside this region. If there are pixels outside this rectangle, they will never be displayed.</p> <p>Mis-sized output rectangles can cause problems as well. If these rectangles are too big, a loss of performance results.</p> <p>Not only will many empty pixels be cached (robbing the application of valuable memory), the effect may be unnecessarily asked to render large regions of nothing. For this reason, the <code>max_result_rect</code> must be computed correctly, rather than set to some arbitrarily large size.</p> <p>Both <code>result_rect</code> and <code>max_result_rect</code> may vary depending on the effect's parameters, the current time, et cetera; they are valid only for the given invocation of the effect. However, <code>max_result_rect</code> cannot depend on the specific render request. It must be the same no matter what portion of the output is requested by After Effects.</p> <p>It is legal to return an empty <code>result_rect</code> if the request_rect doesn't intersect the effect's output pixels; no rendering need be done.</p> <p>After Effects may also call the effect with an empty request_rect, meaning the effect is only being asked to compute the <code>max_result_rect</code>.</p> <p><code>preserve_rgb_of_zero_alpha</code> can influence the bounds computation process (both result_rect and <code>max_result_rect</code>) and must be respected if the effect behaves differently depending on this setting.</p>"},{"location":"smartfx/smartfx/#the-size-of-a-layer","title":"The \"Size\" Of A Layer","text":"<p>As with non-smart effects, each smart effect can arbitrarily shrink or expand its requested input. They cannot depend on a fixed frame size, and the size of the input may change over time.</p> <p>For example, the user could apply an animated drop shadow to a layer, which would add pixels to different edges of the layer at different times, depending on the direction in which the shadow is cast.</p> <p>Some effects (for example, those which need to align one layer against another) need some notion of \"size.\" This could be defined two ways, each with advantages and disadvantages.</p> <p>The size of the original layer, before any effects and downsampling are applied, is given <code>in_data&gt;width/height</code>. As this value is unaffected by subsequent effects, it can act an absolute reference for things like center points.</p> <p>However, this is not fool-proof, as the user could have applied a distortion or translation effect. Also, this value is available only for the layer to which the effect is applied, not other layer parameters.</p> <p>...or...</p> <p>Every layer input has a <code>max_result_rect</code> which encompasses all pixel data, in some sense the master \"size\" of a layer.</p> <p>It is available for all layers, but changes over time according to previously applied effects, possibly in ways the user might not expect (as in the drop shadow example above).</p> <p>Note that the ref_width/height and <code>max_result_rect</code> for an input may be obtained without rendering, by calling <code>checkout_layer</code> with an empty <code>request_rect</code>.</p> <p>This is fairly efficient, and can be useful if the layer \"size\" is needed first to determine exactly which pixels are required for rendering.</p> <p>This is an example of requesting a layer in pre-render and then never calling <code>checkout_layer</code> (in this case, there are none).</p>"},{"location":"smartfx/smartfx/#flag-on-the-play","title":"Flag On The Play","text":"<p>Normally, the <code>max_result_rect</code> of a given <code>PF_RenderRequest</code> will be cropped to the bounds of any applied mask.</p> <p>However, if PF_OutFlag2_REVEALS_ZERO_ALPHA is set, the <code>max_result_rect</code> will be the size of the layer.</p>"},{"location":"smartfx/smartfx/#pf_cmd_smart_render","title":"PF_Cmd_SMART_RENDER","text":"<p>The effect will receive at most one PF_Cmd_SMART_RENDER call for each pre-render.</p> <p>Note that render may never be called at all. After Effects may have only wanted to to perform some bounds computations, or it may have subsequently discovered that an effect's output is not needed at all (which can happen, for example, if the pre-render phase for a track matte returns a rectangle that does not intersect the effect's output.)</p> <p>All effects must be able to handle Pre-Render without Render without leaking resources or otherwise entering an unstable state.</p> <p>During PF_Cmd_SMART_RENDER, the extra parameter points to a PF_SmartRenderExtra.</p>"},{"location":"smartfx/smartfx/#pf_smartrenderextra","title":"PF_SmartRenderExtra","text":"<p>Member</p> <p>Purpose</p> <p><code>PF_SmartRenderInput</code></p> <p>Consists of a PF_RenderRequest, the bitdepth, and a pointer to <code>pre_render_data</code> (allocated during PF_Cmd_SMART_PRE_RENDER).</p> <p>This <code>PF_SmartRenderInput</code> is identical to that passed in the corresponding PF_Cmd_SMART_PRE_RENDER.</p> <p><code>PF_SmartRenderCallbacks</code></p> <p><pre><code>PF_Err checkout_layer_pixels(\n  PF_ProgPtr      effect_ref,\n  A_long          checkout_idL,\n  PF_EffectWorld  *pixels);\n</code></pre></p> <p>This is used to actually access the pixels in layers checked out during PF_Cmd_SMART_PRE_RENDER.</p> <p>The returned <code>PF_EffectWorld</code> is valid for duration of current command or until checked in.</p> <p>You are only allowed to call <code>checkout_layer_pixels</code> only once with the checkout_idL used earlier in PF_Cmd_SMART_PRERENDER.</p> <p>There must be a one-to-one mapping between the number of checkouts made in PF_Cmd_SMART_PRERENDER and PF_Cmd_SMART_RENDER.</p> <p>To call <code>checkout_layer_pixels</code> more than once on a layer, you should call checkout_layer on the same layer again with a different unique <code>checkout_idL</code> in PF_Cmd_SMART_PRERENDER and then use that <code>checkout_idL</code> to do another <code>checkout_layer_pixels</code> in PF_Cmd_SMART_RENDER.</p> <p><pre><code>PF_Err checkin_layer_pixels(\n  PF_ProgPtr  effect_ref,\n  A_long      checkout_idL);\n</code></pre></p> <p>It isn't necessary to call (After Effects cleans up all such checkouts when the effect returns from PF_Cmd_SMART_RENDER), but useful to free up memory.</p> <p><pre><code>PF_Err checkout_output(\n  PF_ProgPtr      effect_ref,\n  PF_EffectWorld  *output);\n</code></pre></p> <p>Retrieves the output buffer. Note that effects are not allowed to check out output until at least one input has been checked out (unless the effect has no inputs at all).</p> <p>Tip</p> <p>For optimal memory usage, request the output as late as possible, and request inputs as few at a time as possible.</p>"},{"location":"smartfx/smartfx/#when-to-access-layer-parameters","title":"When To Access Layer Parameters","text":"<p>Parameters other than layer inputs may be freely checked out at any point. Layer inputs must be accessed during PF_Cmd_SMART_PRE_RENDER.</p> <p>However, you aren't required to actually use every input.</p> <p>If you check out a frame (or portion thereof) in PF_Cmd_SMART_PRE_RENDER and do not subsequently check it out in <code>PF_Cmd_SMART_RENDER</code>, it need never be rendered, greatly improving performance.</p>"},{"location":"smartfx/smartfx/#wait-gimme-that-layer-back","title":"Wait, Gimme That Layer Back!","text":"<p><code>checkout_layer_pixels</code> can only be called once with the checkout_id used earlier in PreRender. There has to be a one-to-one mapping on the number of checkouts made in PreRender and SmartRender. If you need to check out the pixels of a layer more than once, perhaps because of the structure of your code, just use more than one checkout_id. In PreRender, call checkout_layer on the same layer with different unique checkout_ids. Then in SmartRender, use a different one of those checkout_ids each time checkout_layer_pixels is called in SmartRender.</p>"}]}